{"version":3,"sources":["noteFeedController.js","formDetailsController.js","formListController.js","formPreviewController.js","formQuestionsController.js","headerController.js","loginController.js","questionDetailsController.js","questionListController.js","confirmController.js","deleteConfirmationModalController.js","linkQuestionModalController.js","modifyFormOrganizationsController.js","modifyQuestionDisplayLogicController.js","modifyQuestionOrganizationsController.js","newFormController.js","newQuestionController.js","newQuestionModalController.js","noteModalController.js","publishVersionCommentController.js","publishVersionCommentDetailsController.js","confirmDirective.js","convertDirective.js","ebmedsService.js","formService.js","noteService.js","organizationService.js","questionService.js","appRoutes.js","form_app.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","angular","module","controller","$scope","$stateParams","Forms","$window","$filter","$translate","$rootScope","$location","$modal","Organization","toastr","formID","formid","readonlymode","publishDraft","readonlymodePublish","odaerror","publishModalForm","id","comment","savedOrganizations","$translateVar","disabled","disabled2","form","ID","oldForm","categories","categoryName","categoryValue","disabledValidation","disabledApproval","showOdaPreview","showFocalPreview","languages","focalUrl","loadFormByID","data","status","dataStatus","STATUS","loadFormOrganizations","data2","status2","organizationList","ORGANIZATIONS","FORM_ID","push","NAME","ORG_ID","loggedUser","organization","rightlevel","find","o","previewLink","url","SLUG","updatePreviewLink","slug","copy","rulelink","rulelinkExists","URL_LINK","substr","formDetailsTitle","staticStatus","statuses","statusName","statusValue","VALIDATED","validated","editOrganizations","open","animation","size","templateUrl","backdrop","resolve","formData","result","then","newFormData","loadPublishCommentByFormId","versions","previewOda","PreviewFormVersion","SCRIPT_ID","odaErrorText","location","diagnostics","oda_preview_id","href","oda_preview_url","previewLanguage","displayLanguage","toLowerCase","language","dataLanguage","validate","ValidateFormVersion","issues","previewInternal","path","selectPreviewLang","toLang","previewLanguages","FI","SV","EN","handlePreview","previewType","hasChanged","error","preview","handlePublish","questionsWithIllegalDisplayRules","modal","action","PublishSaveFormVersion","payload","filter","el","severity","reduce","acc","$emit","handleSave","console","log","formForm","$valid","editForm","fi-FI","success","loading","goBack","$modalInstance","ok","close","cancel","dismiss","window","history","back","$http","Questions","currentPage","formPageSize","displayForms","getDisplayStatus","organizationsLoaded","sortForms","column","descending","forms","getForms","loadForms","formsOrganizations","printOrganizations","readonlydelete","indexOf","organizationName","switchView","toView","setStatus","changeSorting","getIcon","deleteForm","f","confirmationMessage","$q","Ebmeds","lowerCaseString","value","PreviewLoaded","useLiveMode","calendarOptions","starting-day","opened","openStartDateCalendar","$event","indexvalue","preventDefault","stopPropagation","restoreLanguage","use","$on","detailsForm","replace","INTRODUCTION","questions","loadQuestionsInForm","forEach","question","QUESTIONTEXT","TYPE","loadAnswers","ANSWERS","FORMANSWER","questionAnswer","answer","index","ANSWER_TEXT","choiceQuestion","hasNoneOfTheAboveChoice","NONE_ANSWER","isTheLastChoice","isMissingNoneOfTheAbove","a","loadDisplayRulesAll","NUMBEROFDISPLAYRULES","DISPLAYRULES","QUESTION_ID","containcheck","hideit","orShow","$watch","newValue","rule","OPERATOR","questionrule","VALUE","ANSWER_ID","parseInt","ANSWER_QUESTION_ID","LOGIC","Number","FORMHIDE","CheckClick","noneChecked","j","READONLY","Units","text","sendtoEBMEDS","feedbackFromEBMeDSResponse","nofeedback","showrequest","showresponse","toString","ANSWER_VALUE","unit","u","UNIT_ID","formatRecommendation","recommendation","callEBMeDS","questionnnaires","viewFeedback","responseBody","questionnaire","q","recommendations","r","texts","patient","practitioner","JSON","stringify","undefined","feedbackFromEBMeDSRequest","requestBody","finalize","document","getElementById","scrollIntoView","$","animate","scrollTop","offset","top","groupQuestions","selectedQuestion","showSortControls","questionTypes","getQuestionTypes","getQuestionTypesEN","checkForIllegalDisplayRules","existing","findIndex","splice","operator","slice","some","displayRule","loadQuestions","map","join","logic","setOptional","OPTIONAL","setLinkedQuestionOptions","setReadOnly","READ_ONLY","expandAll","expanded","collapseAll","showQuestionAndDisplayLogic","toggleSortControl","swapQuestions","b","swapQuestionPositionsInForm","positions","POSITION","setQuestionGroup","GROUP_QUESTION","getQuestionGroupName","group","moveQuestionUp","moveQuestionDown","openLinkQuestionModal","questionID","linkQuestionToForm","openNewQuestionModal","modifyQuestionDisplayLogic","selectedLogicQuestion","loadDisplayRules","removeQuestion","removeLinkQuestionToForm","saveDisplayRuleOperator","operatorid","operatorinfo","calendar1Open","hasInvalidLogics","invalid","hasIllegalDisplayRules","deleteRule","logicId","removeDisplayLogic","l","$state","username","fullname","loadOrganizations","organizations","userorganization","isLoggedIn","loggedIn","getCurrentLang","selectLang","selectedLanguage","logout","get","api_prefix","go","authAddress","logoutLink","logout_page","errorMessage","showError","login","user","password","post","feedback","search","hasOwnProperty","fail","showFailMessage","userinfoLink","userinfo_page","openUserinfolink","Notes","notes","comments","notesAndComments","isFinnishVersion","JSONFHIR","fetchNotesAndComments","formId","questionId","loadNotesInForm","PUBLISHER","VERSION_COMMENT","json","parse","e","parseJSON","finnishComments","concat","sort","elA","elB","dateA","Date","CREATED_AT","getTime","loadNotesInQuestion","questionid","handleComment","publishComments","addNewNote","modalTitle","noteData","newNote","saveNewNote","deleteFeedNote","noteid","deleteNote","canEdit","noteOrComment","CREATED_BY","editFeedNote","note","editedNote","editNote","type","showNoteFilter","$timeout","confirmModal","title","confirmEdit","Promise","isLoading","questionsLoading","answers","disabledID","questionInfo","oldQuestionInfo","placeholderText","selectedRow","tooltipMoveUp","tooltipMoveDown","codeSystems","systemCodes","loadCodeSystems","items","system","loadSystemCodes","loadQuestion","getQuestion","loadLinkedForms","loadQuestionOrganizations","detailsPageTitle","getAnswers","typeChanged","saveQuestion","save","updateQuestion","deleteAnswer","saveNumberAnswer","saveAnswers","newAnswer","ORDER_NUM","MIN","MAX","DECIMALS","createAnswer","addAnswer","create","removeAnswer","answerID","addQuestionCode","CODES","removeQuestionCode","codeKey","confirm","deleteQuestionCode","c","_","k","addAnswerCode","answerId","removeAnswerCode","deleteAnswerCode","goHome","moveUp","switchAnswers","moveDown","questionData","newQuestionData","editAnswer","answersSuccess","deleteQuestion","questionPageSize","displayQuestions","sortQuestions","getQuestions","questionsOrganizations","message","yes","no","questionListPageSize","allQuestions","formQuestions","DELETED","questionname","getDisplayQuestions","loadDisplayQuestionData","selectedquestion","selectedquestionid","answertype","answeroperation","answervalue","answerArray","answerArrayID","selectAnswer","jQuery","inArray","answerArrayWithIndex","answerArrayWithIndexID","SaveDisplayLogic","answermultivalue","answermultivalueID","checkMultiValue","displayinfo","createDisplayRule","EBMEDS_USAGE","CATEGORY","saveForm","createForm","NEW_ID","questionTypeOptions","newQuestionForm","createQuestion","newID","questionForm","$invalid","array","TEXT","publishForm","prev","current","Object","assign","[object Object]","publish","$viewValue","trim","ObjectDiff","paginationSize","filterBySelectedLanguage","code","includes","labels","sv-FI","en-GB","langs","lang","label","allPublishComments","allPublishCommentsOnSelectedLang","diffComment","shift","setDiff","diffedComment","diffOwnProperties","commentToBeDiffed","processDiffBetweenComments","diffCommentId","loadCurrentSavedVersionByFormId","handleDiff","handleCurrentSavedVersion","handleDeprecate","deprecate","deprecateFormVersion","directive","$parse","priority","link","scope","element","attrs","on","event","stopImmediatePropagation","ngClick","require","ngModel","$parsers","val","$formatters","factory","callback","finally","getLanguage","options","position","linkQuestion","DESCRIPTION","APPROVED_BY","COPYRIGHT","ORGANISATION","EDITED_BY","put","delete","questionid1","questionid2","groupQuestion","setSendToEBMeDS","sendToEBMeDS","SEND_TO_EBMEDS","isEmpty","keys","key","val2","equals","scriptID","params","toastrError","warning","errorText","errormessage","loadFocalUrl","noteID","displayquestionsdata","loadDisplayQuestionAnswerData","questiondata","systemId","answerInfo","index1","index2","temp","SetLanguage","getDisplayAnswerQuestions","displayInfo","logicID","config","$stateProvider","$urlRouterProvider","$locationProvider","otherwise","html5Mode","state","views","","header@login","login@login","abstract","template","auth","res","header@secured.main","forms@secured.main","questions@secured.main","header@secured.questionDetails","question@secured.questionDetails","questionNotes@secured.questionDetails","header@secured.formDetailsPage","formDetails@secured.formDetailsPage","formQuestions@secured.formDetailsPage","formNotes@secured.formDetailsPage","header@secured.newFormPage","formDetails@secured.newFormPage","header@secured.newQuestionPage","question@secured.newQuestionPage","prefix","run","paginationTemplateProvider","setPath","$translateProvider","useLoader","useSanitizeValueStrategy","deferred","defer","method","reject","promise","$httpProvider","interceptors","$injector","defaults","headers","Pragma","rejection","toastrConfig","extend","autoDismiss","positionClass","maxOpened","newestOnTop","progressBar","timeOut","closeButton"],"mappings":"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","file":"../app.js","sourcesContent":["function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\n// Controller for note feed that contains notes for individual forms and questions written by users\n\nangular.module('NoteFeedCtrl', ['ui.bootstrap']).controller('NoteFeedController', ['$rootScope', '$scope', '$modal', '$stateParams', 'Notes', 'Forms', 'Questions', '$filter', function ($rootScope, $scope, $modal, $stateParams, Notes, Forms, Questions, $filter) {\n  const $translate = $filter('translate');\n  $scope.notes = [];\n  $scope.comments = [];\n  $scope.notesAndComments = [];\n  $scope.loading = Notes.loading;\n\n  const parseJSON = function (json) {\n    try {\n      return JSON.parse(json);\n    } catch (e) {\n      return json;\n    }\n  };\n\n  const isFinnishVersion = function (comment) {\n    return comment.JSONFHIR && comment.JSONFHIR.language && (comment.JSONFHIR.language === 'fi' || comment.JSONFHIR.language === 'fi-FI');\n  };\n\n  const fetchNotesAndComments = function (formId, questionId) {\n    if (formId) {\n      Forms.loadNotesInForm(formId, function (notes) {\n        return Forms.loadPublishCommentByFormId(formId, function (comments) {\n          $scope.comments = comments.filter(function (comment) {\n            return comment.PUBLISHER && comment.VERSION_COMMENT;\n          }).map(function (comment) {\n            comment.JSONFHIR = parseJSON(comment.JSON);\n            return comment;\n          });\n\n          $scope.finnishComments = $scope.comments.filter(isFinnishVersion);\n\n          $scope.notesAndComments = [].concat(_toConsumableArray(notes), _toConsumableArray($scope.finnishComments)).sort(function (elA, elB) {\n            const dateA = new Date(elA.CREATED_AT);\n            const dateB = new Date(elB.CREATED_AT);\n\n            // Ordering the most recent timestamp\n            return dateB.getTime() - dateA.getTime();\n          });\n          $scope.notes = notes;\n        });\n      });\n    } else if (questionId) {\n      Questions.loadNotesInQuestion(questionId, function (data) {\n        $scope.notes = data;\n        $scope.notesAndComments = data;\n      });\n    }\n  };\n\n  const formId = $stateParams.formid;\n  const questionId = $stateParams.questionid;\n  fetchNotesAndComments(formId, questionId);\n\n  $rootScope.$on('saved-publish-comment', function () {\n    return fetchNotesAndComments(formId, questionId);\n  });\n\n  $scope.handleComment = function (comment) {\n    $modal.open({\n      animation: true,\n      size: 'custom-size',\n      templateUrl: 'view/modal/publish-version-comment-details-modal.html',\n      controller: 'PublishVersionCommentDetailsController',\n      backdrop: 'static',\n      resolve: {\n        formId: function () {\n          return formId;\n        },\n        comment: function () {\n          return comment;\n        },\n        publishComments: function () {\n          return $scope.comments;\n        }\n      }\n    }).result.then(function (result) {\n      if (result.action === 'reload-versions') {\n        fetchNotesAndComments(formId, questionId);\n      }\n    });\n  };\n\n  // Opens a modal for adding a new note to feed\n  $scope.addNewNote = function () {\n    const modalInstance = $modal.open({\n      animation: true,\n      size: 'md',\n      templateUrl: 'view/modal/noteModal.html',\n      backdrop: 'static',\n      controller: 'NoteModalController',\n      resolve: {\n        modalTitle() {\n          return $translate('NEW_NOTE');\n        },\n        noteData() {\n          return false;\n        }\n      }\n    });\n\n    // User presses Save button\n    modalInstance.result.then(function (newNote) {\n      if ($stateParams.formid) {\n        newNote.FORM_ID = $stateParams.formid;\n      } else if ($stateParams.questionid) {\n        newNote.QUESTION_ID = $stateParams.questionid;\n      } else {\n        return;\n      }\n\n      Notes.saveNewNote(newNote, function (status) {\n        if (status < 400) {\n          fetchNotesAndComments(formId, questionId);\n        }\n      });\n    });\n  };\n\n  // Opens a modal to delete a note\n  $scope.deleteFeedNote = function (noteid) {\n    const modalInstance = $modal.open({\n      animation: true,\n      size: 'md',\n      templateUrl: 'view/modal/deleteConfirmationModal.html',\n      backdrop: 'static',\n      controller: 'DeleteConfirmationModalController',\n      resolve: {\n        confirmationMessage() {\n          return $translate('DELETE_NOTE_CONFIRMATION');\n        }\n      }\n    });\n\n    // User presses Save button\n    modalInstance.result.then(function () {\n      Notes.deleteNote(noteid, function (status) {\n        if (status < 400) {\n          fetchNotesAndComments(formId, questionId);\n        }\n      });\n    });\n  };\n\n  $scope.canEdit = function (noteOrComment) {\n    return noteOrComment.CREATED_BY === $rootScope.loggedUser.id;\n  };\n\n  // Opens a modal to edit a note\n  $scope.editFeedNote = function (note) {\n    const modalInstance = $modal.open({\n      animation: true,\n      size: 'md',\n      templateUrl: 'view/modal/noteModal.html',\n      backdrop: 'static',\n      controller: 'NoteModalController',\n      resolve: {\n        modalTitle() {\n          return $translate('EDIT_NOTE');\n        },\n        noteData() {\n          return note;\n        }\n      }\n    });\n\n    // User presses Save button\n    modalInstance.result.then(function (editedNote) {\n      Notes.editNote(editedNote, function (status) {\n        if (status < 400) {\n          fetchNotesAndComments(formId, questionId);\n        }\n      });\n    });\n  };\n\n  if (formId) {\n    $scope.filter = {\n      type: '*'\n    };\n  }\n\n  $scope.showNoteFilter = function (comment) {\n\n    if (!$scope.filter) {\n      return true;\n    }\n\n    if ($scope.filter.type === 'versions' && comment.PUBLISHER && comment.VERSION_COMMENT) {\n      return true;\n    }\n    if ($scope.filter.type === 'notes' && !comment.PUBLISHER) {\n      return true;\n    }\n    if ($scope.filter.type === 'questions' && comment.QUESTION_ID) {\n      return true;\n    }\n    return $scope.filter.type === '*';\n  };\n}]);","angular.module('FormDetailsCtrl', ['angularUtils.directives.dirPagination', 'ui.bootstrap']).controller('FormDetailsController', ['$scope', '$stateParams', 'Forms', '$window', '$filter', '$translate', '$rootScope', '$location', '$modal', 'Organization', 'toastr', function ($scope, $stateParams, Forms, $window, $filter, $translate, $rootScope, $location, $modal, Organization, toastr) {\n  $scope.formID = $stateParams.formid;\n  $scope.readonlymode = true;\n  $scope.publishDraft = true;\n  $scope.readonlymodePublish = true;\n  $scope.odaerror = '';\n  $scope.publishModalForm = { id: null, comment: '' };\n  let savedOrganizations = [];\n  const $translateVar = $filter('translate');\n  $scope.disabled = false;\n  $scope.disabled2 = true;\n  $scope.form = {\n    ID: $scope.formID\n  };\n  $scope.oldForm = {\n    ID: $scope.formID\n  };\n  $scope.categories = [{ categoryName: 'Oirearviokysely', categoryValue: 'symptom' }, { categoryName: 'Terveystarkastus', categoryValue: 'health-check' }, { categoryName: 'Pitkäaikaissairaudet', categoryValue: 'chronic-disease' }];\n  $scope.disabledValidation = true;\n\n  $scope.disabledApproval = true;\n\n  $scope.showOdaPreview = false;\n  $scope.showFocalPreview = false;\n\n  $scope.languages = [];\n  $scope.focalUrl = '';\n\n  Forms.loadFormByID($scope.formID, function (data, status) {\n    const dataStatus = data.STATUS;\n    Organization.loadFormOrganizations(function (data2, status2) {\n      $scope.organizationList = '';\n      $scope.form.ORGANIZATIONS = [];\n      for (let i = 0; data2.length > i; i++) {\n        if (data2[i].FORM_ID == $scope.formID) {\n          $scope.form.ORGANIZATIONS.push(data2[i]);\n          if ($scope.organizationList.length > 0) {\n            $scope.organizationList += ', ';\n          }\n          $scope.organizationList += data2[i].NAME;\n          if (data2[i].ORG_ID === '81') {\n            $scope.showOdaPreview = true;\n          }\n          if (data2[i].ORG_ID === '105') {\n            $scope.showFocalPreview = true;\n            $scope.focalUrl = \"\";\n          }\n          if ($rootScope.loggedUser.organization == data2[i].ORG_ID && $rootScope.loggedUser.rightlevel == 2) {\n            $scope.readonlymode = false;\n          }\n        }\n      }\n      savedOrganizations = $scope.form.ORGANIZATIONS;\n      if ($rootScope.loggedUser) {\n\n        if ($rootScope.loggedUser.rightlevel == 3) {\n          $scope.readonlymode = false;\n          if (dataStatus == 'Production') {\n            $scope.readonlymodePublish = false;\n          }\n          if (dataStatus == 'Draft' && savedOrganizations.find(function (o) {\n            return o.NAME === \"FOCAL\";\n          })) {\n            $scope.publishDraft = false;\n          }\n        }\n      }\n\n      $scope.oldForm.ORGANIZATIONS = savedOrganizations;\n    });\n    $scope.form = data;\n    const previewLink = 'https://forms.ebmedscloud.org/questionnaire';\n    $scope.previewLink = {\n      url: previewLink + '/' + (data.SLUG || '<path>')\n    };\n    $scope.updatePreviewLink = function (slug) {\n      $scope.previewLink.url = previewLink + '/' + slug;\n    };\n    $scope.oldForm = angular.copy(data);\n    // adding link to scope\n    $scope.rulelink = '';\n    $scope.rulelinkExists = false;\n    if ($scope.form.URL_LINK) {\n      if ($scope.form.URL_LINK.length > 0) {\n        if ($scope.form.URL_LINK.substr(0, 7) == 'http://' || $scope.form.URL_LINK.substr(0, 8) == 'https://') {\n          $scope.rulelink = $scope.form.URL_LINK;\n          $scope.rulelinkExists = true;\n        } else {\n          $scope.rulelink = 'http://' + $scope.form.URL_LINK;\n          $scope.rulelinkExists = true;\n        }\n      }\n    }\n\n    $scope.formDetailsTitle = $translateVar('FORM_TITLE_1') + ' \"' + $scope.form.NAME + '\" ' + $translateVar('FORM_TITLE_2');\n    // setting up dynamic status options based on form status from db.\n    const staticStatus = $scope.form.STATUS;\n    if (staticStatus == 'Draft') {\n      $scope.statuses = [{\n        statusName: $translateVar('DRAFT'),\n        statusValue: 'Draft'\n      }, {\n        statusName: $translateVar('VALIDATION_PENDING'),\n        statusValue: 'Validation Pending'\n      }];\n    }\n    if (staticStatus == 'Validation Pending') {\n      $scope.statuses = [{\n        statusName: $translateVar('VALIDATION_PENDING'),\n        statusValue: 'Validation Pending'\n      }, {\n        statusName: $translateVar('PRODUCTION'),\n        statusValue: 'Production'\n      }, { statusName: $translateVar('DISCARDED'), statusValue: 'Discarded' }];\n    }\n    if (staticStatus == 'Production') {\n      $scope.statuses = [{\n        statusName: $translateVar('PRODUCTION'),\n        statusValue: 'Production'\n      }, { statusName: $translateVar('DRAFT'), statusValue: 'Draft' }, { statusName: $translateVar('DISCARDED'), statusValue: 'Discarded' }];\n    }\n    if (staticStatus == 'Discarded') {\n      $scope.statuses = [{\n        statusName: $translateVar('DISCARDED'),\n        statusValue: 'Discarded'\n      }, { statusName: $translateVar('DRAFT'), statusValue: 'Draft' }];\n    }\n\n    // Validated checkbox must be checked if validation exists\n    if ($scope.form.VALIDATED) {\n      $scope.validated = true;\n    }\n  });\n\n  $scope.editOrganizations = function (form) {\n    const modalInstance = $modal.open({\n      animation: true,\n      size: 'lg',\n      templateUrl: 'view/modal/modifyFormOrganizationsModal.html',\n      backdrop: 'static',\n      controller: 'ModifyFormOrganizationsController',\n      resolve: {\n        formData() {\n          return form;\n        }\n      }\n    });\n\n    modalInstance.result.then(function (newFormData) {\n      $scope.form = newFormData;\n      $scope.organizationList = '';\n      for (let i = 0; $scope.form.ORGANIZATIONS.length > i; i++) {\n        if ($scope.organizationList.length > 0) {\n          $scope.organizationList += ', ';\n        }\n        $scope.organizationList += $scope.form.ORGANIZATIONS[i].NAME;\n      }\n    });\n  };\n\n  // Defaults publish languages to previous version\n  Forms.loadPublishCommentByFormId($stateParams.formid, function (versions) {\n    if (versions.length > 0) {\n      $scope.languages = versions[0].languages;\n    } else {\n      $scope.languages = ['en-GB', 'fi-FI', 'sv-FI'];\n    }\n  });\n\n  const saveDraft = function () {\n    Forms.PublishSaveFormVersion($scope.formID, $scope.form.SCRIPT_ID, {\n      status: 'draft',\n      comment: null,\n      languages: { \"fi-FI\": true }\n    }, function (data, status) {\n      if (data && data.error) {\n        return;\n      }\n\n      $rootScope.$emit('saved-publish-comment');\n    });\n  };\n\n  const publish = function () {\n    const publishModalInstance = $modal.open({\n      animation: true,\n      size: 'lg',\n      templateUrl: 'view/modal/publish-version-comment-modal.html',\n      controller: 'PublishVersionCommentController',\n      backdrop: 'static',\n      resolve: {\n        publishModalForm: function () {\n          return $scope.publishModalForm;\n        },\n        languages: function () {\n          return $scope.languages;\n        }\n      }\n    });\n\n    publishModalInstance.result.then(function (modal) {\n      if (modal.action === 'publish') {\n        Forms.PublishSaveFormVersion($scope.formID, $scope.form.SCRIPT_ID, {\n          comment: modal.payload.comment,\n          languages: modal.payload.languages,\n          status: 'Production'\n        }, function (data, status) {\n          if (data && data.error) {\n            return;\n          }\n\n          if (data) {\n            const odaErrorText = data.odaerror.filter(function (el) {\n              return el.severity === 'error';\n            }).reduce(function (acc, el) {\n              return el.location ? acc + ' ' + el.location[0] + ':\\n ' + el.diagnostics + '\\n\\n' : acc + ' ODA2 error:\\n ' + el.diagnostics + '\\n\\n';\n            }, '');\n            $scope.odaerror = '' + $translateVar('ODA_ERROR') + odaErrorText;\n          }\n          $rootScope.$emit('saved-publish-comment');\n        });\n      }\n    });\n  };\n\n  const previewOda = function () {\n    Forms.PreviewFormVersion($scope.formID, $scope.form.SCRIPT_ID, function (data, status) {\n      let odaErrorText = '';\n      if (data.odaerror) {\n        for (let i = 0; data.odaerror.length > i; i++) {\n          if (data.odaerror[i].location) {\n            odaErrorText += data.odaerror[i].location[0] + ':\\n' + data.odaerror[i].diagnostics + '\\n\\n';\n          } else {\n            odaErrorText += 'ODA2 warning/error:\\n' + data.odaerror[i].diagnostics + '\\n\\n';\n          }\n        }\n        $scope.odaerror = $translateVar('ODA_ERROR') + odaErrorText;\n      }\n      if (data.oda_preview_id) {\n        $window.location.href = $rootScope.oda_preview_url + $scope.formID + '?lang=' + $rootScope.previewLanguage.displayLanguage.toLowerCase();\n      }\n    }, { language: $rootScope.previewLanguage.dataLanguage });\n  };\n\n  const validate = function () {\n    Forms.ValidateFormVersion($scope.formID, $scope.form.SCRIPT_ID, function (data, status) {\n      let odaErrorText = '';\n      if (data.issues) {\n        for (let i = 0; data.issues.length > i; i++) {\n          if (data.issues[i]) {\n            odaErrorText += data.issues[i].diagnostics + '\\n\\n';\n          } else {\n            odaErrorText += 'ODA2 warning/error:\\n' + data.issues[i].diagnostics + '\\n\\n';\n          }\n        }\n        $scope.odaerror = $translateVar('ODA_ERROR') + odaErrorText;\n      } else {\n        $scope.odaerror = '';\n      }\n    }, { language: $rootScope.previewLanguage.dataLanguage });\n  };\n\n  const previewInternal = function () {\n    $location.path('/formpreview/' + $scope.formID);\n  };\n\n  $scope.selectPreviewLang = function (toLang) {\n    const previewLanguages = {\n      FI: { displayLanguage: 'FI', dataLanguage: 'fi-FI' },\n      SV: { displayLanguage: 'SV', dataLanguage: 'sv-FI' },\n      EN: { displayLanguage: 'EN', dataLanguage: 'en-GB' }\n    };\n\n    $rootScope.previewLanguage = previewLanguages[toLang] || previewLanguages.FI;\n  };\n\n  $scope.handlePreview = function (previewType) {\n    if (Forms.hasChanged($scope.form, $scope.oldForm)) {\n      toastr.error('Form modified. You must save form before previewing.');\n      return;\n    }\n\n    const types = {\n      preview: previewInternal,\n      previewOda,\n      validate\n    };\n    types[previewType]();\n  };\n\n  $scope.handlePublish = function () {\n    if (Forms.hasChanged($scope.form, $scope.oldForm)) {\n      toastr.error('Form modified. You must save form before publishing.');\n      return;\n    }\n    if ($rootScope.questionsWithIllegalDisplayRules.length > 0) {\n      toastr.error('Illegal display logic AND/OR combinations. Cannot publish.');\n      return;\n    }\n    publish();\n  };\n\n  $scope.handleSave = function () {\n    console.log('🚀 ~ file: formDetailsController.js:367 ~ Forms.editForm ~ $scope.form:', $scope.form);\n    if ($scope.formForm.$valid === false) {\n      toastr.error('Form contains errors - cannot proceed');\n      return;\n    }\n    if (Forms.hasChanged($scope.form, $scope.oldForm)) {\n      Forms.editForm($scope.form, function (data, status) {\n        if (status >= 400) {\n          toastr.error('Saving form was unsuccessful (status: ' + status + ')');\n          return;\n        }\n        $scope.oldForm = angular.copy($scope.form);\n      });\n      saveDraft();\n    } else {\n      toastr.success('Form already up-to-date - no saving.');\n    }\n  };\n\n  $scope.loading = Forms.loading;\n\n  // Check if form details were changed;\n  // if so, open confirmation modal window\n  $scope.goBack = function () {\n    if (Forms.hasChanged($scope.form, $scope.oldForm)) {\n      const modalInstance = $modal.open({\n        size: 'sm',\n        templateUrl: 'view/modal/leave-page-modal.html',\n        backdrop: 'static',\n        controller: function ($scope, $modalInstance) {\n          $scope.ok = function () {\n            $modalInstance.close();\n          };\n\n          $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n          };\n        }\n      });\n      modalInstance.result.then(function () {\n        window.history.back();\n      });\n    } else {\n      window.history.back();\n    }\n  };\n}]);","angular.module('FormListCtrl', ['angularUtils.directives.dirPagination', 'ui.bootstrap']).controller('FormListController', ['$scope', '$http', '$rootScope', '$modal', 'Forms', 'Questions', '$filter', '$translate', 'Organization', function ($scope, $http, $rootScope, $modal, Forms, Questions, $filter, $translate, Organization) {\n  $scope.currentPage = 1;\n  $scope.formPageSize = 50;\n  $scope.displayForms = Forms.getDisplayStatus;\n  let organizationsLoaded = false;\n\n  // Used in sorting table contents according to selected column\n  $scope.sortForms = {\n    column: 'NAME',\n    descending: false\n  };\n  $scope.readonlymode = true;\n  if ($rootScope.loggedUser) {\n    if ($rootScope.loggedUser.rightlevel == 2 || $rootScope.loggedUser.rightlevel == 3) {\n      $scope.readonlymode = false;\n    }\n  }\n  $scope.forms = Forms.getForms;\n\n  $scope.loading = Forms.loading;\n\n  Forms.loadForms(function (data, status) {\n    Organization.loadFormOrganizations(function (data2, status2) {\n      $scope.formsOrganizations = data2;\n      organizationsLoaded = true;\n    });\n  });\n\n  // This is used in forms list-view\n  $scope.printOrganizations = function (form) {\n    if (organizationsLoaded == true) {\n      form.ORGANIZATIONS = '';\n      for (let i = 0; $scope.formsOrganizations.length > i; i++) {\n        if (form.ID == $scope.formsOrganizations[i].FORM_ID) {\n          if (form.ORGANIZATIONS.length > 0) {\n            form.ORGANIZATIONS += ', ';\n          }\n          form.ORGANIZATIONS += $scope.formsOrganizations[i].NAME;\n        }\n      }\n      form.readonlydelete = true;\n      if ($rootScope.loggedUser.rightlevel == 2) {\n        if (form.ORGANIZATIONS.indexOf($rootScope.loggedUser.organizationName) != -1) {\n          form.readonlydelete = false;\n        }\n      }\n      if ($rootScope.loggedUser.rightlevel == 3) {\n        form.readonlydelete = false;\n      }\n      return form.ORGANIZATIONS;\n    }\n  };\n\n  const $translateVar = $filter('translate');\n\n  // Changes tab from Forms to toView\n  $scope.switchView = function (toView) {\n    switch (toView) {\n      case 'questions':\n        Forms.setStatus('hide');\n        Questions.setStatus('show');\n        break;\n    }\n  };\n\n  // Sets table sort according to COLUMN\n  // Also toggles between ascending and descending\n  $scope.changeSorting = function (column) {\n    if ($scope.sortForms.column == column) {\n      $scope.sortForms.descending = !$scope.sortForms.descending;\n    } else {\n      $scope.sortForms.column = column;\n      $scope.sortForms.descending = false;\n    }\n  };\n\n  // Returns icon that indicates ascending/descending sorting\n  $scope.getIcon = function (column) {\n    if ($scope.sortForms.column == column) {\n      if ($scope.sortForms.descending) {\n        return 'glyphicon-triangle-bottom';\n      }\n      return 'glyphicon-triangle-top';\n    }\n  };\n\n  // Deletes form by setting its deleted value to 1\n  $scope.deleteForm = function (formID) {\n    const form = $scope.forms.find(function (f) {\n      return f.ID === formID;\n    });\n\n    const modalInstance = $modal.open({\n      size: 'lg',\n      templateUrl: 'view/modal/deleteConfirmationModal.html',\n      backdrop: 'static',\n      controller: 'DeleteConfirmationModalController',\n      resolve: {\n        confirmationMessage() {\n          return $translateVar('FORM_DELETE_CONFIRM') + ' \"' + form.NAME + '\"?';\n        }\n      }\n    });\n\n    // User presses Save button\n    modalInstance.result.then(function () {\n      Forms.deleteForm(formID, function (data, status) {\n        Forms.loadForms();\n      });\n    });\n  };\n}]);","// Used as a controller in previewing form\n\nangular.module('FormPreviewCtrl', ['ui.bootstrap']).controller('FormPreviewController', ['$scope', '$q', '$stateParams', '$location', 'Forms', 'Questions', '$filter', '$translate', 'Ebmeds', '$rootScope', function ($scope, $q, $stateParams, $location, Forms, Questions, $filter, $translate, Ebmeds, $rootScope) {\n  // Helper function to convert value to lowercase string.\n  // Function is needed for display logic: compare freetext input display rules. Case insensitive compare.\n  function lowerCaseString(value) {\n    if (typeof value === 'string') {\n      const returnValue = value.toLowerCase();\n      return returnValue;\n    }\n\n    return value;\n  }\n\n  // do not display preview unless it is completed.\n  $scope.PreviewLoaded = false;\n\n  $scope.useLiveMode = true;\n  // Set starting day to monday\n  $scope.calendarOptions = {\n    'starting-day': '1'\n  };\n  $scope.opened = [];\n  // Toggles the pop-up date picker for selecting start date.\n  $scope.openStartDateCalendar = function ($event, indexvalue) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    $scope.opened[indexvalue] = true;\n  };\n\n  // get form id from url.\n  $scope.formID = $stateParams.formid;\n\n  // get translations.\n  $scope.restoreLanguage = $translate.use();\n  $scope.previewLanguage = $rootScope.previewLanguage || {\n    displayLanguage: 'FI',\n    dataLanguage: 'fi-FI'\n  };\n\n  $translate.use($scope.previewLanguage.displayLanguage);\n  const $translateVar = $filter('translate');\n\n  $scope.$on('$destroy', function () {\n    $translate.use($scope.restoreLanguage);\n  });\n\n  // open form details.\n  $scope.detailsForm = function (formID) {\n    $location.path('/form/' + $scope.formID).replace();\n  };\n\n  // load form details.\n  $scope.form = {};\n  Forms.loadFormByID($scope.formID, function (data, status) {\n    $scope.form = data;\n    if ($scope.form.INTRODUCTION) {\n      $scope.form.INTRODUCTION = $scope.form.INTRODUCTION.replace(/<a href=/g, '<a target=\"_blank\" href=');\n    } else {\n      $scope.form.INTRODUCTION = $translateVar('NOT_FOUND_INTRODUCTION');\n    }\n  }, { language: $scope.previewLanguage.dataLanguage });\n\n  // load form question details.\n  $scope.questions = [];\n  Forms.loadQuestionsInForm($scope.formID, function (data, status) {\n    $scope.questions = data;\n    $scope.questions.forEach(function (question) {\n      if (question.QUESTIONTEXT) {\n        question.QUESTIONTEXT = question.QUESTIONTEXT.replace('<a href=', '<a target=\"_blank\" href=');\n      } else if (question.TYPE !== 'SUBTITLE') {\n        question.QUESTIONTEXT = $translateVar('NOT_FOUND_QUESTION_TEXT');\n      }\n    });\n    // setting up status options.\n    $scope.statuses = [{ statusName: $translateVar('DRAFT'), statusValue: 'Draft' }, {\n      statusName: $translateVar('VALIDATION_PENDING'),\n      statusValue: 'Validation Pending'\n    }, {\n      statusName: $translateVar('PRODUCTION'),\n      statusValue: 'Production'\n    }, { statusName: $translateVar('DISCARDED'), statusValue: 'Discarded' }];\n    // Fetch answers for questions\n    $scope.questions.forEach(function (question) {\n      if (question.TYPE == 'CHECK' || question.TYPE == 'SELECT' || question.TYPE == 'NUMBER') {\n        Questions.loadAnswers(question.ID, function (data, status) {\n          question.ANSWERS = data;\n          question.FORMANSWER = '';\n          $scope.questions.forEach(function (questionAnswer) {\n            if (questionAnswer.ANSWERS) {\n              questionAnswer.ANSWERS.forEach(function (answer, index) {\n                if (!answer.ANSWER_TEXT) {\n                  answer.ANSWER_TEXT = $translateVar('NOT_FOUND_ANSWER_TEXT');\n                }\n                answer.FORMANSWER = '';\n\n                var choiceQuestion = questionAnswer.TYPE == 'CHECK' || questionAnswer.TYPE == 'SELECT';\n                var hasNoneOfTheAboveChoice = questionAnswer.NONE_ANSWER == 'Y';\n                var isTheLastChoice = index == questionAnswer.ANSWERS.length - 1;;\n                var isMissingNoneOfTheAbove = questionAnswer.ANSWERS.filter(function (a) {\n                  return a.ID === -1;\n                }).length === 0;\n                if (choiceQuestion && hasNoneOfTheAboveChoice && isTheLastChoice && isMissingNoneOfTheAbove) {\n                  questionAnswer.ANSWERS.push({\n                    ANSWER_TEXT: $translateVar('NONE_OF_THE_ABOVE'),\n                    ID: -1\n                  });\n                }\n              });\n            }\n          });\n        }, { language: $scope.previewLanguage.dataLanguage });\n      } else {\n        question.ANSWERS = [];\n        question.FORMANSWER = '';\n      }\n    });\n\n    // Fetch display rules for questions\n    // Must be 'EN' to use correct display logics\n    Questions.loadDisplayRulesAll($scope.formID, 'EN', function (data, status) {\n      $scope.questions.forEach(function (question) {\n        question.NUMBEROFDISPLAYRULES = 0;\n        question.DISPLAYRULES = [];\n        for (let i = 0; data.length > i; i++) {\n          if (question.ID == data[i].QUESTION_ID) {\n            question.DISPLAYRULES.push(data[i]);\n            question.NUMBEROFDISPLAYRULES++;\n          }\n        }\n      });\n    });\n  }, { language: $scope.previewLanguage.dataLanguage });\n\n  // Apply display rules to webform\n  let containcheck = '';\n  let hideit = '';\n  let orShow = false;\n  $scope.$watch('questions', function (newValue) {\n    hideit = '';\n    $scope.questions.forEach(function (question) {\n      hideit = '';\n      orShow = false;\n      if (question.DISPLAYRULES) {\n        question.DISPLAYRULES.forEach(function (rule, index) {\n          if (index === 0 && question.DISPLAYRULES.length > 1) {\n            rule.OPERATOR = question.DISPLAYRULES[1].OPERATOR;\n          }\n          $scope.questions.forEach(function (questionrule) {\n            if (rule.TYPE === 'CHECK' || rule.TYPE === 'SELECT') {\n              rule.VALUE = rule.ANSWER_ID;\n            }\n            if (questionrule.FORMANSWER == null) {\n              questionrule.FORMANSWER = '';\n            }\n            if (parseInt(rule.ANSWER_QUESTION_ID, 10) === parseInt(questionrule.ID, 10)) {\n              containcheck = '';\n              if (rule.LOGIC === 'contains' || rule.TYPE === 'CHECK') {\n                containcheck = false;\n                if (lowerCaseString(questionrule.FORMANSWER).indexOf(lowerCaseString(rule.VALUE)) > -1) {\n                  containcheck = true;\n                }\n              }\n              if (rule.LOGIC === 'starts with') {\n                containcheck = lowerCaseString(questionrule.FORMANSWER).indexOf(lowerCaseString(rule.VALUE)) === 0;\n              }\n              if (rule.TYPE === 'SELECT') {\n                questionrule.FORMANSWER = parseInt(questionrule.FORMANSWER, 10);\n              }\n              if ((lowerCaseString(questionrule.FORMANSWER) === lowerCaseString(rule.VALUE) && (rule.LOGIC === 'equals' || rule.TYPE === 'YESNO' || rule.TYPE === 'SELECT') || Number(questionrule.FORMANSWER) > Number(rule.VALUE) && rule.LOGIC === 'greater than' || questionrule.FORMANSWER !== '' && Number(questionrule.FORMANSWER) < Number(rule.VALUE) && rule.LOGIC === 'less than' || containcheck === true) && questionrule.FORMHIDE !== true) {\n                if (rule.OPERATOR) {\n                  if (rule.OPERATOR === 'OR') {\n                    orShow = true;\n                    question.FORMHIDE = false;\n                  }\n                }\n                if (question.FORMHIDE) {\n                  if (hideit !== true) {\n                    question.FORMHIDE = false;\n                  }\n                } else {\n                  question.FORMHIDE = false;\n                }\n              } else {\n                question.FORMHIDE = true;\n                hideit = true;\n                if (orShow === true) {\n                  hideit = false;\n                  question.FORMHIDE = false;\n                }\n              }\n            }\n          });\n        });\n      }\n    });\n    // do not display preview unless it is completed.\n    $scope.PreviewLoaded = true;\n  }, true);\n\n  // handle clicking of checkboxes\n  $scope.CheckClick = function (question, answer) {\n    let noneChecked = true;\n    for (let i = 0; $scope.questions.length > i; i++) {\n      if ($scope.questions[i].ID == question.ID) {\n        if ($scope.questions[i].FORMANSWER.indexOf(';' + answer.ID + ';') > -1) {\n          $scope.questions[i].FORMANSWER = $scope.questions[i].FORMANSWER.replace(';' + answer.ID + ';', '');\n          if (answer.ID == -1) {\n            for (var j = 0; $scope.questions[i].ANSWERS.length > j; j++) {\n              $scope.questions[i].ANSWERS[j].READONLY = false;\n            }\n          }\n          for (var j = 0; $scope.questions[i].ANSWERS.length > j; j++) {\n            if ($scope.questions[i].ANSWERS[j].FORMANSWER == true) {\n              noneChecked = false;\n            }\n          }\n          if (noneChecked == true) {\n            for (var j = 0; $scope.questions[i].ANSWERS.length > j; j++) {\n              if ($scope.questions[i].ANSWERS[j].ID == -1) {\n                $scope.questions[i].ANSWERS[j].FORMANSWER = true;\n                $scope.questions[i].FORMANSWER = ';' + $scope.questions[i].ANSWERS[j].ID + ';';\n              }\n            }\n          }\n        } else if (answer.ID == -1) {\n          for (var j = 0; $scope.questions[i].ANSWERS.length > j; j++) {\n            if ($scope.questions[i].ANSWERS[j].ID != -1) {\n              $scope.questions[i].ANSWERS[j].FORMANSWER = false;\n              $scope.questions[i].ANSWERS[j].READONLY = false;\n            }\n          }\n          $scope.questions[i].FORMANSWER = ';' + answer.ID + ';';\n        } else {\n          $scope.questions[i].FORMANSWER += ';' + answer.ID + ';';\n          for (var j = 0; $scope.questions[i].ANSWERS.length > j; j++) {\n            if ($scope.questions[i].ANSWERS[j].ID == -1) {\n              $scope.questions[i].ANSWERS[j].FORMANSWER = false;\n              $scope.questions[i].FORMANSWER = $scope.questions[i].FORMANSWER.replace(';' + $scope.questions[i].ANSWERS[j].ID + ';', '');\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Common units\n   *\n   * @see FormPreviewCtrl\n   * @see NewQuestionModalController\n   * @see QuestionDetailsCtrl\n   * @see api/common/fhir.js\n   */\n  $scope.Units = [{ value: 1, text: 'kg' }, { value: 2, text: 'cm' }, { value: 3, text: 'mg' }, { value: 4, text: 'C' }, { value: 5, text: $translateVar('UNITS') }, { value: 6, text: $translateVar('YEAR') }, { value: 7, text: $translateVar('DAY') }, { value: 8, text: 'mmHg' }, { value: 9, text: 'h' }, { value: 10, text: 'mmol/l' }];\n\n  // handle sending preview form data to ebmeds engine.\n  $scope.sendtoEBMEDS = function (form, questions) {\n    $scope.feedbackFromEBMeDSResponse = '';\n    $scope.nofeedback = false;\n    $scope.showrequest = false;\n    $scope.showresponse = false;\n    form.useLiveMode = $scope.useLiveMode;\n\n    for (let i = 0; questions.length > i; i++) {\n      if (questions[i].TYPE == 'SELECT') {\n        for (let j = 0; questions[i].ANSWERS.length > j; j++) {\n          if (questions[i].FORMANSWER == questions[i].ANSWERS[j].ID) {\n            questions[i].FORMANSWER = questions[i].ANSWERS[j].ID.toString();\n            if (questions[i].ANSWERS[j].ANSWER_VALUE) {\n              questions[i].ANSWER_VALUE = questions[i].ANSWERS[j].ANSWER_VALUE.toString();\n            } else {\n              questions[i].ANSWER_VALUE = '';\n            }\n            j = questions[i].ANSWERS.length;\n          }\n        }\n      }\n      if (questions[i].TYPE == 'NUMBER' && questions[i].ANSWERS[0]) {\n        const unit = $scope.Units.find(function (u) {\n          return u.value === questions[i].ANSWERS[0].UNIT_ID;\n        });\n        if (unit) {\n          questions[i].ANSWERS[0].UNIT_ID = unit.text;\n        }\n      }\n    }\n\n    const parseQuestionnaires = function (questionnnaires) {\n      if (!questionnnaires) {\n        return [];\n      }\n\n      return questionnnaires.reduce(function (arr, q) {\n        q.recommendations.forEach(function (r) {\n          arr.push({ status: r.status, text: r.texts.patient || r.texts.practitioner });\n        });\n        return arr;\n      }, []);\n    };\n\n    $scope.formatRecommendation = function (recommendation) {\n      return recommendation.text + ' (Status: ' + recommendation.status + ')';\n    };\n\n    form.language = $scope.previewLanguage.dataLanguage;\n    form.questions = questions;\n    Ebmeds.callEBMeDS(form, function (data) {\n      $scope.viewFeedback = parseQuestionnaires(data.responseBody.questionnaire);\n      $scope.nofeedback = $scope.viewFeedback.length === 0;\n      $scope.feedbackFromEBMeDSResponse = JSON.stringify(data.responseBody, undefined, 2);\n      $scope.feedbackFromEBMeDSRequest = JSON.stringify(data.requestBody, undefined, 2);\n      $scope.showresponse = true;\n      $scope.showrequest = true;\n\n      finalize();\n    });\n\n    const finalize = function () {\n      for (let i = 0; questions.length > i; i++) {\n        if (questions[i].TYPE == 'SELECT') {\n          for (let j = 0; questions[i].ANSWERS.length > j; j++) {\n            if (questions[i].FORMANSWER == questions[i].ANSWERS[j].ID) {\n              questions[i].FORMANSWER = questions[i].ANSWERS[j].ID;\n              questions[i].ANSWER_VALUE = questions[i].ANSWERS[j].ANSWER_VALUE;\n              j = questions[i].ANSWERS.length;\n            }\n          }\n        }\n      }\n      document.getElementById('focusButton').scrollIntoView();\n      $('html, body').animate({ scrollTop: $('#focusButton').offset().top }, 500);\n    };\n  };\n}]);","angular.module('FormQuestionsCtrl', ['angularUtils.directives.dirPagination', 'ui.bootstrap']).controller('FormQuestionsController', ['$rootScope', '$scope', '$stateParams', 'Forms', '$modal', 'Questions', '$http', 'toastr', '$filter', '$translate', 'Organization', function ($rootScope, $scope, $stateParams, Forms, $modal, Questions, $http, toastr, $filter, $translate, Organization) {\n  const formID = $stateParams.formid;\n  const $translateVar = $filter('translate');\n  $scope.questions = [];\n  $scope.groupQuestions = [];\n  $scope.disabled = false;\n  $scope.disabled2 = true;\n  $scope.loading = Forms.loading;\n  $scope.selectedQuestion = { ID: undefined };\n  $scope.readonlymode = true;\n  $scope.showSortControls = false;\n\n  $rootScope.questionsWithIllegalDisplayRules = [];\n\n  if ($rootScope.loggedUser) {\n    if ($rootScope.loggedUser.rightlevel == 3) {\n      $scope.readonlymode = false;\n    }\n  }\n  if ($translate.use() == 'FI') {\n    $scope.questionTypes = Questions.getQuestionTypes;\n  }\n  if ($translate.use() == 'EN') {\n    $scope.questionTypes = Questions.getQuestionTypesEN;\n  }\n\n  const checkForIllegalDisplayRules = function (question) {\n    const existing = $rootScope.questionsWithIllegalDisplayRules.findIndex(function (q) {\n      return q.ID === question.ID;\n    });\n\n    if (existing >= 0) {\n      $rootScope.questionsWithIllegalDisplayRules.splice(existing, 1);\n    }\n\n    if (question.DISPLAYRULES.length <= 1) {\n      return undefined; // no combinator operators for a single rule\n    }\n\n    const operator = question.DISPLAYRULES[1].OPERATOR;\n\n    if (question.DISPLAYRULES.slice(1).some(function (displayRule) {\n      return displayRule.OPERATOR !== operator;\n    })) {\n      $rootScope.questionsWithIllegalDisplayRules.push(question);\n    }\n  };\n\n  const loadQuestions = function () {\n    $rootScope.questionsWithIllegalDisplayRules = [];\n\n    Forms.loadQuestionsInForm(formID, function (data, status) {\n      $scope.questions = data;\n      $scope.groupQuestions = data.filter(function (q) {\n        return q.TYPE === 'SUBTITLE';\n      });\n\n      Organization.loadFormOrganizations(function (data2, status2) {\n        $scope.organizationList = '';\n        $scope.ORGANIZATIONS = (data2 || []).filter(function (o) {\n          return o.FORM_ID === formID;\n        });\n        $scope.organizationList = $scope.ORGANIZATIONS.map(function (o) {\n          return o.NAME;\n        }).join(', ');\n\n        if ($rootScope.loggedUser.rightlevel === 2 && $scope.ORGANIZATIONS.find(function (o) {\n          return o.ORG_ID === $rootScope.loggedUser.organization;\n        })) {\n          $scope.readonlymode = false;\n        }\n      });\n\n      Questions.loadDisplayRulesAll(formID, $translate.use(), function (data, status) {\n        $scope.questions.forEach(function (question) {\n          question.DISPLAYRULES = (data || []).filter(function (logic) {\n            return logic.QUESTION_ID === question.ID;\n          });\n\n          checkForIllegalDisplayRules(question);\n        });\n      });\n\n      // Fetch answers and display logics for questions\n      $scope.questions.forEach(function (question) {\n        if (question.TYPE == 'CHECK' || question.TYPE == 'SELECT' || question.TYPE == 'NUMBER') {\n          Questions.loadAnswers(question.ID, function (data, status) {\n            question.ANSWERS = data;\n            setNONE();\n          });\n        } else {\n          question.ANSWERS = [];\n        }\n        function setNONE() {\n          if (question.NONE_ANSWER == 'Y' && (question.TYPE == 'SELECT' || question.TYPE == 'CHECK')) {\n            question.ANSWERS.push({\n              ID: -1,\n              ANSWER_TEXT: $translateVar('NONE_OF_THE_ABOVE')\n            });\n          }\n        }\n      });\n    });\n  };\n\n  loadQuestions();\n\n  $scope.setOptional = function (question) {\n    question.FORM_ID = formID;\n    question.OPTIONAL = question.OPTIONAL === '1' ? '0' : '1';\n    Forms.setLinkedQuestionOptions(question);\n  };\n\n  $scope.setReadOnly = function (question) {\n    question.FORM_ID = formID;\n    question.READ_ONLY = question.READ_ONLY === '1' ? '0' : '1';\n    Forms.setLinkedQuestionOptions(question);\n  };\n\n  $scope.expandAll = function () {\n    for (let i = 0; i < $scope.questions.length; i++) {\n      $scope.questions[i].expanded = true;\n    }\n  };\n\n  $scope.collapseAll = function () {\n    for (let i = 0; i < $scope.questions.length; i++) {\n      $scope.questions[i].expanded = false;\n    }\n  };\n\n  $scope.showQuestionAndDisplayLogic = function (question) {\n    question.expanded = !question.expanded;\n  };\n\n  $scope.toggleSortControl = function () {\n    $scope.showSortControls = !$scope.showSortControls;\n  };\n\n  const swapQuestions = function (a, b) {\n    const questions = [$scope.questions[a], $scope.questions[b]];\n\n    Forms.swapQuestionPositionsInForm(formID, questions[0].ID, questions[1].ID, function () {\n      const positions = [questions[0].POSITION, questions[1].POSITION];\n\n      questions[0].POSITION = positions[1];\n      questions[1].POSITION = positions[0];\n\n      $scope.questions[a] = questions[1];\n      $scope.questions[b] = questions[0];\n    });\n  };\n\n  $scope.setQuestionGroup = function (question) {\n    Forms.setQuestionGroup(formID, question.ID, question.GROUP_QUESTION || null, function () {});\n  };\n\n  $scope.getQuestionGroupName = function (question) {\n    const group = question.GROUP_QUESTION ? $scope.groupQuestions.find(function (q) {\n      return q.ID === question.GROUP_QUESTION;\n    }) : undefined;\n\n    return group ? group.NAME : undefined;\n  };\n\n  // Moves the question up on the list\n  $scope.moveQuestionUp = function (index) {\n    swapQuestions(index - 1, index);\n  };\n\n  // Moves the question down on the list\n  $scope.moveQuestionDown = function (index) {\n    swapQuestions(index, index + 1);\n  };\n\n  // Opens a modal to link an existing question to form\n  $scope.openLinkQuestionModal = function () {\n    const modalInstance = $modal.open({\n      size: 'lg',\n      templateUrl: 'view/modal/linkQuestionModal.html',\n      backdrop: 'static',\n      controller: 'LinkQuestionModalController'\n    });\n\n    // User presses Save button\n    modalInstance.result.then(function (questionID) {\n      if (questionID == 'NEW_QUESTION_ADDED') {\n        loadQuestions();\n      } else {\n        // use $scope.questions.length + 1 as the next position so the new question will be on the last position on the form\n        Forms.linkQuestionToForm(formID, questionID, $scope.questions.length + 1, function (data, status) {\n          if (status < 400) {\n            loadQuestions();\n          }\n        });\n      }\n    });\n  };\n\n  // Opens a modal to link a new question to form\n  $scope.openNewQuestionModal = function () {\n    const modalInstance = $modal.open({\n      size: 'lg',\n      templateUrl: 'view/modal/newQuestionModal.html',\n      backdrop: 'static',\n      controller: 'NewQuestionModalController'\n    });\n\n    // User presses Save button\n    modalInstance.result.then(function (questionID) {\n      // use $scope.questions.length + 1 as the next position so the new question will be on the last position on the form\n      Forms.linkQuestionToForm(formID, questionID, $scope.questions.length + 1, function (data, status) {\n        if (status < 400) {\n          loadQuestions();\n        }\n      });\n    });\n  };\n\n  // Opens a modal to modify display logic for form.\n  $scope.modifyQuestionDisplayLogic = function (question) {\n    $rootScope.selectedLogicQuestion = question;\n    const modalInstance = $modal.open({\n      size: 'lg',\n      templateUrl: 'view/modal/modifyQuestionDisplayLogicModal.html',\n      backdrop: 'static',\n      controller: 'ModifyQuestionDisplayLogicModalController'\n    });\n\n    // User presses Save button\n    modalInstance.result.then(function (questionID) {\n      Questions.loadDisplayRules(formID, questionID, $translate.use(), function (data, status) {\n        question.DISPLAYRULES = data;\n        toastr.success('N\\xE4ytt\\xF6logiikka lis\\xE4tty kysymykselle ID: ' + questionID);\n        checkForIllegalDisplayRules(question);\n      });\n    });\n  };\n\n  // Opens a modal to confirm question removal and removes question when user clicks ok\n  $scope.removeQuestion = function (question) {\n    const modalInstance = $modal.open({\n      size: 'lg',\n      templateUrl: 'view/modal/deleteConfirmationModal.html',\n      backdrop: 'static',\n      controller: 'DeleteConfirmationModalController',\n      resolve: {\n        confirmationMessage() {\n          return $translateVar('FORM_QUESTION_REMOVE_CONFIRM_1') + ' ' + question.NAME + ' ' + $translateVar('FORM_QUESTION_REMOVE_CONFIRM_2');\n        }\n      }\n    });\n\n    // User presses Save button\n    modalInstance.result.then(function () {\n      Forms.removeLinkQuestionToForm(formID, question.ID, function (data, status) {\n        loadQuestions();\n        $scope.selectedQuestion = { ID: undefined };\n      });\n    });\n  };\n\n  $scope.saveDisplayRuleOperator = function (operator, operatorid, question) {\n    const operatorinfo = {};\n    operatorinfo.OPERATOR = operator;\n    Questions.saveDisplayRuleOperator(operatorinfo, operatorid, function (data, status) {\n      toastr.success('Näyttölogiikan operaattori tallennettu');\n      checkForIllegalDisplayRules(question);\n    });\n  };\n\n  // Set starting day to monday\n  $scope.calendarOptions = {\n    'starting-day': '1'\n  };\n  // Toggles the pop-up date picker for selecting start date.\n  $scope.openStartDateCalendar = function ($event) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    $scope.calendar1Open = !$scope.calendar1Open;\n  };\n\n  $scope.hasInvalidLogics = function (question) {\n    return (question.DISPLAYRULES || []).some(function (logic) {\n      return logic.invalid;\n    });\n  };\n\n  $scope.hasIllegalDisplayRules = function (question) {\n    return $rootScope.questionsWithIllegalDisplayRules.some(function (q) {\n      return q.ID === question.ID;\n    });\n  };\n\n  // Opens a modal to confirm question display logic removal and removes logic when user clicks ok\n  $scope.deleteRule = function (logicId, question) {\n    const modalInstance = $modal.open({\n      size: 'lg',\n      templateUrl: 'view/modal/deleteConfirmationModal.html',\n      backdrop: 'static',\n      controller: 'DeleteConfirmationModalController',\n      resolve: {\n        confirmationMessage() {\n          return $translateVar('DISPLAY_LOGIC_REMOVE_CONFIRM');\n        }\n      }\n    });\n    // User presses Save button\n    modalInstance.result.then(function () {\n      Questions.removeDisplayLogic(logicId, function (status) {\n        if (status < 400) {\n          question.DISPLAYRULES = question.DISPLAYRULES.filter(function (l) {\n            return l.ID !== logicId;\n          });\n          toastr.success('Näyttölogiikka poistettu');\n        }\n      });\n    });\n  };\n}]);","angular.module('HeaderCtrl', ['angularUtils.directives.dirPagination', 'ui.bootstrap']).controller('HeaderController', ['$scope', '$state', '$http', '$rootScope', '$translate', 'Organization', function ($scope, $state, $http, $rootScope, $translate, Organization) {\n  $scope.$state = $state;\n\n  if ($rootScope.loggedUser) {\n    $scope.username = $rootScope.loggedUser.fullname;\n\n    if ($rootScope.loggedUser.organizationName == null) {\n      Organization.loadOrganizations(function (data, status) {\n        $rootScope.organizations = data;\n        for (let i = 0; data.length > i; i++) {\n          if (data[i].ID == $rootScope.loggedUser.organization) {\n            $rootScope.loggedUser.organizationName = data[i].NAME;\n            $scope.userorganization = $rootScope.loggedUser.organizationName;\n          }\n        }\n      });\n    } else {\n      $scope.userorganization = $rootScope.loggedUser.organizationName;\n    }\n  }\n\n  $scope.isLoggedIn = $rootScope.loggedIn;\n\n  $scope.getCurrentLang = function () {\n    return $translate.use();\n  };\n\n  // Changes site language\n  $scope.selectLang = function (toLang) {\n    $translate.use(toLang);\n    $rootScope.selectedLanguage = toLang;\n  };\n\n  $scope.logout = function () {\n    $http.get($rootScope.api_prefix + 'logout').success(function () {\n      $state.go('login');\n    }).error(function () {});\n  };\n\n  $scope.authAddress = $rootScope.api_prefix + 'auth';\n  $scope.logoutLink = $rootScope.logout_page;\n}]);","/* Used with login-view.html to try and log user in\n* from Login state\n*/\n\nangular.module('LoginCtrl', ['ui.router', 'ui.bootstrap']).controller('LoginController', ['$scope', '$http', '$state', '$stateParams', '$rootScope', '$location', '$window', function ($scope, $http, $state, $stateParams, $rootScope, $location, $window) {\n  $scope.errorMessage = ''; // Message to user if login fails\n  $scope.showError = false;\n\n  $scope.login = function () {\n    $scope.errorMessage = '';\n    $scope.showError = false;\n\n    const user = {\n      username: $scope.username,\n      password: $scope.password\n    };\n\n    $http.post($rootScope.api_prefix + 'login', user).success(function (data) {\n      // Logged user in\n      $rootScope.loggedIn = true;\n      $rootScope.loggedUser = data;\n      $state.go('secured.main');\n    }).error(function (data) {\n      // Show error msg since login failed\n      $scope.errorMessage = 'Login failed!';\n      $scope.showError = true;\n      $rootScope.loggedUser = null;\n    });\n  };\n  $scope.feedback = [];\n  // Adding all querystring values as variables to the controller.\n  function FromQueryStringToScope(value) {\n    if ($location.search().hasOwnProperty(value)) {\n      $scope.feedback[value] = $location.search()[value];\n    }\n  }\n  FromQueryStringToScope('fail');\n\n  // If login failed. Do this.\n  if ($scope.feedback.fail) {\n    $scope.showFailMessage = true;\n  } else {\n    $scope.showFailMessage = false;\n  }\n\n  $scope.authAddress = $rootScope.api_prefix + 'auth';\n  $scope.userinfoLink = $rootScope.userinfo_page;\n\n  $scope.openUserinfolink = function () {\n    $window.open($scope.userinfoLink);\n  };\n}]);","angular.module('QuestionDetailsCtrl', ['angularUtils.directives.dirPagination', 'ui.bootstrap']).controller('QuestionDetailsController', ['$scope', '$rootScope', '$stateParams', '$timeout', '$state', 'Questions', '$filter', '$translate', '$modal', '$window', 'Organization', function ($scope, $rootScope, $stateParams, $timeout, $state, Questions, $filter, $translate, $modal, $window, Organization) {\n  const confirmModal = function (title, forms) {\n    return $modal.open({\n      size: 'md',\n      templateUrl: 'view/modal/confirm-edit-question.html',\n      controller: function ($scope, $modalInstance) {\n        $scope.title = title;\n        $scope.forms = forms;\n        $scope.ok = $modalInstance.close;\n        $scope.cancel = $modalInstance.dismiss;\n      }\n    }).result;\n  };\n\n  const $translateVar = $filter('translate');\n\n  const confirmEdit = function () {\n    if ($scope.forms.length === 0) {\n      return new Promise(function (resolve) {\n        resolve();\n      });\n    }\n    const forms = $scope.forms;\n    const title = $translateVar('EDIT_QUESTION');\n    return confirmModal(title, forms);\n  };\n\n  // Set starting day to monday\n  $scope.calendarOptions = {\n    'starting-day': '1'\n  };\n  // Toggles the pop-up date picker for selecting start date.\n  $scope.openStartDateCalendar = function ($event) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    $scope.calendar1Open = !$scope.calendar1Open;\n  };\n  $scope.isLoading = Questions.questionsLoading;\n  $scope.questionID = $stateParams.questionid;\n  $scope.answers = [];\n  let savedOrganizations = [];\n  $scope.disabledID = true;\n  $scope.disabled = false;\n  $scope.disabledApproval = true;\n  $scope.questionInfo = {\n    ID: $scope.questionID\n  };\n  $scope.oldQuestionInfo = {};\n  // Array for question answer choices\n  $scope.placeholderText = $translateVar('TYPE_ANSWER_TEXT');\n  $scope.readonlymode = true;\n  $scope.selectedRow = { value: '' };\n  // Array of question types, used with radio buttons on form\n  if ($translate.use() === 'FI') {\n    $scope.questionTypes = Questions.getQuestionTypes;\n  }\n  if ($translate.use() === 'EN') {\n    $scope.questionTypes = Questions.getQuestionTypesEN;\n  }\n  // Tooltip texts\n  $scope.tooltipMoveUp = $translateVar('MOVE_QUESTION_UP');\n  $scope.tooltipMoveDown = $translateVar('MOVE_QUESTION_DOWN');\n\n  /**\n   * Common units\n   *\n   * @see FormPreviewCtrl\n   * @see NewQuestionModalController\n   * @see QuestionDetailsCtrl\n   * @see api/common/fhir.js\n   */\n  $scope.Units = [{ value: 1, text: 'kg' }, { value: 2, text: 'cm' }, { value: 3, text: 'mg' }, { value: 4, text: 'C' }, { value: 5, text: $translateVar('UNITS') }, { value: 6, text: $translateVar('YEAR') }, { value: 7, text: $translateVar('DAY') }, { value: 8, text: 'mmHg' }, { value: 9, text: 'h' }, { value: 10, text: 'mmol/l' }];\n\n  $scope.codeSystems = [];\n  $scope.systemCodes = {};\n  Questions.loadCodeSystems(function (data) {\n    $scope.codeSystems = data.items;\n\n    data.items.forEach(function (system) {\n      Questions.loadSystemCodes(system.ID, function (data) {\n        $scope.systemCodes[system.ID] = data;\n      });\n    });\n  });\n\n  // Initialize question and answer information\n  Questions.loadQuestion($scope.questionID, function (status) {\n    if (status < 400) {\n      $scope.questionInfo = Questions.getQuestion;\n      Questions.loadLinkedForms($scope.questionInfo.ID, function (data) {\n        $scope.forms = data;\n        Organization.loadQuestionOrganizations(function (data2) {\n          $scope.organizationList = '';\n          $scope.questionInfo.ORGANIZATIONS = [];\n          for (let i = 0; data2.length > i; i++) {\n            if (data2[i].QUESTION_ID == $scope.questionID) {\n              $scope.questionInfo.ORGANIZATIONS.push(data2[i]);\n              if ($scope.organizationList.length > 0) {\n                $scope.organizationList += ', ';\n              }\n              $scope.organizationList += data2[i].NAME;\n              if ($rootScope.loggedUser.organization == data2[i].ORG_ID && $rootScope.loggedUser.rightlevel == 2) {\n                $scope.readonlymode = false;\n              }\n            }\n          }\n          savedOrganizations = $scope.questionInfo.ORGANIZATIONS;\n          if ($rootScope.loggedUser) {\n            if ($rootScope.loggedUser.rightlevel == 3) {\n              $scope.readonlymode = false;\n            }\n          }\n        });\n      });\n      $scope.oldQuestionInfo = angular.copy($scope.questionInfo);\n      $scope.detailsPageTitle = $translateVar('QUESTION_TITLE_1') + ' \"' + $scope.questionInfo.NAME + '\" ' + $translateVar('QUESTION_TITLE_2');\n\n      Questions.loadAnswers($scope.questionID, function (data, status) {\n        if (status < 400) {\n          $scope.answers = Questions.getAnswers;\n        }\n      });\n    }\n  });\n\n  const typeChanged = function () {\n    return $scope.questionInfo.TYPE !== $scope.oldQuestionInfo.TYPE;\n  };\n\n  $scope.saveQuestion = function () {\n    const save = function () {\n      $scope.questionInfo.ID = $scope.questionID;\n\n      // Save the question in DB\n      Questions.updateQuestion($scope.questionInfo, $scope.answers, function (status) {\n        if (status < 400) {\n          // Delete old answer settings if type changed\n          if (typeChanged()) {\n            $scope.answers.forEach(function (value) {\n              Questions.deleteAnswer($scope.questionID, value.ID);\n            });\n            $scope.answers = [];\n          } else if ($scope.questionInfo.TYPE === 'NUMBER') {\n            $scope.saveNumberAnswer();\n          } else {\n            $scope.saveAnswers();\n          }\n          // Reset page\n          $scope.oldQuestionInfo = angular.copy($scope.questionInfo);\n        }\n      });\n    };\n\n    if (typeChanged()) {\n      confirmEdit().then(save);\n    } else {\n      save();\n    }\n  };\n\n  // Only called from saveQuestion now.\n  $scope.saveNumberAnswer = function () {\n    const newAnswer = {\n      ANSWER_TEXT: '',\n      QUESTION_ID: $scope.questionID,\n      ORDER_NUM: '',\n      MIN: $scope.answers[0].MIN,\n      MAX: $scope.answers[0].MAX,\n      UNIT_ID: $scope.answers[0].UNIT_ID,\n      DECIMALS: $scope.answers[0].DECIMALS\n    };\n\n    Questions.createAnswer($scope.questionID, newAnswer, function (status) {\n      if (status < 400) {\n        Questions.loadAnswers($scope.questionID, function (data, status) {\n          if (status < 400) {\n            $scope.answers = Questions.getAnswers;\n          }\n        });\n      }\n    });\n  };\n  // Adds new choice input at selected index\n  $scope.addAnswer = function (text) {\n    if ($scope.answers.length < 100) {\n      const newAnswer = {\n        ANSWER_TEXT: text,\n        QUESTION_ID: $scope.questionID,\n        ORDER_NUM: $scope.answers.length,\n        MIN: '',\n        MAX: '',\n        UNIT_ID: ''\n      };\n\n      const create = function () {\n        // Save the answer in database\n        Questions.createAnswer($scope.questionID, newAnswer, function (status) {\n          if (status < 400) {\n            Questions.loadAnswers($scope.questionID, function (data, status) {\n              if (status < 400) {\n                $scope.answers = Questions.getAnswers;\n              }\n            });\n          }\n        });\n      };\n\n      confirmEdit().then(create);\n    }\n  };\n\n  // Removes selected answer choice input from array\n  $scope.removeAnswer = function (answerID) {\n    const remove = function () {\n      // Delete the answer choice from database\n      Questions.deleteAnswer($scope.questionID, answerID, function (status) {\n        if (status < 400) {\n          $scope.selectedRow.value = '';\n          // Reload the answer list\n          Questions.loadAnswers($scope.questionID, function (data, status) {\n            if (status < 400) {\n              $scope.answers = Questions.getAnswers;\n            }\n          });\n        }\n      });\n    };\n\n    confirmEdit().then(remove);\n  };\n\n  $scope.addQuestionCode = function () {\n    $scope.questionInfo.CODES.push({});\n  };\n\n  $scope.removeQuestionCode = function (id, codeKey) {\n    if (!id) {\n      // The item has not been saved yet, just remove it.\n      $scope.questionInfo.CODES = $scope.questionInfo.CODES.filter(function (_, k) {\n        return k !== codeKey;\n      });\n      return;\n    }\n\n    if ($window.confirm('Remove the code from this question?')) {\n      Questions.deleteQuestionCode(id, function () {\n        $scope.questionInfo.CODES = $scope.questionInfo.CODES.filter(function (c) {\n          return c.ID !== id;\n        });\n      });\n    }\n  };\n\n  $scope.addAnswerCode = function (answerId) {\n    const answer = $scope.answers.find(function (a) {\n      return a.ID === answerId;\n    });\n    answer.CODES.push({});\n  };\n\n  $scope.removeAnswerCode = function (answerId, id, codeKey) {\n    const answer = $scope.answers.find(function (a) {\n      return a.ID === answerId;\n    });\n\n    if (!id) {\n      // The item has not been saved yet, just remove it.\n      answer.CODES = answer.CODES.filter(function (_, k) {\n        return k !== codeKey;\n      });\n      return;\n    }\n\n    if ($window.confirm('Remove the code from this answer?')) {\n      Questions.deleteAnswerCode(id, function () {\n        answer.CODES = answer.CODES.filter(function (c) {\n          return c.ID !== id;\n        });\n      });\n    }\n  };\n\n  // Go to the homepage\n  $scope.goHome = function () {\n    const modalInstance = $modal.open({\n      size: 'sm',\n      templateUrl: 'view/modal/leave-page-modal.html',\n      backdrop: 'static',\n      controller: function ($scope, $modalInstance) {\n        $scope.ok = function () {\n          $modalInstance.close();\n        };\n\n        $scope.cancel = function () {\n          $modalInstance.dismiss('cancel');\n        };\n      }\n    });\n    modalInstance.result.then(function () {\n      $state.go('secured.main');\n    });\n  };\n\n  // Moves the answer choice up on the list\n  // unless it's the first one\n  $scope.moveUp = function (answerID) {\n    // Get answer position\n    let index = 0;\n    for (let i = 0; i < $scope.answers.length; i++) {\n      if (answerID == $scope.answers[i].ID) {\n        index = i;\n        break;\n      }\n    }\n\n    if (index !== 0) {\n      // Update the position in DB\n      Questions.switchAnswers(index, index - 1, function (status) {\n        if (status >= 400) {\n          // Reload if error\n          Questions.loadAnswers($scope.questionID, function (data, status) {\n            $scope.answers = Questions.getAnswers;\n          });\n        }\n      });\n    }\n  };\n\n  // Moves the answer choice down on the list\n  // unless it's the last one\n  $scope.moveDown = function (answerID) {\n    // Get answer position\n    let index = $scope.answers.length - 1;\n    for (let i = 0; i < $scope.answers.length; i++) {\n      if (answerID == $scope.answers[i].ID) {\n        index = i;\n        break;\n      }\n    }\n\n    if (index !== $scope.answers.length - 1) {\n      // Update the position in DB\n      Questions.switchAnswers(index, index + 1, function (status) {\n        if (status >= 400) {\n          // Reload if error\n          Questions.loadAnswers($scope.questionID, function () {\n            $scope.answers = Questions.getAnswers;\n          });\n        }\n      });\n    }\n  };\n\n  $scope.editOrganizations = function (questionInfo) {\n    const modalInstance = $modal.open({\n      animation: true,\n      size: 'lg',\n      templateUrl: 'view/modal/modifyQuestionOrganizationsModal.html',\n      backdrop: 'static',\n      controller: 'ModifyQuestionOrganizationsController',\n      resolve: {\n        questionData() {\n          return questionInfo;\n        }\n      }\n    });\n\n    modalInstance.result.then(function (newQuestionData) {\n      $scope.questionInfo = newQuestionData;\n      $scope.organizationList = '';\n      for (let i = 0; $scope.questionInfo.ORGANIZATIONS.length > i; i++) {\n        if ($scope.organizationList.length > 0) {\n          $scope.organizationList += ', ';\n        }\n        $scope.organizationList += $scope.questionInfo.ORGANIZATIONS[i].NAME;\n      }\n    });\n  };\n\n  // Only called from saveQuestion now.\n  $scope.saveAnswers = function () {\n    $scope.answers.forEach(function (answer) {\n      Questions.editAnswer(answer, function (data, status) {\n        if (status < 400) {\n          $scope.isLoading.answersSuccess = true;\n          $timeout(function () {\n            $scope.isLoading.answersSuccess = false;\n          }, 2000);\n        }\n      });\n    });\n  };\n\n  $scope.deleteQuestion = function () {\n    const title = $translateVar('CONFIRM_DELETE_QUESTION');\n\n    confirmModal(title, $scope.forms).then(function () {\n      Questions.deleteQuestion($scope.questionInfo.ID, function (status) {\n        if (status < 400) {\n          $state.go('secured.main');\n          Forms.setStatus('hide');\n          Questions.setStatus('show');\n        }\n      });\n    });\n  };\n}]);","angular.module('QuestionListCtrl', ['angularUtils.directives.dirPagination', 'ui.bootstrap']).controller('QuestionListController', ['$scope', '$rootScope', '$modal', 'Questions', 'Forms', '$translate', 'Organization', function ($scope, $rootScope, $modal, Questions, Forms, $translate, Organization) {\n  $scope.currentPage = 1;\n  $scope.questionPageSize = 50;\n  $scope.displayQuestions = Questions.getDisplayStatus;\n  let organizationsLoaded = false;\n  // Used in sorting table contents according to selected column\n  $scope.sortQuestions = {\n    column: 'NAME',\n    descending: false\n  };\n  $scope.readonlymode = true;\n  if ($rootScope.loggedUser) {\n    if ($rootScope.loggedUser.rightlevel == 2 || $rootScope.loggedUser.rightlevel == 3) {\n      $scope.readonlymode = false;\n    }\n  }\n  $scope.questions = Questions.getQuestions;\n\n  $scope.questionsLoading = Questions.questionsLoading;\n  Questions.loadQuestions(function (data, status) {\n    Organization.loadQuestionOrganizations(function (data2, status2) {\n      $scope.questionsOrganizations = data2;\n      organizationsLoaded = true;\n    });\n  });\n  // This is used in questions list-view\n  $scope.printOrganizations = function (question) {\n    if (organizationsLoaded == true) {\n      question.ORGANIZATIONS = '';\n      for (let i = 0; $scope.questionsOrganizations.length > i; i++) {\n        if (question.ID == $scope.questionsOrganizations[i].QUESTION_ID) {\n          if (question.ORGANIZATIONS.length > 0) {\n            question.ORGANIZATIONS += ', ';\n          }\n          question.ORGANIZATIONS += $scope.questionsOrganizations[i].NAME;\n        }\n      }\n      question.readonlydelete = true;\n      if ($rootScope.loggedUser.rightlevel == 2) {\n        if (question.ORGANIZATIONS.indexOf($rootScope.loggedUser.organizationName) != -1) {\n          question.readonlydelete = false;\n        }\n      }\n      if ($rootScope.loggedUser.rightlevel == 3) {\n        question.readonlydelete = false;\n      }\n      return question.ORGANIZATIONS;\n    }\n  };\n\n  // Switches tab from Questions to toView\n  $scope.switchView = function (toView) {\n    switch (toView) {\n      case 'forms':\n        Questions.setStatus('hide');\n        Forms.setStatus('show');\n        break;\n    }\n  };\n\n  // Sets table sort according to COLUMN\n  // Also toggles between ascending and descending\n  $scope.changeSorting = function (column) {\n    if ($scope.sortQuestions.column == column) {\n      $scope.sortQuestions.descending = !$scope.sortQuestions.descending;\n    } else {\n      $scope.sortQuestions.column = column;\n      $scope.sortQuestions.descending = false;\n    }\n  };\n\n  // Returns icon that indicates ascending/descending sorting\n  $scope.getIcon = function (column) {\n    if ($scope.sortQuestions.column == column) {\n      if ($scope.sortQuestions.descending) {\n        return 'glyphicon-triangle-bottom';\n      }\n      return 'glyphicon-triangle-top';\n    }\n  };\n}]);","angular.module('ConfirmCtrl', ['ui.bootstrap']).controller('ConfirmController', ['$scope', '$modalInstance', 'message', function ($scope, $modalInstance, message) {\n  $scope.message = message;\n  $scope.yes = $modalInstance.close;\n  $scope.no = $modalInstance.dismiss;\n}]);","/* Generic modal for confirming deletion\n*/\nangular.module('DeleteConfirmationModalCtrl', ['ui.bootstrap']).controller('DeleteConfirmationModalController', ['$scope', '$modalInstance', 'confirmationMessage', function ($scope, $modalInstance, confirmationMessage) {\n  $scope.confirmationMessage = confirmationMessage;\n\n  $scope.ok = function () {\n    $modalInstance.close();\n  };\n\n  $scope.cancel = function () {\n    $modalInstance.dismiss('cancel');\n  };\n}]);","// Controller for the modal that is used to link an existing question to form\n\nangular.module('LinkQuestionModalCtrl', ['angularUtils.directives.dirPagination', 'ui.bootstrap']).controller('LinkQuestionModalController', ['$scope', '$modalInstance', 'Questions', 'Forms', '$modal', '$stateParams', function ($scope, $modalInstance, Questions, Forms, $modal, $stateParams) {\n  const formID = $stateParams.formid;\n  $scope.questionListPageSize = 10;\n  $scope.currentPage = 1;\n\n  Questions.loadQuestions(function (status) {\n    const allQuestions = Questions.getQuestions;\n    Forms.loadQuestionsInForm(formID, function (data, status) {\n      const formQuestions = data;\n      for (var j = 0; formQuestions.length > j; j++) {\n        if (allQuestions.map(function (e) {\n          return e.ID;\n        }).indexOf(formQuestions[j].ID) > -1) {\n          // Remove questions that have already been added to this form.\n          allQuestions.splice(allQuestions.map(function (e) {\n            return e.ID;\n          }).indexOf(formQuestions[j].ID), 1);\n        }\n      }\n      for (var j = 0; allQuestions.length > j; j++) {\n        if (allQuestions[j].QUESTIONTEXT) {\n          allQuestions[j].QUESTIONTEXT = allQuestions[j].QUESTIONTEXT.replace(/<(?:.|\\n)*?>/gm, '');\n        }\n      }\n      $scope.questions = allQuestions;\n    });\n  });\n\n  $scope.ok = function () {\n    if ($scope.questionID) {\n      $modalInstance.close($scope.questionID);\n    }\n  };\n  $scope.cancel = function () {\n    $modalInstance.dismiss('cancel');\n  };\n  // Opens a modal to link a new question to form\n  $scope.openNewQuestionModal = function () {\n    const modalInstance = $modal.open({\n      size: 'lg',\n      templateUrl: 'view/modal/newQuestionModal.html',\n      backdrop: 'static',\n      controller: 'NewQuestionModalController'\n    });\n\n    // User presses Save button\n    modalInstance.result.then(function (questionID) {\n      Forms.loadQuestionsInForm(formID, function (data, status) {\n        $scope.questions = data;\n        // use $scope.questions.length + 1 as the next position so the new question will be on the last position on the form\n        Forms.linkQuestionToForm(formID, questionID, $scope.questions.length + 1, function (data, status) {\n          $modalInstance.close('NEW_QUESTION_ADDED');\n        });\n      });\n    });\n  };\n}]);","// Controller for setting display logic to question that is linked to form.\n\nangular.module('ModifyFormOrganizationsCtrl', ['angularUtils.directives.dirPagination', 'ui.bootstrap']).controller('ModifyFormOrganizationsController', ['$q', '$rootScope', '$scope', '$modalInstance', 'Questions', '$state', '$stateParams', '$timeout', 'Organization', 'formData', function ($q, $rootScope, $scope, $modalInstance, Questions, $state, $stateParams, $timeout, Organization, formData) {\n  Organization.loadOrganizations(function (data, status) {\n    $scope.organizations = data;\n    for (let j = 0; formData.ORGANIZATIONS.length > j; j++) {\n      for (let i = 0; $scope.organizations.length > i; i++) {\n        if ($scope.organizations[i].ID == formData.ORGANIZATIONS[j].ORG_ID || $scope.organizations[i].STATUS == true) {\n          $scope.organizations[i].STATUS = true;\n        } else {\n          $scope.organizations[i].STATUS = false;\n        }\n      }\n    }\n  });\n  $scope.ok = function () {\n    formData.ORGANIZATIONS = [];\n    for (let i = 0; $scope.organizations.length > i; i++) {\n      if ($scope.organizations[i].STATUS == true) {\n        formData.ORGANIZATIONS.push({\n          DELETED: null,\n          FORM_ID: formData.ID,\n          ID: $scope.organizations[i].ID,\n          NAME: $scope.organizations[i].NAME,\n          ORG_ID: $scope.organizations[i].ID\n        });\n      }\n    }\n    $modalInstance.close(formData);\n  };\n  $scope.cancel = function () {\n    $modalInstance.dismiss('cancel');\n  };\n}]);","// Controller for setting display logic to question that is linked to form.\n\nangular.module('ModifyQuestionDisplayLogicModalCtrl', ['angularUtils.directives.dirPagination', 'ui.bootstrap']).controller('ModifyQuestionDisplayLogicModalController', ['$q', '$rootScope', '$scope', '$modalInstance', 'Questions', '$state', '$stateParams', '$timeout', function ($q, $rootScope, $scope, $modalInstance, Questions, $state, $stateParams, $timeout) {\n  $scope.formid = $stateParams.formid;\n  $scope.questionid = $rootScope.selectedLogicQuestion.ID;\n  $scope.questionname = $rootScope.selectedLogicQuestion.NAME;\n\n  $scope.questions = Questions.getDisplayQuestions;\n  Questions.loadDisplayQuestionData($scope.formid, $scope.questionid);\n\n  $scope.selectedquestion = '';\n  $scope.selectedquestionid = '';\n  $scope.answertype = '';\n  $scope.answeroperation = '';\n  $scope.answervalue = '';\n\n  const answerArray = [];\n  const answerArrayID = [];\n  $scope.selectAnswer = function (answer) {\n    if (jQuery.inArray(answer.ANSWER_TEXT, answerArray) == -1) {\n      answerArray.push(answer.ANSWER_TEXT);\n      answerArrayID.push(answer.ANSWER_ID);\n    } else {\n      const answerArrayWithIndex = answerArray.indexOf(answer.ANSWER_TEXT);\n      const answerArrayWithIndexID = answerArrayID.indexOf(answer.ANSWER_ID);\n      if (answerArrayWithIndex != -1) {\n        answerArray.splice(answerArrayWithIndex, 1);\n        answerArrayID.splice(answerArrayWithIndexID, 1);\n      }\n    }\n  };\n\n  $scope.ok = function () {\n    $modalInstance.close();\n  };\n  $scope.cancel = function () {\n    $modalInstance.dismiss('cancel');\n  };\n\n  $scope.SaveDisplayLogic = function () {\n    $scope.answermultivalue = answerArray;\n    $scope.answermultivalueID = answerArrayID;\n    let checkMultiValue = 0;\n    const displayinfo = {};\n    displayinfo.VALUE = '';\n    displayinfo.ANSWER_ID = '';\n    displayinfo.FORM_ID = '';\n    displayinfo.QUESTION_ID = '';\n    displayinfo.ANSWER_QUESTION_ID = '';\n    displayinfo.TYPE = '';\n    displayinfo.LOGIC = '';\n    displayinfo.VALUE = '';\n    for (let i = 0; $scope.answermultivalue.length > i; i++) {\n      checkMultiValue = 1;\n      if (i > 0) {\n        displayinfo.VALUE += '||';\n        displayinfo.ANSWER_ID += '||';\n      }\n      displayinfo.VALUE += $scope.answermultivalue[i];\n      displayinfo.ANSWER_ID += $scope.answermultivalueID[i];\n      displayinfo.FORM_ID = $scope.formid;\n      displayinfo.QUESTION_ID = $scope.questionid;\n      displayinfo.ANSWER_QUESTION_ID = $scope.selectedquestionid;\n      displayinfo.TYPE = $scope.answertype;\n      displayinfo.LOGIC = $scope.answeroperation;\n    }\n    if (checkMultiValue == 0) {\n      displayinfo.VALUE = $scope.answervalue;\n      displayinfo.FORM_ID = $scope.formid;\n      displayinfo.QUESTION_ID = $scope.questionid;\n      displayinfo.ANSWER_QUESTION_ID = $scope.selectedquestionid;\n      displayinfo.TYPE = $scope.answertype;\n      displayinfo.LOGIC = $scope.answeroperation;\n      Questions.createDisplayRule(displayinfo, function (status) {\n        $modalInstance.close(displayinfo.QUESTION_ID);\n      });\n    } else {\n      Questions.createDisplayRule(displayinfo, function (status) {\n        $modalInstance.close(displayinfo.QUESTION_ID);\n      });\n    }\n  };\n}]);","// Controller for setting display logic to question that is linked to form.\n\nangular.module('ModifyQuestionOrganizationsCtrl', ['angularUtils.directives.dirPagination', 'ui.bootstrap']).controller('ModifyQuestionOrganizationsController', ['$q', '$rootScope', '$scope', '$modalInstance', 'Questions', '$state', '$stateParams', '$timeout', 'Organization', 'questionData', function ($q, $rootScope, $scope, $modalInstance, Questions, $state, $stateParams, $timeout, Organization, questionData) {\n  Organization.loadOrganizations(function (data, status) {\n    $scope.organizations = data;\n    for (let j = 0; questionData.ORGANIZATIONS.length > j; j++) {\n      for (let i = 0; $scope.organizations.length > i; i++) {\n        if ($scope.organizations[i].ID == questionData.ORGANIZATIONS[j].ORG_ID || $scope.organizations[i].STATUS == true) {\n          $scope.organizations[i].STATUS = true;\n        } else {\n          $scope.organizations[i].STATUS = false;\n        }\n      }\n    }\n  });\n  $scope.ok = function () {\n    questionData.ORGANIZATIONS = [];\n    for (let i = 0; $scope.organizations.length > i; i++) {\n      if ($scope.organizations[i].STATUS == true) {\n        questionData.ORGANIZATIONS.push({\n          DELETED: null,\n          FORM_ID: questionData.ID,\n          ID: $scope.organizations[i].ID,\n          NAME: $scope.organizations[i].NAME,\n          ORG_ID: $scope.organizations[i].ID\n        });\n      }\n    }\n    $modalInstance.close(questionData);\n  };\n  $scope.cancel = function () {\n    $modalInstance.dismiss('cancel');\n  };\n}]);","angular.module('NewFormCtrl', ['angularUtils.directives.dirPagination', 'ui.bootstrap']).controller('NewFormController', ['$scope', '$rootScope', '$state', 'Forms', '$filter', '$translate', function ($scope, $rootScope, $state, Forms, $filter, $translate) {\n  const $translateVar = $filter('translate');\n\n  $scope.form = {};\n\n  $scope.disabled = false;\n\n  $scope.form.STATUS = 'Draft';\n\n  $scope.form.ORGANIZATIONS = [{ ORG_ID: $rootScope.loggedUser.organization }];\n\n  $scope.form.EBMEDS_USAGE = 1;\n\n  $scope.form.CATEGORY = 'symptom';\n\n  $scope.categories = [{ categoryName: 'Oirearviokysely', categoryValue: 'symptom' }, { categoryName: 'Terveystarkastus', categoryValue: 'health-check' }, { categoryName: 'Pitkäaikaissairaudet', categoryValue: 'chronic-disease' }];\n\n  $scope.statuses = [{ statusName: 'DRAFT', statusValue: 'Draft' }];\n\n  $scope.disabledValidation = true;\n\n  $scope.disabledApproval = true;\n\n  $scope.saveForm = function () {\n    if ($scope.formForm.$valid === false) {\n      return;\n    }\n\n    Forms.createForm($scope.form, function (data, status) {\n      // When successful, go to the new forms details page\n      if (status < 400) {\n        $scope.form.ORGANIZATIONS = [{ ORG_ID: $rootScope.loggedUser.organization, FORM_ID: data.NEW_ID }];\n        $state.go('secured.formDetailsPage', { formid: data.NEW_ID });\n      }\n    });\n  };\n\n  // Go back\n  $scope.goBack = function () {\n    window.history.back();\n  };\n}]);","angular.module('NewQuestionCtrl', ['angularUtils.directives.dirPagination', 'ui.bootstrap', 'ui.router']).controller('NewQuestionController', ['$scope', '$rootScope', '$state', 'Questions', '$filter', '$translate', '$window', function ($scope, $rootScope, $state, Questions, $filter, $translate, $window) {\n  const $translateVar = $filter('translate');\n\n  $scope.detailsPageTitle = $translateVar('NEW_QUESTION');\n\n  $scope.questionInfo = {\n    CODES: [],\n    TYPE: ''\n  };\n\n  $scope.codeSystems = [];\n  $scope.systemCodes = {};\n  Questions.loadCodeSystems(function (data) {\n    $scope.codeSystems = data.items;\n\n    data.items.forEach(function (system) {\n      Questions.loadSystemCodes(system.ID, function (data) {\n        $scope.systemCodes[system.ID] = data;\n      });\n    });\n  });\n\n  // Array of question types, used with radio buttons on form\n  if ($translate.use() === 'FI') {\n    $scope.questionTypeOptions = Questions.getQuestionTypes;\n  }\n  if ($translate.use() === 'EN') {\n    $scope.questionTypeOptions = Questions.getQuestionTypesEN;\n  }\n\n  // Saves new question in DB, then redirects to the question details page\n  $scope.saveQuestion = function () {\n    $scope.questionInfo.STATUS = 'Draft';\n    $scope.questionInfo.ORGANIZATIONS = [{ ORG_ID: $rootScope.loggedUser.organization }];\n    if ($scope.newQuestionForm.$valid) {\n      Questions.createQuestion($scope.questionInfo, function (status, data) {\n        if (status < 400) {\n          $state.go('secured.questionDetails', { questionid: data.NEW_ID });\n        }\n      });\n    }\n  };\n\n  $scope.goHome = function () {\n    $state.go('secured.main');\n  };\n\n  $scope.addQuestionCode = function () {\n    $scope.questionInfo.CODES.push({});\n  };\n\n  $scope.removeQuestionCode = function (id, codeKey) {\n    if (!id) {\n      // The item has not been saved yet, just remove it.\n      $scope.questionInfo.CODES = $scope.questionInfo.CODES.filter(function (_, k) {\n        return k !== codeKey;\n      });\n      return;\n    }\n\n    if ($window.confirm('Remove the code from this question?')) {\n      Questions.deleteQuestionCode(id, function () {\n        $scope.questionInfo.CODES = $scope.questionInfo.CODES.filter(function (c) {\n          return c.ID !== id;\n        });\n      });\n    }\n  };\n}]);","// Controller for the modal that is used to link an existing question to form\n\nangular.module('NewQuestionModalCtrl', ['angularUtils.directives.dirPagination', 'ui.bootstrap']).controller('NewQuestionModalController', ['$scope', '$rootScope', '$modalInstance', 'Questions', '$state', '$stateParams', '$timeout', '$filter', '$translate', '$window', function ($scope, $rootScope, $modalInstance, Questions, $state, $stateParams, $timeout, $filter, $translate, $window) {\n  $scope.questionInfo = {\n    CODES: [],\n    TYPE: ''\n  };\n  const $translateVar = $filter('translate');\n  $scope.detailsPageTitle = $translateVar('NEW_QUESTION');\n  // Set starting day to monday\n  $scope.calendarOptions = {\n    'starting-day': '1'\n  };\n  // Toggles the pop-up date picker for selecting start date.\n  $scope.openStartDateCalendar = function ($event) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    $scope.calendar1Open = !$scope.calendar1Open;\n  };\n  // Array of question types, used with radio buttons on form\n  if ($translate.use() === 'FI') {\n    $scope.questionTypes = Questions.getQuestionTypes;\n  }\n  if ($translate.use() === 'EN') {\n    $scope.questionTypes = Questions.getQuestionTypesEN;\n  }\n  // Tooltip texts\n  $scope.tooltipMoveUp = $translateVar('MOVE_QUESTION_UP');\n  $scope.tooltipMoveDown = $translateVar('MOVE_QUESTION_DOWN');\n  $scope.disabledID = true;\n  $scope.disabled = false;\n  $scope.disabledApproval = true;\n\n  let newID = '';\n\n  /**\n   * Common units\n   *\n   * @see FormPreviewCtrl\n   * @see NewQuestionModalController\n   * @see QuestionDetailsCtrl\n   * @see api/common/fhir.js\n   */\n  $scope.Units = [{ value: 1, text: 'kg' }, { value: 2, text: 'cm' }, { value: 3, text: 'mg' }, { value: 4, text: 'C' }, { value: 5, text: $translateVar('UNITS') }, { value: 6, text: $translateVar('YEAR') }, { value: 7, text: $translateVar('DAY') }, { value: 8, text: 'mmHg' }, { value: 9, text: 'h' }, { value: 10, text: 'mmol/l' }];\n\n  $scope.codeSystems = [];\n  $scope.systemCodes = {};\n  Questions.loadCodeSystems(function (data) {\n    $scope.codeSystems = data.items;\n\n    data.items.forEach(function (system) {\n      Questions.loadSystemCodes(system.ID, function (data) {\n        $scope.systemCodes[system.ID] = data;\n      });\n    });\n  });\n\n  // Saves new question in DB, then redirects to the question details page\n  $scope.saveQuestion = function () {\n    $scope.questionInfo.STATUS = 'Draft';\n    $scope.questionInfo.ORGANIZATIONS = [{ ORG_ID: $rootScope.loggedUser.organization }];\n    if ($scope.questionForm.$invalid) {\n      return;\n    }\n\n    Questions.createQuestion($scope.questionInfo, function (status, data) {\n      if (status < 400) {\n        newID = data.NEW_ID;\n        $scope.questionInfo.ORGANIZATIONS = [{ ORG_ID: $rootScope.loggedUser.organization, QUESTION_ID: newID }];\n        const timeout = null;\n        $scope.isLoading = Questions.questionsLoading;\n        $scope.questionID = newID;\n        $scope.answers = [];\n        $scope.oldQuestionInfo = {};\n        // Array for question answer choices\n        $scope.placeholderText = $translateVar('TYPE_ANSWER_TEXT');\n        $scope.detailsPageTitle = $translateVar('QUESTION_TITLE_1') + ' \"' + $scope.questionID + '\" ' + $translateVar('QUESTION_TITLE_2');\n        // Array of question types, used with radio buttons on form\n        if ($translate.use() === 'FI') {\n          $scope.questionTypes = Questions.getQuestionTypes;\n        }\n        if ($translate.use() === 'EN') {\n          $scope.questionTypes = Questions.getQuestionTypesEN;\n        }\n\n        // Tooltip texts\n        $scope.tooltipMoveUp = $translateVar('MOVE_QUESTION_UP');\n        $scope.tooltipMoveDown = $translateVar('MOVE_QUESTION_DOWN');\n\n        // Initialize question and answer information\n        Questions.loadQuestion($scope.questionID, function (status) {\n          if (status < 400) {\n            $scope.questionInfo = Questions.getQuestion;\n            $scope.oldQuestionInfo = angular.copy($scope.questionInfo);\n\n            Questions.loadAnswers($scope.questionID, function (data, status) {\n              if (status < 400) {\n                $scope.answers = Questions.getAnswers;\n              }\n            });\n          }\n        });\n        $scope.saveQuestion = function () {\n          $scope.questionInfo.ID = $scope.questionID;\n          $scope.questionInfo.ORGANIZATIONS = [{ ORG_ID: $rootScope.loggedUser.organization, QUESTION_ID: $scope.questionInfo.ID }];\n\n          // Save the question in DB\n          Questions.updateQuestion($scope.questionInfo, $scope.answers, function (status) {\n            if (status < 400) {\n              // Delete old answer settings if type changed\n              if ($scope.questionInfo.TYPE !== $scope.oldQuestionInfo.TYPE) {\n                $scope.answers.forEach(function (value, index, array) {\n                  Questions.deleteAnswer($scope.questionID, value.ID);\n                });\n                Questions.loadAnswers($scope.questionID, function (data, status) {\n                  if (status < 400) {\n                    $scope.answers = Questions.getAnswers;\n                  }\n                });\n              } else {\n                $scope.saveNumberAnswer();\n                $scope.saveAnswers();\n              }\n              // Reset page\n              $scope.oldQuestionInfo = angular.copy($scope.questionInfo);\n            }\n          });\n        };\n\n        $scope.addQuestionCode = function () {\n          $scope.questionInfo.CODES.push({});\n        };\n\n        $scope.removeQuestionCode = function (id, codeKey) {\n          if (!id) {\n            // The item has not been saved yet, just remove it.\n            $scope.questionInfo.CODES = $scope.questionInfo.CODES.filter(function (_, k) {\n              return k !== codeKey;\n            });\n            return;\n          }\n\n          if ($window.confirm('Remove the code from this question?')) {\n            Questions.deleteQuestionCode(id, function () {\n              $scope.questionInfo.CODES = $scope.questionInfo.CODES.filter(function (c) {\n                return c.ID !== id;\n              });\n            });\n          }\n        };\n\n        $scope.addAnswerCode = function (answerId) {\n          const answer = $scope.answers.find(function (a) {\n            return a.ID === answerId;\n          });\n          answer.CODES.push({});\n        };\n\n        $scope.removeAnswerCode = function (answerId, id, codeKey) {\n          const answer = $scope.answers.find(function (a) {\n            return a.ID === answerId;\n          });\n\n          if (!id) {\n            // The item has not been saved yet, just remove it.\n            answer.CODES = answer.CODES.filter(function (_, k) {\n              return k !== codeKey;\n            });\n            return;\n          }\n\n          if ($window.confirm('Remove the code from this answer?')) {\n            Questions.deleteAnswerCode(id, function () {\n              answer.CODES = answer.CODES.filter(function (c) {\n                return c.ID !== id;\n              });\n            });\n          }\n        };\n\n        // Only called from saveQuestion now.\n        $scope.saveNumberAnswer = function () {\n          if ($scope.questionInfo.TYPE === 'NUMBER') {\n            const newAnswer = {\n              ANSWER_TEXT: '',\n              QUESTION_ID: $scope.questionID,\n              ORDER_NUM: '',\n              MIN: $scope.answers[0].MIN,\n              MAX: $scope.answers[0].MAX,\n              UNIT_ID: $scope.answers[0].UNIT_ID\n            };\n\n            Questions.createAnswer($scope.questionID, newAnswer, function (status) {\n              if (status >= 400) {\n                // Error\n                Questions.loadAnswers($scope.questionID, function (data, status) {\n                  if (status < 400) {\n                    $scope.answers = Questions.getAnswers;\n                  }\n                });\n              }\n            });\n          }\n        };\n        // Adds new choice input at selected index\n        $scope.addAnswer = function (text) {\n          if ($scope.answers.length < 10) {\n            const newAnswer = {\n              ANSWER_TEXT: text,\n              QUESTION_ID: $scope.questionID,\n              ORDER_NUM: $scope.answers.length,\n              MIN: '',\n              MAX: '',\n              UNIT_ID: ''\n            };\n            // Save the answer in database\n            Questions.createAnswer($scope.questionID, newAnswer, function (status) {\n              if (status < 400) {\n                Questions.loadAnswers($scope.questionID, function (data, status) {\n                  if (status < 400) {\n                    $scope.answers = Questions.getAnswers;\n                  }\n                });\n              }\n            });\n          }\n        };\n\n        // Removes selected answer choice input from array\n        $scope.removeAnswer = function (answerID) {\n          // Delete the answer choice from database\n          Questions.deleteAnswer($scope.questionID, answerID, function (status) {\n            if (status < 400) {\n              // Reload the answer list\n              Questions.loadAnswers($scope.questionID, function (data, status) {\n                if (status < 400) {\n                  $scope.answers = Questions.getAnswers;\n                }\n              });\n            }\n          });\n        };\n\n        // Moves the answer choice up on the list\n        // unless it's the first one\n        $scope.moveUp = function (answerID) {\n          // Get answer position\n          let index = 0;\n          for (let i = 0; i < $scope.answers.length; i++) {\n            if (answerID == $scope.answers[i].ID) {\n              index = i;\n              break;\n            }\n          }\n\n          if (index !== 0) {\n            // Update the position in DB\n            Questions.switchAnswers(index, index - 1, function (status) {\n              if (status >= 400) {\n                // Reload if error\n                Questions.loadAnswers($scope.questionID, function (data, status) {\n                  $scope.answers = Questions.getAnswers;\n                });\n              }\n            });\n          }\n        };\n\n        // Moves the answer choice down on the list\n        // unless it's the last one\n        $scope.moveDown = function (answerID) {\n          // Get answer position\n          let index = $scope.answers.length - 1;\n          for (let i = 0; i < $scope.answers.length; i++) {\n            if (answerID == $scope.answers[i].ID) {\n              index = i;\n              break;\n            }\n          }\n\n          if (index !== $scope.answers.length - 1) {\n            // Update the position in DB\n            Questions.switchAnswers(index, index + 1, function (status) {\n              if (status >= 400) {\n                // Reload if error\n                Questions.loadAnswers($scope.questionID, function (data, status) {\n                  $scope.answers = Questions.getAnswers;\n                });\n              }\n            });\n          }\n        };\n\n        // Only called from saveQuestion now.\n        $scope.saveAnswers = function () {\n          $scope.answers.forEach(function (answer) {\n            Questions.editAnswer(answer, function (data, status) {\n              if (status < 400) {\n                $scope.isLoading.answersSuccess = true;\n                $timeout(function () {\n                  $scope.isLoading.answersSuccess = false;\n                }, 2000);\n              }\n            });\n          });\n        };\n      }\n    });\n  };\n\n  // Array of question types, used with radio buttons on form\n  if ($translate.use() === 'FI') {\n    $scope.questionTypeOptions = Questions.getQuestionTypes;\n  }\n  if ($translate.use() === 'EN') {\n    $scope.questionTypeOptions = Questions.getQuestionTypesEN;\n  }\n\n  $scope.ok = function () {\n    if ($scope.questionID) {\n      $modalInstance.close(newID);\n    }\n  };\n  $scope.cancel = function () {\n    $modalInstance.dismiss('cancel');\n  };\n}]);","/* Controller for adding and editing notes\n*/\nangular.module('NoteModalCtrl', ['ui.bootstrap']).controller('NoteModalController', ['$scope', '$modalInstance', 'modalTitle', 'noteData', function ($scope, $modalInstance, modalTitle, noteData) {\n  $scope.title = modalTitle;\n  $scope.note = {};\n\n  if (noteData) {\n    $scope.note.TEXT = noteData.TEXT;\n    $scope.note.ID = noteData.ID;\n  }\n\n  $scope.ok = function () {\n    if ($scope.note.TEXT) {\n      $modalInstance.close($scope.note);\n    }\n  };\n  $scope.cancel = function () {\n    $modalInstance.dismiss('cancel');\n  };\n}]);","angular.module('PublishVersionCommentCtrl', ['ui.bootstrap']).controller('PublishVersionCommentController', ['$rootScope', '$scope', '$modalInstance', 'publishModalForm', 'languages', function ($rootScope, $scope, $modalInstance, publishModalForm, languages) {\n  $scope.publishForm = publishModalForm;\n  publishModalForm.languages = languages.reduce(function (prev, current) {\n    return Object.assign({}, prev, { [current]: true });\n  }, {});\n  $scope.publish = function () {\n    const isCommentField = !!$scope.publishModalForm.comment.$viewValue.trim().length > 0;\n    if (isCommentField) {\n      $modalInstance.close({ action: 'publish', payload: $scope.publishForm });\n    }\n  };\n\n  $scope.cancel = function () {\n    $modalInstance.dismiss({ action: 'cancel', payload: $scope.publishForm });\n  };\n}]);","angular.module('PublishVersionCommentDetailsCtrl', ['ui.bootstrap']).controller('PublishVersionCommentDetailsController', ['$rootScope', '$scope', '$modalInstance', 'ObjectDiff', 'Forms', 'formId', 'comment', 'publishComments', function ($rootScope, $scope, $modalInstance, ObjectDiff, Forms, formId, comment, publishComments) {\n  $scope.currentPage = 1;\n  $scope.paginationSize = 5;\n\n  $scope.comment = comment;\n\n  $scope.filterBySelectedLanguage = function (comment) {\n    return (\n      // Old versions use two character language codes\n      $scope.selectedLanguage.code.includes(comment.JSONFHIR.language)\n    );\n  };\n\n  $scope.labels = {\n    'fi-FI': 'Suomeksi (fi-FI)',\n    'sv-FI': 'Ruotsiksi (sv-FI)',\n    'en-GB': 'Englanniksi (en-GB)'\n  };\n  $scope.langs = $scope.comment.languages.map(function (lang) {\n    return {\n      label: $scope.labels[lang],\n      code: lang\n    };\n  });\n\n  $scope.selectedLanguage = $scope.langs.find(function (l) {\n    return l.code.includes('fi-FI');\n  }) || $scope.langs[0];\n\n  $scope.allPublishComments = publishComments;\n  $scope.allPublishCommentsOnSelectedLang = publishComments.filter($scope.filterBySelectedLanguage);\n  const diffComment = publishComments.filter(function (el) {\n    return el.ID !== comment.ID;\n  }).shift();\n\n  function setDiff() {\n    $scope.diffedComment = ObjectDiff.diffOwnProperties($scope.comment.JSONFHIR, $scope.commentToBeDiffed.JSONFHIR);\n  }\n\n  function processDiffBetweenComments(diffCommentId) {\n    $scope.diffCommentId = diffCommentId;\n\n    if (!diffCommentId) {\n      Forms.loadCurrentSavedVersionByFormId(formId, function (data) {\n        $scope.commentToBeDiffed = { JSONFHIR: data };\n        setDiff();\n      }, { language: $scope.selectedLanguage.code });\n    } else {\n      $scope.commentToBeDiffed = $scope.allPublishCommentsOnSelectedLang.find(function (comment) {\n        return comment.ID === $scope.diffCommentId;\n      });\n      setDiff();\n    }\n  }\n\n  if (diffComment.ID) {\n    processDiffBetweenComments(diffComment.ID);\n  }\n\n  $scope.$watch('selectedLanguage', function () {\n    $scope.allPublishCommentsOnSelectedLang = $scope.allPublishComments.filter($scope.filterBySelectedLanguage);\n    $scope.comment = $scope.allPublishCommentsOnSelectedLang.find(function (c) {\n      return c.ID === $scope.comment.ID;\n    });\n    if ($scope.comment) {\n      processDiffBetweenComments($scope.diffCommentId);\n    }\n  });\n\n  $scope.handleDiff = function (commentToBeDiffed) {\n    processDiffBetweenComments(commentToBeDiffed.ID);\n  };\n\n  $scope.handleCurrentSavedVersion = function () {\n    processDiffBetweenComments(null);\n  };\n\n  $scope.handleDeprecate = function (deprecate, id) {\n    Forms.deprecateFormVersion(deprecate)(id, function (_, status) {\n      if (status < 400) {\n        $modalInstance.close({ action: 'reload-versions' });\n      }\n    });\n  };\n\n  $scope.close = function () {\n    $modalInstance.close({ action: 'close', payload: 'Closing version details' });\n  };\n}]);","angular.module('ConfirmDirective', []).directive('confirm', function ($modal, $parse) {\n  return {\n    // So the link function is run before ngClick's, which has priority 0\n    priority: -1,\n    link: function (scope, element, attrs) {\n      element.on('click', function (event) {\n        // Don't run ngClick's handler\n        event.stopImmediatePropagation();\n\n        $modal.open({\n          templateUrl: 'view/modal/confirm-modal.html',\n          controller: 'ConfirmController',\n          resolve: {\n            message: function () {\n              return attrs.confirm;\n            }\n          }\n        }).result.then(function () {\n          // Pass original click as '$event'\n          $parse(attrs.ngClick)(scope, { $event: event });\n        });\n      });\n    }\n  };\n});","angular.module('ConvertDirective', []).directive('convertToNumber', function () {\n  return {\n    require: 'ngModel',\n    link(scope, element, attrs, ngModel) {\n      ngModel.$parsers.push(function (val) {\n        return parseInt(val, 10);\n      });\n      ngModel.$formatters.push(function (val) {\n        return '' + val;\n      });\n    }\n  };\n});","angular.module('EbmedsService', []).factory('Ebmeds', ['$http', '$rootScope', '$filter', 'toastr', function ($http, $rootScope, $filter, toastr) {\n  const api_prefix = $rootScope.api_prefix;\n  // Who you gonna call? Ghostbu...EBMeDS!!!\n  function callEBMeDS(form, callback) {\n    $http.post(api_prefix + 'api/ebmeds', form).success(function (data, status) {\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      // Show error message to user\n      toastr.error('Fetching data failed with status: ' + status);\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {});\n  }\n\n  return {\n    callEBMeDS\n  };\n}]);","angular.module('FormService', []).factory('Forms', ['$http', '$rootScope', '$filter', '$translate', 'toastr', function ($http, $rootScope, $filter, $translate, toastr) {\n  const api_prefix = $rootScope.api_prefix;\n\n  const forms = [];\n\n  const loading = { forms: false, form: false };\n  const displayForms = { value: true };\n\n  // Extracts the language option from an options object\n  function getLanguage(options) {\n    return options && options.language || 'fi-FI';\n  }\n\n  // Load all forms from the database\n  function loadForms(callback) {\n    loading.forms = true;\n    $http.get(api_prefix + 'api/forms').success(function (data, status) {\n      // Angular copy so that the change is noticed in Controller and 2-way binding works\n      angular.copy(data, forms);\n\n      if (callback) {\n        callback(status);\n      }\n    }).error(function (data, status) {\n      // Show error message to user\n      toastr.error('Fetching data failed with status: ' + status);\n\n      if (callback) {\n        callback(status);\n      }\n    }).finally(function () {\n      loading.forms = false;\n    });\n  }\n\n  // Load a single form from the database\n  function loadFormByID(formID, callback, options) {\n    loading.form = true;\n    $http.get(api_prefix + 'api/forms/' + formID + '?lang=' + getLanguage(options)).success(function (data, status) {\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      // Show error message to user\n      toastr.error('Fetching data failed with status: ' + status);\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {\n      loading.form = false;\n    });\n  }\n  // Load a single form from the database\n  function loadFocalUrl(formID, callback) {\n    loading.form = true;\n    $http.get(api_prefix + 'api/forms/link/' + formID).success(function (data, status) {\n      if (callback) {\n        callback(data.url, status);\n      }\n    }).error(function (data, status) {\n      // Show error message to user\n      toastr.error('Fetching data failed with status: ' + status);\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {\n      loading.form = false;\n    });\n  }\n\n  // Creates a new form and saves it in database\n  function createForm(form, callback) {\n    loading.form = true;\n\n    form.CREATED_BY = $rootScope.loggedUser.id;\n\n    const $translateVar = $filter('translate');\n\n    if (form.INTRODUCTION && form.INTRODUCTION.length > 4000) {\n      toastr.error($translateVar('INTRODUCTION_LENGTH'));\n      return;\n    }\n    if (form.DESCRIPTION && form.DESCRIPTION.length > 4000) {\n      toastr.error($translateVar('DESCRIPTION_LENGTH'));\n      return;\n    }\n\n    $http.post(api_prefix + 'api/forms/', form).success(function (data, status) {\n      toastr.success('New form created successfully');\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      // Show error message to user\n      toastr.error('Creating new form failed with status: ' + status);\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {\n      loading.form = false;\n    });\n  }\n\n  // Saves an edited form to database\n  function editForm(form, callback) {\n    loading.form = true;\n    // Initialize undefined valuesto empty strings so database wont be filled with 'undefined'\n    form.NAME = form.NAME ? form.NAME : '';\n    form.DESCRIPTION = form.DESCRIPTION ? form.DESCRIPTION : '';\n    form.STATUS = form.STATUS ? form.STATUS : '';\n    form.APPROVED_BY = form.APPROVED_BY ? form.APPROVED_BY : '';\n    form.COPYRIGHT = form.COPYRIGHT ? form.COPYRIGHT : '';\n    form.ORGANISATION = form.ORGANISATION ? form.ORGANISATION : '';\n    form.VALIDATED = form.VALIDATED ? form.VALIDATED : '';\n\n    form.EDITED_BY = $rootScope.loggedUser.id;\n\n    const $translateVar = $filter('translate');\n    if (form.INTRODUCTION && form.INTRODUCTION.length > 4000) {\n      toastr.error($translateVar('INTRODUCTION_LENGTH'));\n      return;\n    }\n    if (form.DESCRIPTION && form.DESCRIPTION.length > 4000) {\n      toastr.error($translateVar('DESCRIPTION_LENGTH'));\n      return;\n    }\n\n    $http.put(api_prefix + 'api/forms/' + form.ID, form).success(function (data, status) {\n      toastr.success('Form edited successfully');\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      // Show error message to user\n      toastr.error('Editing form failed with status: ' + status);\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {\n      loading.form = false;\n    });\n  }\n\n  // Adds a question to form by inserting the ID:s in link table in database\n  // Parameters: position is the numeric position of question in form, first position is 1\n  function linkQuestionToForm(formID, questionID, position, callback) {\n    loading.linkQuestion = true;\n\n    $http.post(api_prefix + 'api/forms/' + formID + '/questions/' + questionID, {\n      POSITION: position\n    }).success(function (data, status) {\n      toastr.success('Question ' + questionID + ' added to form');\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Adding question to form failed with status: ' + status);\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {\n      loading.linkQuestion = false;\n    });\n  }\n\n  // Loads all the questions in the form ordered by their position in the form. Positions start from 1\n  function loadQuestionsInForm(formID, callback, options) {\n    loading.formQuestions = true;\n    $http.get(api_prefix + 'api/forms/' + formID + '/questions?lang=' + getLanguage(options)).success(function (data, status) {\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      // Show error message to user\n      toastr.error('Fetching data failed with status: ' + status);\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {\n      loading.formQuestions = false;\n    });\n  }\n\n  // Removes a question from a form\n  function removeLinkQuestionToForm(formID, questionID, callback) {\n    loading.linkQuestion = true;\n\n    $http.delete(api_prefix + 'api/forms/' + formID + '/questions/' + questionID).success(function (data, status) {\n      toastr.success('Question ' + questionID + ' removed from form');\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Removing question from form failed with status: ' + status);\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {\n      loading.linkQuestion = false;\n    });\n  }\n\n  // Loads all the notes in form by form id\n  function loadNotesInForm(formID, callback) {\n    loading.notes = true;\n    $http.get(api_prefix + 'api/forms/' + formID + '/notes').success(function (data, status) {\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      // Show error message to user\n      toastr.error('Fetching data failed with status: ' + status);\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {\n      loading.notes = false;\n    });\n  }\n\n  // Delete form by setting its deleted value to 1\n  function deleteForm(formID, callback) {\n    loading.forms = true;\n    $http.delete(api_prefix + 'api/forms/' + formID).success(function (data, status) {\n      toastr.success('Form ' + formID + ' deleted');\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      // Show error message to user\n      toastr.error('Deleting form failed with status: ' + status);\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {\n      loading.forms = false;\n    });\n  }\n\n  // Swaps positions of two questions in the form\n  // This is intended to be used to swap the positions of two neighboring questions\n  // Otherwise the positions won't be correct\n  function swapQuestionPositionsInForm(formid, questionid1, questionid2, callback) {\n    loading.formQuestions = true;\n    $http.put(api_prefix + 'api/forms/' + formid + '/questions/swap/' + questionid1 + '/' + questionid2).success(function (data, status) {\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      // Show error message to user\n      toastr.error('Question position swapping failed with status: ' + status);\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {\n      loading.formQuestions = false;\n    });\n  }\n\n  function setQuestionGroup(formId, questionId, groupQuestion, callback) {\n    $http.put(api_prefix + 'api/forms/' + formId + '/questions/' + questionId + '/group', { groupQuestion }).success(function (data, status) {\n      toastr.success('Question group changed successfully');\n      callback(data, status);\n    }).error(function (data, status) {\n      toastr.error('Saving question group failed with status: ' + status);\n      callback(data, status);\n    });\n  }\n\n  // Set SEND_TO_EBMEDS information on question linked to form. This field tells form system whether to send\n  // Data to ebmeds or not when this particular question is answered.\n  function setSendToEBMeDS(formID, questionID, sendToEBMeDS, callback) {\n    $http.put(api_prefix + 'api/formsendtoebmeds/' + formID, {\n      SEND_TO_EBMEDS: sendToEBMeDS,\n      QUESTION_ID: questionID\n    }).success(function (data, status) {\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Saving setting \\'Send to EBMEDS\\' failed with status: ' + status);\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {});\n  }\n\n  // Set options (OPTIONAL, READ_ONLY) for a question linked to form.\n  function setLinkedQuestionOptions(question) {\n    $http.put(api_prefix + 'api/formlinkedquestionoptions', question).success(function (data, status) {\n      toastr.success('Question options changed successfully');\n    }).error(function (data, status) {\n      toastr.error('Saving form question options failed with status: ' + status);\n    });\n  }\n\n  // Publish form to export API, save new version\n  function PublishSaveFormVersion(formID, scriptID, params, callback) {\n    $http.post(api_prefix + 'api/formversion/' + formID, {\n      CREATED_BY: $rootScope.loggedUser.id,\n      SCRIPT_ID: scriptID,\n      VERSION_COMMENT: params.comment,\n      languages: params.languages,\n      status: params.status\n    }).success(function (data, status) {\n      toastr.success('Form published, new version saved');\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      toastr.error(data.error);\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {});\n  }\n\n  // Loads all publish comments by a given form id\n  const loadPublishCommentByFormId = function (formId, callback) {\n    loading.comments = true;\n    $http.get(api_prefix + 'api/form/' + formId + '/form-versions').success(function (data, status) {\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Fetching data failed with status: ' + status);\n    }).finally(function () {\n      return loading.comments = false;\n    });\n  };\n\n  const loadCurrentSavedVersionByFormId = function (formId, callback, options) {\n    $http.get(api_prefix + 'api/FHIR/forms/export/' + formId + '?lang=' + getLanguage(options)).success(function (data, status) {\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      if (status === 404) {\n        toastr.warning(data.errorText);\n      } else {\n        toastr.error('Fetching data failed with status: ' + status);\n      }\n    });\n  };\n\n  // Preview form to export API, save new version\n  function PreviewFormVersion(formID, scriptID, callback, options) {\n    $http.post(api_prefix + 'api/formodapreview/' + formID + '?lang=' + getLanguage(options), {\n      CREATED_BY: $rootScope.loggedUser.id,\n      SCRIPT_ID: scriptID\n    }).success(function (data, status) {\n      toastr.success('Form data sent to ODA2 for preview');\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      let toastrError = '';\n      if (data.odaerror) {\n        for (let i = 0; data.odaerror.length > i; i++) {\n          if (data.odaerror[i].location) {\n            toastrError += data.odaerror[i].location[0] + ':\\n' + data.odaerror[i].diagnostics + '\\n\\n';\n          } else {\n            toastrError += 'Warning(s) / Errors(s):\\n' + data.odaerror[i].diagnostics + '\\n\\n';\n          }\n        }\n        toastr.error('ODA2 warning/error: ' + toastrError);\n      } else {\n        toastr.error('Form preview failed with status: ' + status);\n      }\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {});\n  }\n\n  // Validate form to export API, save new version\n  function ValidateFormVersion(formID, scriptID, callback, options) {\n    $http.post(api_prefix + 'api/formodavalidate/' + formID + '?lang=' + getLanguage(options), {\n      CREATED_BY: $rootScope.loggedUser.id,\n      SCRIPT_ID: scriptID\n    }).success(function (data, status) {\n\n      toastr.success('Form validated for ODA2');\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      let toastrError = '';\n      if (data.odaerror) {\n        for (let i = 0; data.odaerror.length > i; i++) {\n          if (data.odaerror[i].location) {\n            toastrError += data.odaerror[i].location[0] + ':\\n' + data.odaerror[i].diagnostics + '\\n\\n';\n          } else {\n            toastrError += 'Warning(s) / Errors(s):\\n' + data.odaerror[i].diagnostics + '\\n\\n';\n          }\n        }\n        toastr.error('Validation warning/error: ' + toastrError);\n      } else {\n        toastr.error('Form validation failed with status: ' + status);\n      }\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {});\n  }\n\n  function setStatus(status) {\n    // Sets Forms view hidden/displayed\n    if (status == 'show') {\n      displayForms.value = true;\n    } else {\n      displayForms.value = false;\n    }\n  }\n\n  const hasChanged = function (form, oldForm) {\n    const isEmpty = function (value) {\n      return value === undefined || value === null || value === '' || value === '<br>';\n    };\n\n    const bothEmpty = function (val, val2) {\n      return isEmpty(val) && isEmpty(val2);\n    };\n\n    const keys = Object.keys(form).filter(function (f) {\n      return f !== 'ORGANIZATIONS';\n    });\n\n    for (const key of keys) {\n      if (form[key] !== oldForm[key] && !bothEmpty(form[key], oldForm[key])) {\n        return true;\n      }\n    }\n\n    return !angular.equals(form.ORGANIZATIONS, oldForm.ORGANIZATIONS);\n  };\n\n  const deprecateFormVersion = function (deprecate) {\n    return function (id, callback) {\n      const action = deprecate ? 'deprecate' : 'reactivate';\n      const url = api_prefix + 'api/formversion/' + id + '/' + action;\n      $http.post(url).success(function (data, status) {\n        toastr.success('Form version ' + id + ' ' + action + ' successful');\n        callback(data, status);\n      }).error(function (data, status) {\n        toastr.error(status + ': ' + data.errormessage);\n        callback(data, status);\n      });\n    };\n  };\n\n  return {\n    getForms: forms,\n    setStatus,\n    getDisplayStatus: displayForms,\n    loading,\n    loadForms,\n    loadFormByID,\n    loadQuestionsInForm,\n    linkQuestionToForm,\n    loadNotesInForm,\n    createForm,\n    editForm,\n    removeLinkQuestionToForm,\n    deleteForm,\n    swapQuestionPositionsInForm,\n    setQuestionGroup,\n    setSendToEBMeDS,\n    setLinkedQuestionOptions,\n    hasChanged,\n    PublishSaveFormVersion,\n    PreviewFormVersion,\n    ValidateFormVersion,\n    loadPublishCommentByFormId,\n    loadCurrentSavedVersionByFormId,\n    deprecateFormVersion,\n    loadFocalUrl\n  };\n}]);","// This service is used to handle notes that are written by users for forms and questions\n\nangular.module('NoteService', []).factory('Notes', ['$http', '$rootScope', 'toastr', function ($http, $rootScope, toastr) {\n  const api_prefix = $rootScope.api_prefix;\n\n  const loading = { note: false };\n\n  function saveNewNote(note, callback) {\n    note.CREATED_BY = $rootScope.loggedUser.id;\n\n    loading.note = true;\n    $http.post(api_prefix + 'api/notes', note).success(function (data, status) {\n      toastr.success('Note added');\n\n      if (callback) {\n        callback(status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Adding not failed with status: ' + status);\n\n      if (callback) {\n        callback(status);\n      }\n    }).finally(function (data, status) {\n      loading.note = false;\n    });\n  }\n\n  function editNote(note, callback) {\n    loading.note = true;\n    $http.put(api_prefix + 'api/notes/' + note.ID, note).success(function (data, status) {\n      toastr.success('Note edited');\n\n      if (callback) {\n        callback(status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Editing note failed with status: ' + status);\n\n      if (callback) {\n        callback(status);\n      }\n    }).finally(function (data, status) {\n      loading.note = false;\n    });\n  }\n\n  function deleteNote(noteID, callback) {\n    loading.note = true;\n    $http.delete(api_prefix + 'api/notes/' + noteID).success(function (data, status) {\n      toastr.success('Note deleted');\n\n      if (callback) {\n        callback(status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Deleting note failed with status: ' + status);\n\n      if (callback) {\n        callback(status);\n      }\n    }).finally(function (data, status) {\n      loading.note = false;\n    });\n  }\n\n  return {\n    saveNewNote,\n    editNote,\n    deleteNote,\n    loading\n  };\n}]);","// Service for handling organizations\n\nangular.module('OrganizationService', []).factory('Organization', ['$http', 'toastr', '$rootScope', function ($http, toastr, $rootScope) {\n  const api_prefix = $rootScope.api_prefix;\n\n  function loadOrganizations(callback) {\n    $http.get(api_prefix + 'api/organizations').success(function (data, status) {\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Loading organizations failed with status: ' + status);\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function (data, status) {});\n  }\n\n  function loadFormOrganizations(callback) {\n    $http.get(api_prefix + 'api/organizations/form').success(function (data, status) {\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Loading form organizations failed with status: ' + status);\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function (data, status) {});\n  }\n\n  function loadQuestionOrganizations(callback) {\n    $http.get(api_prefix + 'api/organizations/question').success(function (data, status) {\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Loading question organizations failed with status: ' + status);\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function (data, status) {});\n  }\n\n  return {\n    loadOrganizations,\n    loadFormOrganizations,\n    loadQuestionOrganizations\n  };\n}]);","angular.module('QuestionService', []).factory('Questions', ['$http', '$rootScope', 'toastr', function ($http, $rootScope, toastr) {\n  const api_prefix = $rootScope.api_prefix;\n\n  const questions = [];\n  const question = {};\n  const answers = [];\n  const displayquestionsdata = [];\n  const displayquestionsanswerdata = [];\n  const displayQuestions = { value: false };\n  const questionsLoading = {\n    value: false,\n    answers: false,\n    notes: false,\n    answersSuccess: false,\n    displayQuestions: false,\n    question: false\n  };\n  // Question type can be chosen on question page\n  // type: saved in the DB, text: shown to user, value: used for the radio buttons, description: shown in answer choices area\n  const questionTypes = [{ type: 'YESNO', text: 'Kyllä/ei' }, { type: 'NUMBER', text: 'Lukuarvo' }, { type: 'TEXT', text: 'Vapaa teksti (yksirivinen)' }, { type: 'TEXTAREA', text: 'Vapaa teksti (useampi rivi)' }, { type: 'SELECT', text: 'Monivalinta (valitse yksi vastaus)' }, { type: 'CHECK', text: 'Monivalinta (valitse useampi vastaus)' }, { type: 'DATE', text: 'Päivämäärä' }, { type: 'SUBTITLE', text: 'Väliotsikko' }, { type: 'FEEDBACK', text: 'Välipalaute' }, { type: 'TERMINUS', text: 'Loppupalaute' }];\n\n  const questionTypesEN = [{ type: 'YESNO', text: 'Yes/No' }, { type: 'NUMBER', text: 'Numeric' }, { type: 'TEXT', text: 'Free Text (one line)' }, { type: 'TEXTAREA', text: 'Free Text (multiple lines)' }, { type: 'SELECT', text: 'Select (choose one answer)' }, { type: 'CHECK', text: 'Select (choose multiple answers)' }, { type: 'DATE', text: 'Date' }, { type: 'SUBTITLE', text: 'Subtitle' }, { type: 'FEEDBACK', text: 'Feedback' }, { type: 'TERMINUS', text: 'Terminus' }];\n\n  function loadCodeSystems(callback) {\n    $http.get(api_prefix + 'api/code-systems').success(function (data) {\n      callback(data);\n    }).error(function (_, status) {\n      toastr.error('Fetching data failed with status: ' + status);\n    });\n  }\n\n  function loadSystemCodes(systemId, callback) {\n    $http.get(api_prefix + 'api/code-systems/' + systemId + '/codes').success(function (data) {\n      callback(data.items);\n    }).error(function (_, status) {\n      toastr.error('Fetching data failed with status: ' + status);\n    });\n  }\n\n  function loadQuestions(callback) {\n    questionsLoading.value = true;\n    $http.get(api_prefix + 'api/questions').success(function (data, status) {\n      // Angular copy so that the change is noticed in Controller and 2-way binding works\n      angular.copy(data, questions);\n\n      if (callback) {\n        callback(status);\n      }\n    }).error(function (data, status) {\n      // Show error message to user\n      toastr.error('Fetching data failed with status: ' + status);\n\n      if (callback) {\n        callback(status);\n      }\n    }).finally(function () {\n      questionsLoading.value = false;\n    });\n  }\n\n  // Loads the question and its answers according to question ID\n  function loadQuestion(id, callback) {\n    questionsLoading.question = true;\n    $http.get(api_prefix + 'api/questions/' + id).success(function (data, status) {\n      angular.copy(data, question);\n\n      if (callback) {\n        callback(status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Fetching question data failed with status: ' + status);\n\n      if (callback) {\n        callback(status);\n      }\n    }).finally(function () {\n      questionsLoading.question = false;\n    });\n  }\n\n  // Extracts the language option from an options object\n  function getLanguage(options) {\n    return options && options.language || 'fi-FI';\n  }\n\n  // Loads all answer choices to question ID\n  function loadAnswers(id, callback, options) {\n    questionsLoading.answers = true;\n    $http.get(api_prefix + 'api/questions/' + id + '/answers?lang=' + getLanguage(options)).success(function (data, status) {\n      angular.copy(data, answers);\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Fetching answer data failed with status: ' + status);\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {\n      questionsLoading.answers = false;\n    });\n  }\n\n  // Saves a new question to the DB (not its answers)\n  function createQuestion(questionInfo, callback) {\n    questionInfo.CREATED_BY = $rootScope.loggedUser.id;\n\n    $http.post(api_prefix + 'api/questions', questionInfo).success(function (data, status) {\n      toastr.success('Question created');\n\n      if (callback) {\n        callback(status, data);\n      }\n    }).error(function (data, status) {\n      console.log('Error: cannot create new question.');\n      toastr.error('Creating question failed with status: ' + status);\n\n      if (callback) {\n        callback(status, data);\n      }\n    });\n  }\n\n  // Updates the question in DB\n  function updateQuestion(questionInfo, answerInfo, callback) {\n    const questionID = questionInfo.ID;\n    questionInfo.EDITED_BY = $rootScope.loggedUser.id;\n\n    // Update the question information\n    $http.put(api_prefix + 'api/questions/' + questionID, questionInfo).success(function (data, status) {\n      toastr.success('Question saved');\n\n      if (callback) {\n        callback(status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Updating question failed with status: ' + status);\n\n      if (callback) {\n        callback(status);\n      }\n    });\n  }\n\n  // Deletes a question from the database using DELETE with the question ID\n  function deleteQuestion(id, callback) {\n    $http.delete(api_prefix + 'api/questions/' + id).success(function (data, status) {\n      toastr.success('Question removed');\n\n      if (callback) {\n        callback(status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Deleting question failed with status: ' + status);\n\n      if (callback) {\n        callback(status);\n      }\n    });\n  }\n\n  function deleteQuestionCode(id, callback) {\n    $http.delete(api_prefix + 'api/questions/codes/' + id).success(callback).error(function (_, status) {\n      toastr.error('Removing question code failed with status: ' + status);\n    });\n  }\n\n  // Creates a new answer in DB for questionID\n  function createAnswer(questionID, answerInfo, callback) {\n    questionsLoading.answers = true;\n    $http.post(api_prefix + 'api/questions/' + questionID + '/answer', answerInfo).success(function (data, status) {\n      if (callback) {\n        callback(status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Saving answer failed with status: ' + status);\n\n      if (callback) {\n        callback(status);\n      }\n    }).finally(function () {\n      questionsLoading.answers = false;\n    });\n  }\n\n  // Deletes an answer from the database\n  function deleteAnswer(questionID, answerID, callback) {\n    questionsLoading.answers = true;\n    $http.delete(api_prefix + 'api/answers/' + answerID).success(function (data, status) {\n      if (callback) {\n        callback(status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Deleting answer failed with status: ' + status);\n\n      if (callback) {\n        callback(status);\n      }\n    }).finally(function () {\n      questionsLoading.answers = false;\n    });\n  }\n\n  // Updates answer to database\n  function editAnswer(answer, callback) {\n    questionsLoading.answers = true;\n    $http.put(api_prefix + 'api/answers/' + answer.ID, answer).success(function (data, status) {\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Editing answer failed with status: ' + status);\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {\n      questionsLoading.answers = false;\n    });\n  }\n\n  function deleteAnswerCode(id, callback) {\n    $http.delete(api_prefix + 'api/answers/codes/' + id).success(callback).error(function (_, status) {\n      toastr.error('Removing answer code failed with status: ' + status);\n    });\n  }\n\n  // Switches places between two answers\n  function switchAnswers(index1, index2, callback) {\n    questionsLoading.answers = true;\n    if (index1 >= 0 && index1 < answers.length && index2 >= 0 && index2 < answers.length) {\n      const temp = answers[index1];\n      answers[index1] = answers[index2];\n      answers[index2] = temp;\n\n      $http.put(api_prefix + 'api/answers/' + answers[index1].ID + '/switch/' + answers[index2].ID).success(function (data, status) {\n        if (callback) {\n          callback(status);\n        }\n      }).error(function (data, status) {\n        toastr.error('Editing answer failed with status: ' + status);\n\n        if (callback) {\n          callback(status);\n        }\n      }).finally(function () {\n        questionsLoading.answers = false;\n      });\n    } else {\n      // Invalid parameters\n      toastr.error('Editing answer failed with status: ' + status);\n      callback(500);\n      questionsLoading.answers = false;\n    }\n  }\n\n  // Returns names of forms that are linked to a question\n  function loadLinkedForms(questionID, callback) {\n    questionsLoading.value = true;\n    $http.get(api_prefix + 'api/questions/' + questionID + '/forms').success(function (data, status) {\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Loading linked forms failed with status: ' + status);\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {\n      questionsLoading.value = false;\n    });\n  }\n\n  // Loads all the notes in question by question id\n  function loadNotesInQuestion(questionID, callback) {\n    questionsLoading.notes = true;\n    $http.get(api_prefix + 'api/questions/' + questionID + '/notes').success(function (data, status) {\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      // Show error message to user\n      toastr.error('Fetching data failed with status: ' + status);\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {\n      questionsLoading.notes = false;\n    });\n  }\n\n  // Sets questions view hidden/displayed\n  function setStatus(status) {\n    if (status == 'show') {\n      displayQuestions.value = true;\n    } else {\n      displayQuestions.value = false;\n    }\n  }\n\n  // Loads all display rules to question ID and form ID\n  function loadDisplayRules(formid, questionid, SetLanguage, callback) {\n    questionsLoading.answers = true;\n    $http.get(api_prefix + 'api/display_question/' + formid + '/' + questionid).success(function (data, status) {\n      if (data) {\n        for (let i = 0; i < data.length; i++) {\n          if (data[i].TYPE == 'YESNO') {\n            if (data[i].VALUE == 'yes' && SetLanguage == 'FI') {\n              data[i].VALUE = 'kyllä';\n            }\n            if (data[i].VALUE == 'no' && SetLanguage == 'FI') {\n              data[i].VALUE = 'ei';\n            }\n          }\n          if (data[i].TYPE == 'TEXT' || data[i].TYPE == 'TEXTAREA') {\n            if (data[i].LOGIC == 'equals' && SetLanguage == 'FI') {\n              data[i].LOGIC = 'on yhtä kuin';\n            }\n            if (data[i].LOGIC == 'starts with' && SetLanguage == 'FI') {\n              data[i].LOGIC = 'alkaa tekstillä';\n            }\n            if (data[i].LOGIC == 'contains' && SetLanguage == 'FI') {\n              data[i].LOGIC = 'sisältää tekstin';\n            }\n          }\n          if (data[i].TYPE == 'NUMBER') {\n            if (data[i].LOGIC == 'equals' && SetLanguage == 'FI') {\n              data[i].LOGIC = 'yhtä kuin';\n            }\n            if (data[i].LOGIC == 'greater than' && SetLanguage == 'FI') {\n              data[i].LOGIC = 'suurempi kuin';\n            }\n            if (data[i].LOGIC == 'less than' && SetLanguage == 'FI') {\n              data[i].LOGIC = 'pienempi kuin';\n            }\n          }\n        }\n      }\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Fetching display logic failed with status: ' + status);\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {});\n  }\n\n  // Loads all display rules to question ID and form ID\n  function loadDisplayRulesAll(formid, SetLanguage, callback) {\n    questionsLoading.answers = true;\n    $http.get(api_prefix + 'api/display_question/' + formid).success(function (data, status) {\n      if (data) {\n        for (let i = 0; i < data.length; i++) {\n          if (data[i].TYPE == 'YESNO') {\n            if (data[i].VALUE == 'yes' && SetLanguage == 'FI') {\n              data[i].VALUE = 'kyllä';\n            }\n            if (data[i].VALUE == 'no' && SetLanguage == 'FI') {\n              data[i].VALUE = 'ei';\n            }\n          }\n          if (data[i].TYPE == 'TEXT' || data[i].TYPE == 'TEXTAREA') {\n            if (data[i].LOGIC == 'equals' && SetLanguage == 'FI') {\n              data[i].LOGIC = 'on yhtä kuin';\n            }\n            if (data[i].LOGIC == 'starts with' && SetLanguage == 'FI') {\n              data[i].LOGIC = 'alkaa tekstillä';\n            }\n            if (data[i].LOGIC == 'contains' && SetLanguage == 'FI') {\n              data[i].LOGIC = 'sisältää tekstin';\n            }\n          }\n          if (data[i].TYPE == 'NUMBER') {\n            if (data[i].LOGIC == 'equals' && SetLanguage == 'FI') {\n              data[i].LOGIC = 'yhtä kuin';\n            }\n            if (data[i].LOGIC == 'greater than' && SetLanguage == 'FI') {\n              data[i].LOGIC = 'suurempi kuin';\n            }\n            if (data[i].LOGIC == 'less than' && SetLanguage == 'FI') {\n              data[i].LOGIC = 'pienempi kuin';\n            }\n          }\n        }\n      }\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Fetching display logic failed with status: ' + status);\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {});\n  }\n\n  // Loads all display logic possibilities for question in a form. Data for questions.\n  function loadDisplayQuestionData(formid, questionid, callback) {\n    questionsLoading.displayQuestions = true;\n    $http.get(api_prefix + 'api/display_question_data/' + formid + '/' + questionid).success(function (data, status) {\n      // Angular copy so that the change is noticed in Controller and 2-way binding works\n      angular.copy(data, displayquestionsdata);\n      for (let i = 0; i < data.length; i++) {\n        loadDisplayQuestionAnswerData(displayquestionsdata[i].QUESTION_ID, displayquestionsdata, i);\n      }\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Fetching display logic questions failed with status: ' + status);\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {\n      questionsLoading.displayQuestions = false;\n    });\n  }\n\n  // Loads all display logic possibilities for question in a form. Data for answers.\n  function loadDisplayQuestionAnswerData(questionid, questiondata, index, callback) {\n    $http.get(api_prefix + 'api/display_question_answer_data/' + questionid).success(function (data, status) {\n      questiondata[index].answers = data;\n      if (callback) {\n        callback(data, status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Fetching display logic answers failed with status: ' + status);\n\n      if (callback) {\n        callback(data, status);\n      }\n    }).finally(function () {});\n  }\n\n  // Creates a new display rule for question if form.\n  function createDisplayRule(displayInfo, callback) {\n    $http.post(api_prefix + 'api/display_question', displayInfo).success(function (data, status) {\n      if (callback) {\n        callback(status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Saving display logic failed with status: ' + status);\n\n      if (callback) {\n        callback(status);\n      }\n    }).finally(function () {});\n  }\n\n  // Saves operator to existing display rule\n  function saveDisplayRuleOperator(operator, operatorid, callback) {\n    $http.post(api_prefix + 'api/display_question_operator/' + operatorid, operator).success(function (data, status) {\n      if (callback) {\n        callback(status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Saving operator for display logic failed with status: ' + status);\n\n      if (callback) {\n        callback(status);\n      }\n    }).finally(function () {});\n  }\n\n  // Deletes display rule from the database\n  function removeDisplayLogic(logicID, callback) {\n    $http.delete(api_prefix + 'api/display_question/' + logicID).success(function (data, status) {\n      if (callback) {\n        callback(status);\n      }\n    }).error(function (data, status) {\n      toastr.error('Removing display logic failed with status: ' + status);\n\n      if (callback) {\n        callback(status);\n      }\n    }).finally(function () {});\n  }\n\n  return {\n    getQuestions: questions,\n    getQuestion: question,\n    getQuestionTypes: questionTypes,\n    getQuestionTypesEN: questionTypesEN,\n    getAnswers: answers,\n    setStatus,\n    getDisplayStatus: displayQuestions,\n    loadCodeSystems,\n    loadSystemCodes,\n    loadQuestions,\n    loadQuestion,\n    loadAnswers,\n    createQuestion,\n    updateQuestion,\n    deleteQuestion,\n    deleteQuestionCode,\n    deleteAnswer,\n    deleteAnswerCode,\n    questionsLoading,\n    createAnswer,\n    switchAnswers,\n    loadLinkedForms,\n    loadNotesInQuestion,\n    loadDisplayRules,\n    loadDisplayRulesAll,\n    loadDisplayQuestionData,\n    getDisplayQuestions: displayquestionsdata,\n    loadDisplayQuestionAnswerData,\n    getDisplayAnswerQuestions: displayquestionsanswerdata,\n    createDisplayRule,\n    saveDisplayRuleOperator,\n    removeDisplayLogic,\n    editAnswer\n  };\n}]);","angular.module('AppRoutes', ['ui.router']).config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n  $urlRouterProvider.otherwise('/');\n  // Use html5mode so the #-character is not shown in browser url\n  $locationProvider.html5Mode(true);\n\n  $stateProvider.state('login', {\n    // Login page\n    url: '/login',\n    views: {\n      '': { templateUrl: 'view/login-main-view.html' },\n\n      'header@login': {\n        templateUrl: 'view/header-view.html',\n        controller: 'HeaderController'\n      },\n\n      'login@login': {\n        templateUrl: 'view/login-view.html',\n        controller: 'LoginController'\n      }\n    }\n  })\n  // secured is an abstract state that encapsulates all states that require authentication\n  // this state resolves the user authentication before a child state is shown\n  .state('secured', {\n    abstract: true,\n    // This template is important because the child states views\n    // are put in this ui-view after authentication is resolved\n    template: '<div ui-view></div>',\n    resolve: {\n      auth: function ($http, $state, $rootScope, $location) {\n        return $http.get($rootScope.api_prefix + 'checksession?url=' + $location.url()).then(function (res) {\n          // User found\n          $rootScope.loggedUser = res.data;\n          $rootScope.loggedIn = true;\n        }, function (res) {\n          // No user logged in, redirect to login page\n          $rootScope.loggedUser = null;\n          $rootScope.loggedIn = false;\n          $state.go('login');\n        });\n      }\n    }\n  }).state('secured.main', {\n    url: '/',\n    views: {\n      '': { templateUrl: 'view/mainpage-view.html' },\n\n      'header@secured.main': {\n        templateUrl: 'view/header-view.html',\n        controller: 'HeaderController'\n      },\n\n      'forms@secured.main': {\n        templateUrl: 'view/form-list-view.html',\n        controller: 'FormListController'\n      },\n\n      'questions@secured.main': {\n        templateUrl: 'view/question-list-view.html',\n        controller: 'QuestionListController'\n      }\n    }\n  }).state('secured.questionDetails', {\n    url: '/question/:questionid',\n    views: {\n      '': { templateUrl: 'view/question-details-page-view.html' },\n\n      'header@secured.questionDetails': {\n        templateUrl: 'view/header-view.html',\n        controller: 'HeaderController'\n      },\n\n      'question@secured.questionDetails': {\n        templateUrl: 'view/question-details-view.html',\n        controller: 'QuestionDetailsController'\n      },\n\n      'questionNotes@secured.questionDetails': {\n        templateUrl: 'view/note-feed-view.html',\n        controller: 'NoteFeedController'\n      }\n    }\n  }).state('secured.formDetailsPage', {\n    url: '/form/:formid',\n    views: {\n      '': { templateUrl: 'view/form-details-page-view.html' },\n\n      'header@secured.formDetailsPage': {\n        templateUrl: 'view/header-view.html',\n        controller: 'HeaderController'\n      },\n\n      'formDetails@secured.formDetailsPage': {\n        templateUrl: 'view/form-details-view.html',\n        controller: 'FormDetailsController'\n      },\n\n      'formQuestions@secured.formDetailsPage': {\n        templateUrl: 'view/form-questions-view.html',\n        controller: 'FormQuestionsController'\n      },\n\n      'formNotes@secured.formDetailsPage': {\n        templateUrl: 'view/note-feed-view.html',\n        controller: 'NoteFeedController'\n      }\n    }\n  }).state('secured.formPreview', {\n    url: '/formpreview/:formid',\n    views: {\n      '': {\n        templateUrl: 'view/form-preview-view.html',\n        controller: 'FormPreviewController'\n      }\n    }\n  }).state('secured.newFormPage', {\n    url: '/newform',\n    views: {\n      '': { templateUrl: 'view/form-details-page-view.html' },\n\n      'header@secured.newFormPage': {\n        templateUrl: 'view/header-view.html',\n        controller: 'HeaderController'\n      },\n\n      'formDetails@secured.newFormPage': {\n        templateUrl: 'view/new-form-view.html',\n        controller: 'NewFormController'\n      }\n    }\n  }).state('secured.newQuestionPage', {\n    url: '/newquestion',\n    views: {\n      '': { templateUrl: 'view/question-details-page-view.html' },\n\n      'header@secured.newQuestionPage': {\n        templateUrl: 'view/header-view.html',\n        controller: 'HeaderController'\n      },\n\n      'question@secured.newQuestionPage': {\n        templateUrl: 'view/new-question-view.html',\n        controller: 'NewQuestionController'\n      }\n    }\n  });\n}]);","// eslint-disable-next-line\nvar prefix = \"/\";\n\nangular.module('form_app', ['AppRoutes',\n\n// Config\n'app.config',\n\n// libs\n'ngAnimate', 'ngTagsInput', 'pascalprecht.translate', 'textAngular', 'toastr', 'angular-loading-bar', 'ds.objectDiff',\n\n// Controllers\n'ConfirmCtrl', 'HeaderCtrl', 'LoginCtrl', 'FormListCtrl', 'QuestionListCtrl', 'QuestionDetailsCtrl', 'FormDetailsCtrl', 'FormPreviewCtrl', 'NewQuestionCtrl', 'FormQuestionsCtrl', 'LinkQuestionModalCtrl', 'NewQuestionModalCtrl', 'ModifyQuestionDisplayLogicModalCtrl', 'ModifyFormOrganizationsCtrl', 'ModifyQuestionOrganizationsCtrl', 'NoteFeedCtrl', 'NoteModalCtrl', 'DeleteConfirmationModalCtrl', 'NewFormCtrl', 'PublishVersionCommentCtrl', 'PublishVersionCommentDetailsCtrl',\n\n// Directives\n'ConfirmDirective', 'ConvertDirective',\n\n// Services\n'FormService', 'QuestionService', 'NoteService', 'EbmedsService', 'OrganizationService']).run(function (api_prefix, logout_page, userinfo_page, oda_preview_url, $rootScope) {\n  $rootScope.api_prefix = api_prefix;\n  $rootScope.logout_page = logout_page;\n  $rootScope.userinfo_page = userinfo_page;\n  $rootScope.oda_preview_url = oda_preview_url;\n}).config(function (paginationTemplateProvider) {\n  paginationTemplateProvider.setPath(prefix + 'view/dirPagination.tpl.html');\n})\n// Initialize the translations\n// Angular-translate library is used for site translations\n.config(['$translateProvider', function ($translateProvider) {\n  $translateProvider.useLoader('translationLoader', {});\n  $translateProvider.use('FI');\n  $translateProvider.useSanitizeValueStrategy('escaped');\n}])\n// Used with TranslateProvider to load JSON language files\n.factory('translationLoader', function ($http, $q) {\n  return function (options) {\n    const deferred = $q.defer();\n\n    $http({\n      method: 'GET',\n      url: prefix + 'lang/locale-' + options.key + '.json'\n    }).success(function (data) {\n      deferred.resolve(data);\n    }).error(function () {\n      deferred.reject(options.key);\n    });\n    return deferred.promise;\n  };\n})\n// Initialize an HTTP interceptor that moves the user to the login page\n// if any HTTP request returns with a 401 unauthorized status\n.config(['$httpProvider', function ($httpProvider) {\n  // This is accomplished by pushing a new interceptor to the httpProvider\n  $httpProvider.interceptors.push(function ($timeout, $q, $injector) {\n    let $http;\n    let $state;\n\n    // this trick must be done so that we don't receive\n    // `Uncaught Error: [$injector:cdep] Circular dependency found`\n    $timeout(function () {\n      $http = $injector.get('$http');\n      $state = $injector.get('$state');\n    });\n\n    // IE cache issue starts\n    // Initialize get if not there\n    if (!$httpProvider.defaults.headers.get) {\n      $httpProvider.defaults.headers.get = {};\n    }\n\n    // Answer edited to include suggestions from comments\n    // because previous version of code introduced browser-related errors\n\n    // disable IE ajax request caching\n    $httpProvider.defaults.headers.get['If-Modified-Since'] = 'Mon, 26 Jul 1997 05:00:00 GMT';\n    // extra\n    $httpProvider.defaults.headers.get['Cache-Control'] = 'no-cache';\n    $httpProvider.defaults.headers.get.Pragma = 'no-cache';\n    // IE cache issue ends\n\n    return {\n      responseError(rejection) {\n        const deferred = $q.defer();\n\n        // In the case of a 401 status, throw the user to the login page if not already there\n        if (rejection.status === 401 && $state.includes('login') === false) {\n          $state.go('login');\n        }\n\n        deferred.reject(rejection);\n        return deferred.promise;\n      }\n    };\n  });\n}])\n// Custom settings for the toastr library\n.config(function (toastrConfig) {\n  angular.extend(toastrConfig, {\n    autoDismiss: true,\n    positionClass: 'toast-bottom-right',\n    maxOpened: 2,\n    newestOnTop: true,\n    progressBar: true,\n    timeOut: 5000,\n    closeButton: true\n  });\n});"]}