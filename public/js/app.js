function _toConsumableArray(e) { if (Array.isArray(e)) { for (var o = 0, t = Array(e.length); o < e.length; o++)t[o] = e[o]; return t } return Array.from(e) } angular.module("FormDetailsCtrl", ["angularUtils.directives.dirPagination", "ui.bootstrap"]).controller("FormDetailsController", ["$scope", "$stateParams", "Forms", "$window", "$filter", "$translate", "$rootScope", "$location", "$modal", "Organization", "toastr", function (e, o, t, n, i, s, r, a, l, u, c) { e.formID = o.formid, e.readonlymode = !0, e.publishDraft = !0, e.readonlymodePublish = !0, e.odaerror = "", e.publishModalForm = { id: null, comment: "" }; let f = []; const d = i("translate"); e.disabled = !1, e.disabled2 = !0, e.form = { ID: e.formID }, e.oldForm = { ID: e.formID }, e.categories = [{ categoryName: "Oirearviokysely", categoryValue: "symptom" }, { categoryName: "Terveystarkastus", categoryValue: "health-check" }, { categoryName: "PitkÃ¤aikaissairaudet", categoryValue: "chronic-disease" }], e.disabledValidation = !0, e.disabledApproval = !0, e.showOdaPreview = !1, e.showFocalPreview = !1, e.languages = [], e.focalUrl = "", t.loadFormByID(e.formID, function (o, t) { const n = o.STATUS; u.loadFormOrganizations(function (o, t) { e.organizationList = "", e.form.ORGANIZATIONS = []; for (let t = 0; o.length > t; t++)o[t].FORM_ID == e.formID && (e.form.ORGANIZATIONS.push(o[t]), e.organizationList.length > 0 && (e.organizationList += ", "), e.organizationList += o[t].NAME, "81" === o[t].ORG_ID && (e.showOdaPreview = !0), "105" === o[t].ORG_ID && (e.showFocalPreview = !0, e.focalUrl = ""), r.loggedUser.organization == o[t].ORG_ID && 2 == r.loggedUser.rightlevel && (e.readonlymode = !1)); f = e.form.ORGANIZATIONS, r.loggedUser && 3 == r.loggedUser.rightlevel && (e.readonlymode = !1, "Production" == n && (e.readonlymodePublish = !1), "Draft" == n && f.find(function (e) { return "FOCAL" === e.NAME }) && (e.publishDraft = !1)), e.oldForm.ORGANIZATIONS = f }), e.form = o; const i = "https://forms.ebmedscloud.org/questionnaire"; e.previewLink = { url: i + "/" + (o.SLUG || "<path>") }, e.updatePreviewLink = function (o) { e.previewLink.url = i + "/" + o }, e.oldForm = angular.copy(o), e.rulelink = "", e.rulelinkExists = !1, e.form.URL_LINK && e.form.URL_LINK.length > 0 && ("http://" == e.form.URL_LINK.substr(0, 7) || "https://" == e.form.URL_LINK.substr(0, 8) ? (e.rulelink = e.form.URL_LINK, e.rulelinkExists = !0) : (e.rulelink = "http://" + e.form.URL_LINK, e.rulelinkExists = !0)), e.formDetailsTitle = d("FORM_TITLE_1") + ' "' + e.form.NAME + '" ' + d("FORM_TITLE_2"); const s = e.form.STATUS; "Draft" == s && (e.statuses = [{ statusName: d("DRAFT"), statusValue: "Draft" }, { statusName: d("VALIDATION_PENDING"), statusValue: "Validation Pending" }]), "Validation Pending" == s && (e.statuses = [{ statusName: d("VALIDATION_PENDING"), statusValue: "Validation Pending" }, { statusName: d("PRODUCTION"), statusValue: "Production" }, { statusName: d("DISCARDED"), statusValue: "Discarded" }]), "Production" == s && (e.statuses = [{ statusName: d("PRODUCTION"), statusValue: "Production" }, { statusName: d("DRAFT"), statusValue: "Draft" }, { statusName: d("DISCARDED"), statusValue: "Discarded" }]), "Discarded" == s && (e.statuses = [{ statusName: d("DISCARDED"), statusValue: "Discarded" }, { statusName: d("DRAFT"), statusValue: "Draft" }]), e.form.VALIDATED && (e.validated = !0) }), e.editOrganizations = function (o) { l.open({ animation: !0, size: "lg", templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/modifyFormOrganizationsModal.html", backdrop: "static", controller: "ModifyFormOrganizationsController", resolve: { formData: () => o } }).result.then(function (o) { e.form = o, e.organizationList = ""; for (let o = 0; e.form.ORGANIZATIONS.length > o; o++)e.organizationList.length > 0 && (e.organizationList += ", "), e.organizationList += e.form.ORGANIZATIONS[o].NAME }) }, t.loadPublishCommentByFormId(o.formid, function (o) { o.length > 0 ? e.languages = o[0].languages : e.languages = ["en-GB", "fi-FI", "sv-FI"] }); const g = function () { t.PreviewFormVersion(e.formID, e.form.SCRIPT_ID, function (o, t) { let i = ""; if (o.odaerror) { for (let e = 0; o.odaerror.length > e; e++)o.odaerror[e].location ? i += o.odaerror[e].location[0] + ":\n" + o.odaerror[e].diagnostics + "\n\n" : i += "ODA2 warning/error:\n" + o.odaerror[e].diagnostics + "\n\n"; e.odaerror = d("ODA_ERROR") + i } o.oda_preview_id && (n.location.href = r.oda_preview_url + e.formID + "?lang=" + r.previewLanguage.displayLanguage.toLowerCase()) }, { language: r.previewLanguage.dataLanguage }) }, m = function () { t.ValidateFormVersion(e.formID, e.form.SCRIPT_ID, function (o, t) { let n = ""; if (o.issues) { for (let e = 0; o.issues.length > e; e++)o.issues[e] ? n += o.issues[e].diagnostics + "\n\n" : n += "ODA2 warning/error:\n" + o.issues[e].diagnostics + "\n\n"; e.odaerror = d("ODA_ERROR") + n } else e.odaerror = "" }, { language: r.previewLanguage.dataLanguage }) }, I = function () { a.path("/formpreview/" + e.formID) }; e.selectPreviewLang = function (e) { const o = { FI: { displayLanguage: "FI", dataLanguage: "fi-FI" }, SV: { displayLanguage: "SV", dataLanguage: "sv-FI" }, EN: { displayLanguage: "EN", dataLanguage: "en-GB" } }; r.previewLanguage = o[e] || o.FI }, e.handlePreview = function (o) { if (t.hasChanged(e.form, e.oldForm)) return void c.error("Form modified. You must save form before previewing."); ({ preview: I, previewOda: g, validate: m })[o]() }, e.handlePublish = function () { t.hasChanged(e.form, e.oldForm) ? c.error("Form modified. You must save form before publishing.") : r.questionsWithIllegalDisplayRules.length > 0 ? c.error("Illegal display logic AND/OR combinations. Cannot publish.") : l.open({ animation: !0, size: "lg", templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/publish-version-comment-modal.html", controller: "PublishVersionCommentController", backdrop: "static", resolve: { publishModalForm: function () { return e.publishModalForm }, languages: function () { return e.languages } } }).result.then(function (o) { "publish" === o.action && t.PublishSaveFormVersion(e.formID, e.form.SCRIPT_ID, { comment: o.payload.comment, languages: o.payload.languages, status: "Production" }, function (o, t) { if (!o || !o.error) { if (o) { const t = o.odaerror.filter(function (e) { return "error" === e.severity }).reduce(function (e, o) { return o.location ? e + " " + o.location[0] + ":\n " + o.diagnostics + "\n\n" : e + " ODA2 error:\n " + o.diagnostics + "\n\n" }, ""); e.odaerror = "" + d("ODA_ERROR") + t } r.$emit("saved-publish-comment") } }) }) }, e.handleSave = function () { console.log("ðŸš€ ~ file: formDetailsController.js:367 ~ Forms.editForm ~ $scope.form:", e.form), !1 !== e.formForm.$valid ? t.hasChanged(e.form, e.oldForm) ? (t.editForm(e.form, function (o, t) { t >= 400 ? c.error("Saving form was unsuccessful (status: " + t + ")") : e.oldForm = angular.copy(e.form) }), t.PublishSaveFormVersion(e.formID, e.form.SCRIPT_ID, { status: "draft", comment: null, languages: { "fi-FI": !0 } }, function (e, o) { e && e.error || r.$emit("saved-publish-comment") })) : c.success("Form already up-to-date - no saving.") : c.error("Form contains errors - cannot proceed") }, e.loading = t.loading, e.goBack = function () { if (t.hasChanged(e.form, e.oldForm)) { l.open({ size: "sm", templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/leave-page-modal.html", backdrop: "static", controller: ["$scope", "$modalInstance", function (e, o) { e.ok = function () { o.close() }, e.cancel = function () { o.dismiss("cancel") } }] }).result.then(function () { window.history.back() }) } else window.history.back() } }]), angular.module("FormListCtrl", ["angularUtils.directives.dirPagination", "ui.bootstrap"]).controller("FormListController", ["$scope", "$http", "$rootScope", "$modal", "Forms", "Questions", "$filter", "$translate", "Organization", function (e, o, t, n, i, s, r, a, l) { e.currentPage = 1, e.formPageSize = 50, e.displayForms = i.getDisplayStatus; let u = !1; e.sortForms = { column: "NAME", descending: !1 }, e.readonlymode = !0, t.loggedUser && (2 != t.loggedUser.rightlevel && 3 != t.loggedUser.rightlevel || (e.readonlymode = !1)), e.forms = i.getForms, e.loading = i.loading, i.loadForms(function (o, t) { l.loadFormOrganizations(function (o, t) { e.formsOrganizations = o, u = !0 }) }), e.printOrganizations = function (o) { if (1 == u) { o.ORGANIZATIONS = ""; for (let t = 0; e.formsOrganizations.length > t; t++)o.ID == e.formsOrganizations[t].FORM_ID && (o.ORGANIZATIONS.length > 0 && (o.ORGANIZATIONS += ", "), o.ORGANIZATIONS += e.formsOrganizations[t].NAME); return o.readonlydelete = !0, 2 == t.loggedUser.rightlevel && -1 != o.ORGANIZATIONS.indexOf(t.loggedUser.organizationName) && (o.readonlydelete = !1), 3 == t.loggedUser.rightlevel && (o.readonlydelete = !1), o.ORGANIZATIONS } }; const c = r("translate"); e.switchView = function (e) { switch (e) { case "questions": i.setStatus("hide"), s.setStatus("show") } }, e.changeSorting = function (o) { e.sortForms.column == o ? e.sortForms.descending = !e.sortForms.descending : (e.sortForms.column = o, e.sortForms.descending = !1) }, e.getIcon = function (o) { if (e.sortForms.column == o) return e.sortForms.descending ? "glyphicon-triangle-bottom" : "glyphicon-triangle-top" }, e.deleteForm = function (o) { const t = e.forms.find(function (e) { return e.ID === o }); n.open({ size: "lg", templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/deleteConfirmationModal.html", backdrop: "static", controller: "DeleteConfirmationModalController", resolve: { confirmationMessage: () => c("FORM_DELETE_CONFIRM") + ' "' + t.NAME + '"?' } }).result.then(function () { i.deleteForm(o, function (e, o) { i.loadForms() }) }) } }]), angular.module("FormPreviewCtrl", ["ui.bootstrap"]).controller("FormPreviewController", ["$scope", "$q", "$stateParams", "$location", "Forms", "Questions", "$filter", "$translate", "Ebmeds", "$rootScope", function (e, o, t, n, i, s, r, a, l, u) { function c(e) { if ("string" == typeof e) { return e.toLowerCase() } return e } e.PreviewLoaded = !1, e.useLiveMode = !0, e.calendarOptions = { "starting-day": "1" }, e.opened = [], e.openStartDateCalendar = function (o, t) { o.preventDefault(), o.stopPropagation(), e.opened[t] = !0 }, e.formID = t.formid, e.restoreLanguage = a.use(), e.previewLanguage = u.previewLanguage || { displayLanguage: "FI", dataLanguage: "fi-FI" }, a.use(e.previewLanguage.displayLanguage); const f = r("translate"); e.$on("$destroy", function () { a.use(e.restoreLanguage) }), e.detailsForm = function (o) { n.path("/form/" + e.formID).replace() }, e.form = {}, i.loadFormByID(e.formID, function (o, t) { e.form = o, e.form.INTRODUCTION ? e.form.INTRODUCTION = e.form.INTRODUCTION.replace(/<a href=/g, '<a target="_blank" href=') : e.form.INTRODUCTION = f("NOT_FOUND_INTRODUCTION") }, { language: e.previewLanguage.dataLanguage }), e.questions = [], i.loadQuestionsInForm(e.formID, function (o, t) { e.questions = o, e.questions.forEach(function (e) { e.QUESTIONTEXT ? e.QUESTIONTEXT = e.QUESTIONTEXT.replace("<a href=", '<a target="_blank" href=') : "SUBTITLE" !== e.TYPE && (e.QUESTIONTEXT = f("NOT_FOUND_QUESTION_TEXT")) }), e.statuses = [{ statusName: f("DRAFT"), statusValue: "Draft" }, { statusName: f("VALIDATION_PENDING"), statusValue: "Validation Pending" }, { statusName: f("PRODUCTION"), statusValue: "Production" }, { statusName: f("DISCARDED"), statusValue: "Discarded" }], e.questions.forEach(function (o) { "CHECK" == o.TYPE || "SELECT" == o.TYPE || "NUMBER" == o.TYPE ? s.loadAnswers(o.ID, function (t, n) { o.ANSWERS = t, o.FORMANSWER = "", e.questions.forEach(function (e) { e.ANSWERS && e.ANSWERS.forEach(function (o, t) { o.ANSWER_TEXT || (o.ANSWER_TEXT = f("NOT_FOUND_ANSWER_TEXT")), o.FORMANSWER = ""; var n = "CHECK" == e.TYPE || "SELECT" == e.TYPE, i = "Y" == e.NONE_ANSWER, s = t == e.ANSWERS.length - 1, r = 0 === e.ANSWERS.filter(function (e) { return -1 === e.ID }).length; n && i && s && r && e.ANSWERS.push({ ANSWER_TEXT: f("NONE_OF_THE_ABOVE"), ID: -1 }) }) }) }, { language: e.previewLanguage.dataLanguage }) : (o.ANSWERS = [], o.FORMANSWER = "") }), s.loadDisplayRulesAll(e.formID, "EN", function (o, t) { e.questions.forEach(function (e) { e.NUMBEROFDISPLAYRULES = 0, e.DISPLAYRULES = []; for (let t = 0; o.length > t; t++)e.ID == o[t].QUESTION_ID && (e.DISPLAYRULES.push(o[t]), e.NUMBEROFDISPLAYRULES++) }) }) }, { language: e.previewLanguage.dataLanguage }); let d = "", g = "", m = !1; e.$watch("questions", function (o) { g = "", e.questions.forEach(function (o) { g = "", m = !1, o.DISPLAYRULES && o.DISPLAYRULES.forEach(function (t, n) { 0 === n && o.DISPLAYRULES.length > 1 && (t.OPERATOR = o.DISPLAYRULES[1].OPERATOR), e.questions.forEach(function (e) { "CHECK" !== t.TYPE && "SELECT" !== t.TYPE || (t.VALUE = t.ANSWER_ID), null == e.FORMANSWER && (e.FORMANSWER = ""), parseInt(t.ANSWER_QUESTION_ID, 10) === parseInt(e.ID, 10) && (d = "", "contains" !== t.LOGIC && "CHECK" !== t.TYPE || (d = !1, c(e.FORMANSWER).indexOf(c(t.VALUE)) > -1 && (d = !0)), "starts with" === t.LOGIC && (d = 0 === c(e.FORMANSWER).indexOf(c(t.VALUE))), "SELECT" === t.TYPE && (e.FORMANSWER = parseInt(e.FORMANSWER, 10)), (c(e.FORMANSWER) === c(t.VALUE) && ("equals" === t.LOGIC || "YESNO" === t.TYPE || "SELECT" === t.TYPE) || Number(e.FORMANSWER) > Number(t.VALUE) && "greater than" === t.LOGIC || "" !== e.FORMANSWER && Number(e.FORMANSWER) < Number(t.VALUE) && "less than" === t.LOGIC || !0 === d) && !0 !== e.FORMHIDE ? (t.OPERATOR && "OR" === t.OPERATOR && (m = !0, o.FORMHIDE = !1), o.FORMHIDE ? !0 !== g && (o.FORMHIDE = !1) : o.FORMHIDE = !1) : (o.FORMHIDE = !0, g = !0, !0 === m && (g = !1, o.FORMHIDE = !1))) }) }) }), e.PreviewLoaded = !0 }, !0), e.CheckClick = function (o, t) { let n = !0; for (let s = 0; e.questions.length > s; s++)if (e.questions[s].ID == o.ID) if (e.questions[s].FORMANSWER.indexOf(";" + t.ID + ";") > -1) { if (e.questions[s].FORMANSWER = e.questions[s].FORMANSWER.replace(";" + t.ID + ";", ""), -1 == t.ID) for (var i = 0; e.questions[s].ANSWERS.length > i; i++)e.questions[s].ANSWERS[i].READONLY = !1; for (i = 0; e.questions[s].ANSWERS.length > i; i++)1 == e.questions[s].ANSWERS[i].FORMANSWER && (n = !1); if (1 == n) for (i = 0; e.questions[s].ANSWERS.length > i; i++)-1 == e.questions[s].ANSWERS[i].ID && (e.questions[s].ANSWERS[i].FORMANSWER = !0, e.questions[s].FORMANSWER = ";" + e.questions[s].ANSWERS[i].ID + ";") } else if (-1 == t.ID) { for (i = 0; e.questions[s].ANSWERS.length > i; i++)-1 != e.questions[s].ANSWERS[i].ID && (e.questions[s].ANSWERS[i].FORMANSWER = !1, e.questions[s].ANSWERS[i].READONLY = !1); e.questions[s].FORMANSWER = ";" + t.ID + ";" } else { e.questions[s].FORMANSWER += ";" + t.ID + ";"; for (i = 0; e.questions[s].ANSWERS.length > i; i++)-1 == e.questions[s].ANSWERS[i].ID && (e.questions[s].ANSWERS[i].FORMANSWER = !1, e.questions[s].FORMANSWER = e.questions[s].FORMANSWER.replace(";" + e.questions[s].ANSWERS[i].ID + ";", "")) } }, e.Units = [{ value: 1, text: "kg" }, { value: 2, text: "cm" }, { value: 3, text: "mg" }, { value: 4, text: "C" }, { value: 5, text: f("UNITS") }, { value: 6, text: f("YEAR") }, { value: 7, text: f("DAY") }, { value: 8, text: "mmHg" }, { value: 9, text: "h" }, { value: 10, text: "mmol/l" }], e.sendtoEBMEDS = function (o, t) { e.feedbackFromEBMeDSResponse = "", e.nofeedback = !1, e.showrequest = !1, e.showresponse = !1, o.useLiveMode = e.useLiveMode; for (let o = 0; t.length > o; o++) { if ("SELECT" == t[o].TYPE) for (let e = 0; t[o].ANSWERS.length > e; e++)t[o].FORMANSWER == t[o].ANSWERS[e].ID && (t[o].FORMANSWER = t[o].ANSWERS[e].ID.toString(), t[o].ANSWERS[e].ANSWER_VALUE ? t[o].ANSWER_VALUE = t[o].ANSWERS[e].ANSWER_VALUE.toString() : t[o].ANSWER_VALUE = "", e = t[o].ANSWERS.length); if ("NUMBER" == t[o].TYPE && t[o].ANSWERS[0]) { const n = e.Units.find(function (e) { return e.value === t[o].ANSWERS[0].UNIT_ID }); n && (t[o].ANSWERS[0].UNIT_ID = n.text) } } e.formatRecommendation = function (e) { return e.text + " (Status: " + e.status + ")" }, o.language = e.previewLanguage.dataLanguage, o.questions = t, l.callEBMeDS(o, function (o) { var t; e.viewFeedback = (t = o.responseBody.questionnaire) ? t.reduce(function (e, o) { return o.recommendations.forEach(function (o) { e.push({ status: o.status, text: o.texts.patient || o.texts.practitioner }) }), e }, []) : [], e.nofeedback = 0 === e.viewFeedback.length, e.feedbackFromEBMeDSResponse = JSON.stringify(o.responseBody, void 0, 2), e.feedbackFromEBMeDSRequest = JSON.stringify(o.requestBody, void 0, 2), e.showresponse = !0, e.showrequest = !0, n() }); const n = function () { for (let e = 0; t.length > e; e++)if ("SELECT" == t[e].TYPE) for (let o = 0; t[e].ANSWERS.length > o; o++)t[e].FORMANSWER == t[e].ANSWERS[o].ID && (t[e].FORMANSWER = t[e].ANSWERS[o].ID, t[e].ANSWER_VALUE = t[e].ANSWERS[o].ANSWER_VALUE, o = t[e].ANSWERS.length); document.getElementById("focusButton").scrollIntoView(), $("html, body").animate({ scrollTop: $("#focusButton").offset().top }, 500) } } }]), angular.module("FormQuestionsCtrl", ["angularUtils.directives.dirPagination", "ui.bootstrap"]).controller("FormQuestionsController", ["$rootScope", "$scope", "$stateParams", "Forms", "$modal", "Questions", "$http", "toastr", "$filter", "$translate", "Organization", function (e, o, t, n, i, s, r, a, l, u, c) { const f = t.formid, d = l("translate"); o.questions = [], o.groupQuestions = [], o.disabled = !1, o.disabled2 = !0, o.loading = n.loading, o.selectedQuestion = { ID: void 0 }, o.readonlymode = !0, o.showSortControls = !1, e.questionsWithIllegalDisplayRules = [], e.loggedUser && 3 == e.loggedUser.rightlevel && (o.readonlymode = !1), "FI" == u.use() && (o.questionTypes = s.getQuestionTypes), "EN" == u.use() && (o.questionTypes = s.getQuestionTypesEN); const g = function (o) { const t = e.questionsWithIllegalDisplayRules.findIndex(function (e) { return e.ID === o.ID }); if (t >= 0 && e.questionsWithIllegalDisplayRules.splice(t, 1), o.DISPLAYRULES.length <= 1) return; const n = o.DISPLAYRULES[1].OPERATOR; o.DISPLAYRULES.slice(1).some(function (e) { return e.OPERATOR !== n }) && e.questionsWithIllegalDisplayRules.push(o) }, m = function () { e.questionsWithIllegalDisplayRules = [], n.loadQuestionsInForm(f, function (t, n) { o.questions = t, o.groupQuestions = t.filter(function (e) { return "SUBTITLE" === e.TYPE }), c.loadFormOrganizations(function (t, n) { o.organizationList = "", o.ORGANIZATIONS = (t || []).filter(function (e) { return e.FORM_ID === f }), o.organizationList = o.ORGANIZATIONS.map(function (e) { return e.NAME }).join(", "), 2 === e.loggedUser.rightlevel && o.ORGANIZATIONS.find(function (o) { return o.ORG_ID === e.loggedUser.organization }) && (o.readonlymode = !1) }), s.loadDisplayRulesAll(f, u.use(), function (e, t) { o.questions.forEach(function (o) { o.DISPLAYRULES = (e || []).filter(function (e) { return e.QUESTION_ID === o.ID }), g(o) }) }), o.questions.forEach(function (e) { "CHECK" == e.TYPE || "SELECT" == e.TYPE || "NUMBER" == e.TYPE ? s.loadAnswers(e.ID, function (o, t) { e.ANSWERS = o, "Y" != e.NONE_ANSWER || "SELECT" != e.TYPE && "CHECK" != e.TYPE || e.ANSWERS.push({ ID: -1, ANSWER_TEXT: d("NONE_OF_THE_ABOVE") }) }) : e.ANSWERS = [] }) }) }; m(), o.setOptional = function (e) { e.FORM_ID = f, e.OPTIONAL = "1" === e.OPTIONAL ? "0" : "1", n.setLinkedQuestionOptions(e) }, o.setReadOnly = function (e) { e.FORM_ID = f, e.READ_ONLY = "1" === e.READ_ONLY ? "0" : "1", n.setLinkedQuestionOptions(e) }, o.expandAll = function () { for (let e = 0; e < o.questions.length; e++)o.questions[e].expanded = !0 }, o.collapseAll = function () { for (let e = 0; e < o.questions.length; e++)o.questions[e].expanded = !1 }, o.showQuestionAndDisplayLogic = function (e) { e.expanded = !e.expanded }, o.toggleSortControl = function () { o.showSortControls = !o.showSortControls }; const I = function (e, t) { const i = [o.questions[e], o.questions[t]]; n.swapQuestionPositionsInForm(f, i[0].ID, i[1].ID, function () { const n = [i[0].POSITION, i[1].POSITION]; i[0].POSITION = n[1], i[1].POSITION = n[0], o.questions[e] = i[1], o.questions[t] = i[0] }) }; o.setQuestionGroup = function (e) { n.setQuestionGroup(f, e.ID, e.GROUP_QUESTION || null, function () { }) }, o.getQuestionGroupName = function (e) { const t = e.GROUP_QUESTION ? o.groupQuestions.find(function (o) { return o.ID === e.GROUP_QUESTION }) : void 0; return t ? t.NAME : void 0 }, o.moveQuestionUp = function (e) { I(e - 1, e) }, o.moveQuestionDown = function (e) { I(e, e + 1) }, o.openLinkQuestionModal = function () { i.open({ size: "lg", templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/linkQuestionModal.html", backdrop: "static", controller: "LinkQuestionModalController" }).result.then(function (e) { "NEW_QUESTION_ADDED" == e ? m() : n.linkQuestionToForm(f, e, o.questions.length + 1, function (e, o) { o < 400 && m() }) }) }, o.openNewQuestionModal = function () { i.open({ size: "lg", templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/newQuestionModal.html", backdrop: "static", controller: "NewQuestionModalController" }).result.then(function (e) { n.linkQuestionToForm(f, e, o.questions.length + 1, function (e, o) { o < 400 && m() }) }) }, o.modifyQuestionDisplayLogic = function (o) { e.selectedLogicQuestion = o, i.open({ size: "lg", templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/modifyQuestionDisplayLogicModal.html", backdrop: "static", controller: "ModifyQuestionDisplayLogicModalController" }).result.then(function (e) { s.loadDisplayRules(f, e, u.use(), function (t, n) { o.DISPLAYRULES = t, a.success("NÃ¤yttÃ¶logiikka lisÃ¤tty kysymykselle ID: " + e), g(o) }) }) }, o.removeQuestion = function (e) { i.open({ size: "lg", templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/deleteConfirmationModal.html", backdrop: "static", controller: "DeleteConfirmationModalController", resolve: { confirmationMessage: () => d("FORM_QUESTION_REMOVE_CONFIRM_1") + " " + e.NAME + " " + d("FORM_QUESTION_REMOVE_CONFIRM_2") } }).result.then(function () { n.removeLinkQuestionToForm(f, e.ID, function (e, t) { m(), o.selectedQuestion = { ID: void 0 } }) }) }, o.saveDisplayRuleOperator = function (e, o, t) { const n = {}; n.OPERATOR = e, s.saveDisplayRuleOperator(n, o, function (e, o) { a.success("NÃ¤yttÃ¶logiikan operaattori tallennettu"), g(t) }) }, o.calendarOptions = { "starting-day": "1" }, o.openStartDateCalendar = function (e) { e.preventDefault(), e.stopPropagation(), o.calendar1Open = !o.calendar1Open }, o.hasInvalidLogics = function (e) { return (e.DISPLAYRULES || []).some(function (e) { return e.invalid }) }, o.hasIllegalDisplayRules = function (o) { return e.questionsWithIllegalDisplayRules.some(function (e) { return e.ID === o.ID }) }, o.deleteRule = function (e, o) { i.open({ size: "lg", templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/deleteConfirmationModal.html", backdrop: "static", controller: "DeleteConfirmationModalController", resolve: { confirmationMessage: () => d("DISPLAY_LOGIC_REMOVE_CONFIRM") } }).result.then(function () { s.removeDisplayLogic(e, function (t) { t < 400 && (o.DISPLAYRULES = o.DISPLAYRULES.filter(function (o) { return o.ID !== e }), a.success("NÃ¤yttÃ¶logiikka poistettu")) }) }) } }]), angular.module("HeaderCtrl", ["angularUtils.directives.dirPagination", "ui.bootstrap"]).controller("HeaderController", ["$scope", "$state", "$http", "$rootScope", "$translate", "Organization", function (e, o, t, n, i, s) { e.$state = o, n.loggedUser && (e.username = n.loggedUser.fullname, null == n.loggedUser.organizationName ? s.loadOrganizations(function (o, t) { n.organizations = o; for (let t = 0; o.length > t; t++)o[t].ID == n.loggedUser.organization && (n.loggedUser.organizationName = o[t].NAME, e.userorganization = n.loggedUser.organizationName) }) : e.userorganization = n.loggedUser.organizationName), e.isLoggedIn = n.loggedIn, e.getCurrentLang = function () { return i.use() }, e.selectLang = function (e) { i.use(e), n.selectedLanguage = e }, e.logout = function () { t.get(n.api_prefix + "logout").success(function () { o.go("login") }).error(function () { }) }, e.authAddress = n.api_prefix + "auth", e.logoutLink = n.logout_page }]), angular.module("LoginCtrl", ["ui.router", "ui.bootstrap"]).controller("LoginController", ["$scope", "$http", "$state", "$stateParams", "$rootScope", "$location", "$window", function (e, o, t, n, i, s, r) { var a; e.errorMessage = "", e.showError = !1, e.login = function () { e.errorMessage = "", e.showError = !1; const n = { username: e.username, password: e.password }; o.post(i.api_prefix + "login", n).success(function (e) { i.loggedIn = !0, i.loggedUser = e, t.go("secured.main") }).error(function (o) { e.errorMessage = "Login failed!", e.showError = !0, i.loggedUser = null }) }, e.feedback = [], a = "fail", s.search().hasOwnProperty(a) && (e.feedback[a] = s.search()[a]), e.feedback.fail ? e.showFailMessage = !0 : e.showFailMessage = !1, e.authAddress = i.api_prefix + "auth", e.userinfoLink = i.userinfo_page, e.openUserinfolink = function () { r.open(e.userinfoLink) } }]), angular.module("NoteFeedCtrl", ["ui.bootstrap"]).controller("NoteFeedController", ["$rootScope", "$scope", "$modal", "$stateParams", "Notes", "Forms", "Questions", "$filter", function (e, o, t, n, i, s, r, a) { const l = a("translate"); o.notes = [], o.comments = [], o.notesAndComments = [], o.loading = i.loading; const u = function (e) { return e.JSONFHIR && e.JSONFHIR.language && ("fi" === e.JSONFHIR.language || "fi-FI" === e.JSONFHIR.language) }, c = function (e, t) { e ? s.loadNotesInForm(e, function (t) { return s.loadPublishCommentByFormId(e, function (e) { o.comments = e.filter(function (e) { return e.PUBLISHER && e.VERSION_COMMENT }).map(function (e) { return e.JSONFHIR = function (e) { try { return JSON.parse(e) } catch (o) { return e } }(e.JSON), e }), o.finnishComments = o.comments.filter(u), o.notesAndComments = [].concat(_toConsumableArray(t), _toConsumableArray(o.finnishComments)).sort(function (e, o) { const t = new Date(e.CREATED_AT); return new Date(o.CREATED_AT).getTime() - t.getTime() }), o.notes = t }) }) : t && r.loadNotesInQuestion(t, function (e) { o.notes = e, o.notesAndComments = e }) }, f = n.formid, d = n.questionid; c(f, d), e.$on("saved-publish-comment", function () { return c(f, d) }), o.handleComment = function (e) { t.open({ animation: !0, size: "custom-size", templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/publish-version-comment-details-modal.html", controller: "PublishVersionCommentDetailsController", backdrop: "static", resolve: { formId: function () { return f }, comment: function () { return e }, publishComments: function () { return o.comments } } }).result.then(function (e) { "reload-versions" === e.action && c(f, d) }) }, o.addNewNote = function () { t.open({ animation: !0, size: "md", templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/noteModal.html", backdrop: "static", controller: "NoteModalController", resolve: { modalTitle: () => l("NEW_NOTE"), noteData: () => !1 } }).result.then(function (e) { if (n.formid) e.FORM_ID = n.formid; else { if (!n.questionid) return; e.QUESTION_ID = n.questionid } i.saveNewNote(e, function (e) { e < 400 && c(f, d) }) }) }, o.deleteFeedNote = function (e) { t.open({ animation: !0, size: "md", templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/deleteConfirmationModal.html", backdrop: "static", controller: "DeleteConfirmationModalController", resolve: { confirmationMessage: () => l("DELETE_NOTE_CONFIRMATION") } }).result.then(function () { i.deleteNote(e, function (e) { e < 400 && c(f, d) }) }) }, o.canEdit = function (o) { return o.CREATED_BY === e.loggedUser.id }, o.editFeedNote = function (e) { t.open({ animation: !0, size: "md", templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/noteModal.html", backdrop: "static", controller: "NoteModalController", resolve: { modalTitle: () => l("EDIT_NOTE"), noteData: () => e } }).result.then(function (e) { i.editNote(e, function (e) { e < 400 && c(f, d) }) }) }, f && (o.filter = { type: "*" }), o.showNoteFilter = function (e) { return !o.filter || (!("versions" !== o.filter.type || !e.PUBLISHER || !e.VERSION_COMMENT) || ("notes" === o.filter.type && !e.PUBLISHER || (!("questions" !== o.filter.type || !e.QUESTION_ID) || "*" === o.filter.type))) } }]), angular.module("QuestionDetailsCtrl", ["angularUtils.directives.dirPagination", "ui.bootstrap"]).controller("QuestionDetailsController", ["$scope", "$rootScope", "$stateParams", "$timeout", "$state", "Questions", "$filter", "$translate", "$modal", "$window", "Organization", function (e, o, t, n, i, s, r, a, l, u, c) { const f = function (e, o) { return l.open({ size: "md", templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/confirm-edit-question.html", controller: ["$scope", "$modalInstance", function (t, n) { t.title = e, t.forms = o, t.ok = n.close, t.cancel = n.dismiss }] }).result }, d = r("translate"), g = function () { if (0 === e.forms.length) return new Promise(function (e) { e() }); const o = e.forms, t = d("EDIT_QUESTION"); return f(t, o) }; e.calendarOptions = { "starting-day": "1" }, e.openStartDateCalendar = function (o) { o.preventDefault(), o.stopPropagation(), e.calendar1Open = !e.calendar1Open }, e.isLoading = s.questionsLoading, e.questionID = t.questionid, e.answers = []; let m = []; e.disabledID = !0, e.disabled = !1, e.disabledApproval = !0, e.questionInfo = { ID: e.questionID }, e.oldQuestionInfo = {}, e.placeholderText = d("TYPE_ANSWER_TEXT"), e.readonlymode = !0, e.selectedRow = { value: "" }, "FI" === a.use() && (e.questionTypes = s.getQuestionTypes), "EN" === a.use() && (e.questionTypes = s.getQuestionTypesEN), e.tooltipMoveUp = d("MOVE_QUESTION_UP"), e.tooltipMoveDown = d("MOVE_QUESTION_DOWN"), e.Units = [{ value: 1, text: "kg" }, { value: 2, text: "cm" }, { value: 3, text: "mg" }, { value: 4, text: "C" }, { value: 5, text: d("UNITS") }, { value: 6, text: d("YEAR") }, { value: 7, text: d("DAY") }, { value: 8, text: "mmHg" }, { value: 9, text: "h" }, { value: 10, text: "mmol/l" }], e.codeSystems = [], e.systemCodes = {}, s.loadCodeSystems(function (o) { e.codeSystems = o.items, o.items.forEach(function (o) { s.loadSystemCodes(o.ID, function (t) { e.systemCodes[o.ID] = t }) }) }), s.loadQuestion(e.questionID, function (t) { t < 400 && (e.questionInfo = s.getQuestion, s.loadLinkedForms(e.questionInfo.ID, function (t) { e.forms = t, c.loadQuestionOrganizations(function (t) { e.organizationList = "", e.questionInfo.ORGANIZATIONS = []; for (let n = 0; t.length > n; n++)t[n].QUESTION_ID == e.questionID && (e.questionInfo.ORGANIZATIONS.push(t[n]), e.organizationList.length > 0 && (e.organizationList += ", "), e.organizationList += t[n].NAME, o.loggedUser.organization == t[n].ORG_ID && 2 == o.loggedUser.rightlevel && (e.readonlymode = !1)); m = e.questionInfo.ORGANIZATIONS, o.loggedUser && 3 == o.loggedUser.rightlevel && (e.readonlymode = !1) }) }), e.oldQuestionInfo = angular.copy(e.questionInfo), e.detailsPageTitle = d("QUESTION_TITLE_1") + ' "' + e.questionInfo.NAME + '" ' + d("QUESTION_TITLE_2"), s.loadAnswers(e.questionID, function (o, t) { t < 400 && (e.answers = s.getAnswers) })) }); const I = function () { return e.questionInfo.TYPE !== e.oldQuestionInfo.TYPE }; e.saveQuestion = function () { const o = function () { e.questionInfo.ID = e.questionID, s.updateQuestion(e.questionInfo, e.answers, function (o) { o < 400 && (I() ? (e.answers.forEach(function (o) { s.deleteAnswer(e.questionID, o.ID) }), e.answers = []) : "NUMBER" === e.questionInfo.TYPE ? e.saveNumberAnswer() : e.saveAnswers(), e.oldQuestionInfo = angular.copy(e.questionInfo)) }) }; I() ? g().then(o) : o() }, e.saveNumberAnswer = function () { const o = { ANSWER_TEXT: "", QUESTION_ID: e.questionID, ORDER_NUM: "", MIN: e.answers[0].MIN, MAX: e.answers[0].MAX, UNIT_ID: e.answers[0].UNIT_ID, DECIMALS: e.answers[0].DECIMALS }; s.createAnswer(e.questionID, o, function (o) { o < 400 && s.loadAnswers(e.questionID, function (o, t) { t < 400 && (e.answers = s.getAnswers) }) }) }, e.addAnswer = function (o) { if (e.answers.length < 100) { const t = { ANSWER_TEXT: o, QUESTION_ID: e.questionID, ORDER_NUM: e.answers.length, MIN: "", MAX: "", UNIT_ID: "" }, n = function () { s.createAnswer(e.questionID, t, function (o) { o < 400 && s.loadAnswers(e.questionID, function (o, t) { t < 400 && (e.answers = s.getAnswers) }) }) }; g().then(n) } }, e.removeAnswer = function (o) { g().then(function () { s.deleteAnswer(e.questionID, o, function (o) { o < 400 && (e.selectedRow.value = "", s.loadAnswers(e.questionID, function (o, t) { t < 400 && (e.answers = s.getAnswers) })) }) }) }, e.addQuestionCode = function () { e.questionInfo.CODES.push({}) }, e.removeQuestionCode = function (o, t) { o ? u.confirm("Remove the code from this question?") && s.deleteQuestionCode(o, function () { e.questionInfo.CODES = e.questionInfo.CODES.filter(function (e) { return e.ID !== o }) }) : e.questionInfo.CODES = e.questionInfo.CODES.filter(function (e, o) { return o !== t }) }, e.addAnswerCode = function (o) { e.answers.find(function (e) { return e.ID === o }).CODES.push({}) }, e.removeAnswerCode = function (o, t, n) { const i = e.answers.find(function (e) { return e.ID === o }); t ? u.confirm("Remove the code from this answer?") && s.deleteAnswerCode(t, function () { i.CODES = i.CODES.filter(function (e) { return e.ID !== t }) }) : i.CODES = i.CODES.filter(function (e, o) { return o !== n }) }, e.goHome = function () { l.open({ size: "sm", templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/leave-page-modal.html", backdrop: "static", controller: ["$scope", "$modalInstance", function (e, o) { e.ok = function () { o.close() }, e.cancel = function () { o.dismiss("cancel") } }] }).result.then(function () { i.go("secured.main") }) }, e.moveUp = function (o) { let t = 0; for (let n = 0; n < e.answers.length; n++)if (o == e.answers[n].ID) { t = n; break } 0 !== t && s.switchAnswers(t, t - 1, function (o) { o >= 400 && s.loadAnswers(e.questionID, function (o, t) { e.answers = s.getAnswers }) }) }, e.moveDown = function (o) { let t = e.answers.length - 1; for (let n = 0; n < e.answers.length; n++)if (o == e.answers[n].ID) { t = n; break } t !== e.answers.length - 1 && s.switchAnswers(t, t + 1, function (o) { o >= 400 && s.loadAnswers(e.questionID, function () { e.answers = s.getAnswers }) }) }, e.editOrganizations = function (o) { l.open({ animation: !0, size: "lg", templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/modifyQuestionOrganizationsModal.html", backdrop: "static", controller: "ModifyQuestionOrganizationsController", resolve: { questionData: () => o } }).result.then(function (o) { e.questionInfo = o, e.organizationList = ""; for (let o = 0; e.questionInfo.ORGANIZATIONS.length > o; o++)e.organizationList.length > 0 && (e.organizationList += ", "), e.organizationList += e.questionInfo.ORGANIZATIONS[o].NAME }) }, e.saveAnswers = function () { e.answers.forEach(function (o) { s.editAnswer(o, function (o, t) { t < 400 && (e.isLoading.answersSuccess = !0, n(function () { e.isLoading.answersSuccess = !1 }, 2e3)) }) }) }, e.deleteQuestion = function () { const o = d("CONFIRM_DELETE_QUESTION"); f(o, e.forms).then(function () { s.deleteQuestion(e.questionInfo.ID, function (e) { e < 400 && (i.go("secured.main"), Forms.setStatus("hide"), s.setStatus("show")) }) }) } }]), angular.module("QuestionListCtrl", ["angularUtils.directives.dirPagination", "ui.bootstrap"]).controller("QuestionListController", ["$scope", "$rootScope", "$modal", "Questions", "Forms", "$translate", "Organization", function (e, o, t, n, i, s, r) { e.currentPage = 1, e.questionPageSize = 50, e.displayQuestions = n.getDisplayStatus; let a = !1; e.sortQuestions = { column: "NAME", descending: !1 }, e.readonlymode = !0, o.loggedUser && (2 != o.loggedUser.rightlevel && 3 != o.loggedUser.rightlevel || (e.readonlymode = !1)), e.questions = n.getQuestions, e.questionsLoading = n.questionsLoading, n.loadQuestions(function (o, t) { r.loadQuestionOrganizations(function (o, t) { e.questionsOrganizations = o, a = !0 }) }), e.printOrganizations = function (t) { if (1 == a) { t.ORGANIZATIONS = ""; for (let o = 0; e.questionsOrganizations.length > o; o++)t.ID == e.questionsOrganizations[o].QUESTION_ID && (t.ORGANIZATIONS.length > 0 && (t.ORGANIZATIONS += ", "), t.ORGANIZATIONS += e.questionsOrganizations[o].NAME); return t.readonlydelete = !0, 2 == o.loggedUser.rightlevel && -1 != t.ORGANIZATIONS.indexOf(o.loggedUser.organizationName) && (t.readonlydelete = !1), 3 == o.loggedUser.rightlevel && (t.readonlydelete = !1), t.ORGANIZATIONS } }, e.switchView = function (e) { switch (e) { case "forms": n.setStatus("hide"), i.setStatus("show") } }, e.changeSorting = function (o) { e.sortQuestions.column == o ? e.sortQuestions.descending = !e.sortQuestions.descending : (e.sortQuestions.column = o, e.sortQuestions.descending = !1) }, e.getIcon = function (o) { if (e.sortQuestions.column == o) return e.sortQuestions.descending ? "glyphicon-triangle-bottom" : "glyphicon-triangle-top" } }]), angular.module("ConfirmCtrl", ["ui.bootstrap"]).controller("ConfirmController", ["$scope", "$modalInstance", "message", function (e, o, t) { e.message = t, e.yes = o.close, e.no = o.dismiss }]), angular.module("DeleteConfirmationModalCtrl", ["ui.bootstrap"]).controller("DeleteConfirmationModalController", ["$scope", "$modalInstance", "confirmationMessage", function (e, o, t) { e.confirmationMessage = t, e.ok = function () { o.close() }, e.cancel = function () { o.dismiss("cancel") } }]), angular.module("LinkQuestionModalCtrl", ["angularUtils.directives.dirPagination", "ui.bootstrap"]).controller("LinkQuestionModalController", ["$scope", "$modalInstance", "Questions", "Forms", "$modal", "$stateParams", function (e, o, t, n, i, s) { const r = s.formid; e.questionListPageSize = 10, e.currentPage = 1, t.loadQuestions(function (o) { const i = t.getQuestions; n.loadQuestionsInForm(r, function (o, t) { const n = o; for (var s = 0; n.length > s; s++)i.map(function (e) { return e.ID }).indexOf(n[s].ID) > -1 && i.splice(i.map(function (e) { return e.ID }).indexOf(n[s].ID), 1); for (s = 0; i.length > s; s++)i[s].QUESTIONTEXT && (i[s].QUESTIONTEXT = i[s].QUESTIONTEXT.replace(/<(?:.|\n)*?>/gm, "")); e.questions = i }) }), e.ok = function () { e.questionID && o.close(e.questionID) }, e.cancel = function () { o.dismiss("cancel") }, e.openNewQuestionModal = function () { i.open({ size: "lg", templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/newQuestionModal.html", backdrop: "static", controller: "NewQuestionModalController" }).result.then(function (t) { n.loadQuestionsInForm(r, function (i, s) { e.questions = i, n.linkQuestionToForm(r, t, e.questions.length + 1, function (e, t) { o.close("NEW_QUESTION_ADDED") }) }) }) } }]), angular.module("ModifyFormOrganizationsCtrl", ["angularUtils.directives.dirPagination", "ui.bootstrap"]).controller("ModifyFormOrganizationsController", ["$q", "$rootScope", "$scope", "$modalInstance", "Questions", "$state", "$stateParams", "$timeout", "Organization", "formData", function (e, o, t, n, i, s, r, a, l, u) { l.loadOrganizations(function (e, o) { t.organizations = e; for (let e = 0; u.ORGANIZATIONS.length > e; e++)for (let o = 0; t.organizations.length > o; o++)t.organizations[o].ID == u.ORGANIZATIONS[e].ORG_ID || 1 == t.organizations[o].STATUS ? t.organizations[o].STATUS = !0 : t.organizations[o].STATUS = !1 }), t.ok = function () { u.ORGANIZATIONS = []; for (let e = 0; t.organizations.length > e; e++)1 == t.organizations[e].STATUS && u.ORGANIZATIONS.push({ DELETED: null, FORM_ID: u.ID, ID: t.organizations[e].ID, NAME: t.organizations[e].NAME, ORG_ID: t.organizations[e].ID }); n.close(u) }, t.cancel = function () { n.dismiss("cancel") } }]), angular.module("ModifyQuestionDisplayLogicModalCtrl", ["angularUtils.directives.dirPagination", "ui.bootstrap"]).controller("ModifyQuestionDisplayLogicModalController", ["$q", "$rootScope", "$scope", "$modalInstance", "Questions", "$state", "$stateParams", "$timeout", function (e, o, t, n, i, s, r, a) { t.formid = r.formid, t.questionid = o.selectedLogicQuestion.ID, t.questionname = o.selectedLogicQuestion.NAME, t.questions = i.getDisplayQuestions, i.loadDisplayQuestionData(t.formid, t.questionid), t.selectedquestion = "", t.selectedquestionid = "", t.answertype = "", t.answeroperation = "", t.answervalue = ""; const l = [], u = []; t.selectAnswer = function (e) { if (-1 == jQuery.inArray(e.ANSWER_TEXT, l)) l.push(e.ANSWER_TEXT), u.push(e.ANSWER_ID); else { const o = l.indexOf(e.ANSWER_TEXT), t = u.indexOf(e.ANSWER_ID); -1 != o && (l.splice(o, 1), u.splice(t, 1)) } }, t.ok = function () { n.close() }, t.cancel = function () { n.dismiss("cancel") }, t.SaveDisplayLogic = function () { t.answermultivalue = l, t.answermultivalueID = u; let e = 0; const o = { VALUE: ("", ""), ANSWER_ID: "", FORM_ID: "", QUESTION_ID: "", ANSWER_QUESTION_ID: "", TYPE: "", LOGIC: "" }; for (let n = 0; t.answermultivalue.length > n; n++)e = 1, n > 0 && (o.VALUE += "||", o.ANSWER_ID += "||"), o.VALUE += t.answermultivalue[n], o.ANSWER_ID += t.answermultivalueID[n], o.FORM_ID = t.formid, o.QUESTION_ID = t.questionid, o.ANSWER_QUESTION_ID = t.selectedquestionid, o.TYPE = t.answertype, o.LOGIC = t.answeroperation; 0 == e ? (o.VALUE = t.answervalue, o.FORM_ID = t.formid, o.QUESTION_ID = t.questionid, o.ANSWER_QUESTION_ID = t.selectedquestionid, o.TYPE = t.answertype, o.LOGIC = t.answeroperation, i.createDisplayRule(o, function (e) { n.close(o.QUESTION_ID) })) : i.createDisplayRule(o, function (e) { n.close(o.QUESTION_ID) }) } }]), angular.module("ModifyQuestionOrganizationsCtrl", ["angularUtils.directives.dirPagination", "ui.bootstrap"]).controller("ModifyQuestionOrganizationsController", ["$q", "$rootScope", "$scope", "$modalInstance", "Questions", "$state", "$stateParams", "$timeout", "Organization", "questionData", function (e, o, t, n, i, s, r, a, l, u) { l.loadOrganizations(function (e, o) { t.organizations = e; for (let e = 0; u.ORGANIZATIONS.length > e; e++)for (let o = 0; t.organizations.length > o; o++)t.organizations[o].ID == u.ORGANIZATIONS[e].ORG_ID || 1 == t.organizations[o].STATUS ? t.organizations[o].STATUS = !0 : t.organizations[o].STATUS = !1 }), t.ok = function () { u.ORGANIZATIONS = []; for (let e = 0; t.organizations.length > e; e++)1 == t.organizations[e].STATUS && u.ORGANIZATIONS.push({ DELETED: null, FORM_ID: u.ID, ID: t.organizations[e].ID, NAME: t.organizations[e].NAME, ORG_ID: t.organizations[e].ID }); n.close(u) }, t.cancel = function () { n.dismiss("cancel") } }]), angular.module("NewFormCtrl", ["angularUtils.directives.dirPagination", "ui.bootstrap"]).controller("NewFormController", ["$scope", "$rootScope", "$state", "Forms", "$filter", "$translate", function (e, o, t, n, i, s) { i("translate"); e.form = {}, e.disabled = !1, e.form.STATUS = "Draft", e.form.ORGANIZATIONS = [{ ORG_ID: o.loggedUser.organization }], e.form.EBMEDS_USAGE = 1, e.form.CATEGORY = "symptom", e.categories = [{ categoryName: "Oirearviokysely", categoryValue: "symptom" }, { categoryName: "Terveystarkastus", categoryValue: "health-check" }, { categoryName: "PitkÃ¤aikaissairaudet", categoryValue: "chronic-disease" }], e.statuses = [{ statusName: "DRAFT", statusValue: "Draft" }], e.disabledValidation = !0, e.disabledApproval = !0, e.saveForm = function () { !1 !== e.formForm.$valid && n.createForm(e.form, function (n, i) { i < 400 && (e.form.ORGANIZATIONS = [{ ORG_ID: o.loggedUser.organization, FORM_ID: n.NEW_ID }], t.go("secured.formDetailsPage", { formid: n.NEW_ID })) }) }, e.goBack = function () { window.history.back() } }]), angular.module("NewQuestionCtrl", ["angularUtils.directives.dirPagination", "ui.bootstrap", "ui.router"]).controller("NewQuestionController", ["$scope", "$rootScope", "$state", "Questions", "$filter", "$translate", "$window", function (e, o, t, n, i, s, r) { const a = i("translate"); e.detailsPageTitle = a("NEW_QUESTION"), e.questionInfo = { CODES: [], TYPE: "" }, e.codeSystems = [], e.systemCodes = {}, n.loadCodeSystems(function (o) { e.codeSystems = o.items, o.items.forEach(function (o) { n.loadSystemCodes(o.ID, function (t) { e.systemCodes[o.ID] = t }) }) }), "FI" === s.use() && (e.questionTypeOptions = n.getQuestionTypes), "EN" === s.use() && (e.questionTypeOptions = n.getQuestionTypesEN), e.saveQuestion = function () { e.questionInfo.STATUS = "Draft", e.questionInfo.ORGANIZATIONS = [{ ORG_ID: o.loggedUser.organization }], e.newQuestionForm.$valid && n.createQuestion(e.questionInfo, function (e, o) { e < 400 && t.go("secured.questionDetails", { questionid: o.NEW_ID }) }) }, e.goHome = function () { t.go("secured.main") }, e.addQuestionCode = function () { e.questionInfo.CODES.push({}) }, e.removeQuestionCode = function (o, t) { o ? r.confirm("Remove the code from this question?") && n.deleteQuestionCode(o, function () { e.questionInfo.CODES = e.questionInfo.CODES.filter(function (e) { return e.ID !== o }) }) : e.questionInfo.CODES = e.questionInfo.CODES.filter(function (e, o) { return o !== t }) } }]), angular.module("NewQuestionModalCtrl", ["angularUtils.directives.dirPagination", "ui.bootstrap"]).controller("NewQuestionModalController", ["$scope", "$rootScope", "$modalInstance", "Questions", "$state", "$stateParams", "$timeout", "$filter", "$translate", "$window", function (e, o, t, n, i, s, r, a, l, u) { e.questionInfo = { CODES: [], TYPE: "" }; const c = a("translate"); e.detailsPageTitle = c("NEW_QUESTION"), e.calendarOptions = { "starting-day": "1" }, e.openStartDateCalendar = function (o) { o.preventDefault(), o.stopPropagation(), e.calendar1Open = !e.calendar1Open }, "FI" === l.use() && (e.questionTypes = n.getQuestionTypes), "EN" === l.use() && (e.questionTypes = n.getQuestionTypesEN), e.tooltipMoveUp = c("MOVE_QUESTION_UP"), e.tooltipMoveDown = c("MOVE_QUESTION_DOWN"), e.disabledID = !0, e.disabled = !1, e.disabledApproval = !0; let f = ""; e.Units = [{ value: 1, text: "kg" }, { value: 2, text: "cm" }, { value: 3, text: "mg" }, { value: 4, text: "C" }, { value: 5, text: c("UNITS") }, { value: 6, text: c("YEAR") }, { value: 7, text: c("DAY") }, { value: 8, text: "mmHg" }, { value: 9, text: "h" }, { value: 10, text: "mmol/l" }], e.codeSystems = [], e.systemCodes = {}, n.loadCodeSystems(function (o) { e.codeSystems = o.items, o.items.forEach(function (o) { n.loadSystemCodes(o.ID, function (t) { e.systemCodes[o.ID] = t }) }) }), e.saveQuestion = function () { e.questionInfo.STATUS = "Draft", e.questionInfo.ORGANIZATIONS = [{ ORG_ID: o.loggedUser.organization }], e.questionForm.$invalid || n.createQuestion(e.questionInfo, function (t, i) { if (t < 400) { f = i.NEW_ID, e.questionInfo.ORGANIZATIONS = [{ ORG_ID: o.loggedUser.organization, QUESTION_ID: f }]; e.isLoading = n.questionsLoading, e.questionID = f, e.answers = [], e.oldQuestionInfo = {}, e.placeholderText = c("TYPE_ANSWER_TEXT"), e.detailsPageTitle = c("QUESTION_TITLE_1") + ' "' + e.questionID + '" ' + c("QUESTION_TITLE_2"), "FI" === l.use() && (e.questionTypes = n.getQuestionTypes), "EN" === l.use() && (e.questionTypes = n.getQuestionTypesEN), e.tooltipMoveUp = c("MOVE_QUESTION_UP"), e.tooltipMoveDown = c("MOVE_QUESTION_DOWN"), n.loadQuestion(e.questionID, function (o) { o < 400 && (e.questionInfo = n.getQuestion, e.oldQuestionInfo = angular.copy(e.questionInfo), n.loadAnswers(e.questionID, function (o, t) { t < 400 && (e.answers = n.getAnswers) })) }), e.saveQuestion = function () { e.questionInfo.ID = e.questionID, e.questionInfo.ORGANIZATIONS = [{ ORG_ID: o.loggedUser.organization, QUESTION_ID: e.questionInfo.ID }], n.updateQuestion(e.questionInfo, e.answers, function (o) { o < 400 && (e.questionInfo.TYPE !== e.oldQuestionInfo.TYPE ? (e.answers.forEach(function (o, t, i) { n.deleteAnswer(e.questionID, o.ID) }), n.loadAnswers(e.questionID, function (o, t) { t < 400 && (e.answers = n.getAnswers) })) : (e.saveNumberAnswer(), e.saveAnswers()), e.oldQuestionInfo = angular.copy(e.questionInfo)) }) }, e.addQuestionCode = function () { e.questionInfo.CODES.push({}) }, e.removeQuestionCode = function (o, t) { o ? u.confirm("Remove the code from this question?") && n.deleteQuestionCode(o, function () { e.questionInfo.CODES = e.questionInfo.CODES.filter(function (e) { return e.ID !== o }) }) : e.questionInfo.CODES = e.questionInfo.CODES.filter(function (e, o) { return o !== t }) }, e.addAnswerCode = function (o) { e.answers.find(function (e) { return e.ID === o }).CODES.push({}) }, e.removeAnswerCode = function (o, t, i) { const s = e.answers.find(function (e) { return e.ID === o }); t ? u.confirm("Remove the code from this answer?") && n.deleteAnswerCode(t, function () { s.CODES = s.CODES.filter(function (e) { return e.ID !== t }) }) : s.CODES = s.CODES.filter(function (e, o) { return o !== i }) }, e.saveNumberAnswer = function () { if ("NUMBER" === e.questionInfo.TYPE) { const o = { ANSWER_TEXT: "", QUESTION_ID: e.questionID, ORDER_NUM: "", MIN: e.answers[0].MIN, MAX: e.answers[0].MAX, UNIT_ID: e.answers[0].UNIT_ID }; n.createAnswer(e.questionID, o, function (o) { o >= 400 && n.loadAnswers(e.questionID, function (o, t) { t < 400 && (e.answers = n.getAnswers) }) }) } }, e.addAnswer = function (o) { if (e.answers.length < 10) { const t = { ANSWER_TEXT: o, QUESTION_ID: e.questionID, ORDER_NUM: e.answers.length, MIN: "", MAX: "", UNIT_ID: "" }; n.createAnswer(e.questionID, t, function (o) { o < 400 && n.loadAnswers(e.questionID, function (o, t) { t < 400 && (e.answers = n.getAnswers) }) }) } }, e.removeAnswer = function (o) { n.deleteAnswer(e.questionID, o, function (o) { o < 400 && n.loadAnswers(e.questionID, function (o, t) { t < 400 && (e.answers = n.getAnswers) }) }) }, e.moveUp = function (o) { let t = 0; for (let n = 0; n < e.answers.length; n++)if (o == e.answers[n].ID) { t = n; break } 0 !== t && n.switchAnswers(t, t - 1, function (o) { o >= 400 && n.loadAnswers(e.questionID, function (o, t) { e.answers = n.getAnswers }) }) }, e.moveDown = function (o) { let t = e.answers.length - 1; for (let n = 0; n < e.answers.length; n++)if (o == e.answers[n].ID) { t = n; break } t !== e.answers.length - 1 && n.switchAnswers(t, t + 1, function (o) { o >= 400 && n.loadAnswers(e.questionID, function (o, t) { e.answers = n.getAnswers }) }) }, e.saveAnswers = function () { e.answers.forEach(function (o) { n.editAnswer(o, function (o, t) { t < 400 && (e.isLoading.answersSuccess = !0, r(function () { e.isLoading.answersSuccess = !1 }, 2e3)) }) }) } } }) }, "FI" === l.use() && (e.questionTypeOptions = n.getQuestionTypes), "EN" === l.use() && (e.questionTypeOptions = n.getQuestionTypesEN), e.ok = function () { e.questionID && t.close(f) }, e.cancel = function () { t.dismiss("cancel") } }]), angular.module("NoteModalCtrl", ["ui.bootstrap"]).controller("NoteModalController", ["$scope", "$modalInstance", "modalTitle", "noteData", function (e, o, t, n) { e.title = t, e.note = {}, n && (e.note.TEXT = n.TEXT, e.note.ID = n.ID), e.ok = function () { e.note.TEXT && o.close(e.note) }, e.cancel = function () { o.dismiss("cancel") } }]), angular.module("PublishVersionCommentCtrl", ["ui.bootstrap"]).controller("PublishVersionCommentController", ["$rootScope", "$scope", "$modalInstance", "publishModalForm", "languages", function (e, o, t, n, i) { o.publishForm = n, n.languages = i.reduce(function (e, o) { return Object.assign({}, e, { [o]: !0 }) }, {}), o.publish = function () { !!o.publishModalForm.comment.$viewValue.trim().length > 0 && t.close({ action: "publish", payload: o.publishForm }) }, o.cancel = function () { t.dismiss({ action: "cancel", payload: o.publishForm }) } }]), angular.module("PublishVersionCommentDetailsCtrl", ["ui.bootstrap"]).controller("PublishVersionCommentDetailsController", ["$rootScope", "$scope", "$modalInstance", "ObjectDiff", "Forms", "formId", "comment", "publishComments", function (e, o, t, n, i, s, r, a) { o.currentPage = 1, o.paginationSize = 5, o.comment = r, o.filterBySelectedLanguage = function (e) { return o.selectedLanguage.code.includes(e.JSONFHIR.language) }, o.labels = { "fi-FI": "Suomeksi (fi-FI)", "sv-FI": "Ruotsiksi (sv-FI)", "en-GB": "Englanniksi (en-GB)" }, o.langs = o.comment.languages.map(function (e) { return { label: o.labels[e], code: e } }), o.selectedLanguage = o.langs.find(function (e) { return e.code.includes("fi-FI") }) || o.langs[0], o.allPublishComments = a, o.allPublishCommentsOnSelectedLang = a.filter(o.filterBySelectedLanguage); const l = a.filter(function (e) { return e.ID !== r.ID }).shift(); function u() { o.diffedComment = n.diffOwnProperties(o.comment.JSONFHIR, o.commentToBeDiffed.JSONFHIR) } function c(e) { o.diffCommentId = e, e ? (o.commentToBeDiffed = o.allPublishCommentsOnSelectedLang.find(function (e) { return e.ID === o.diffCommentId }), u()) : i.loadCurrentSavedVersionByFormId(s, function (e) { o.commentToBeDiffed = { JSONFHIR: e }, u() }, { language: o.selectedLanguage.code }) } l.ID && c(l.ID), o.$watch("selectedLanguage", function () { o.allPublishCommentsOnSelectedLang = o.allPublishComments.filter(o.filterBySelectedLanguage), o.comment = o.allPublishCommentsOnSelectedLang.find(function (e) { return e.ID === o.comment.ID }), o.comment && c(o.diffCommentId) }), o.handleDiff = function (e) { c(e.ID) }, o.handleCurrentSavedVersion = function () { c(null) }, o.handleDeprecate = function (e, o) { i.deprecateFormVersion(e)(o, function (e, o) { o < 400 && t.close({ action: "reload-versions" }) }) }, o.close = function () { t.close({ action: "close", payload: "Closing version details" }) } }]), angular.module("ConfirmDirective", []).directive("confirm", ["$modal", "$parse", function (e, o) { return { priority: -1, link: function (t, n, i) { n.on("click", function (n) { n.stopImmediatePropagation(), e.open({ templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/modal/confirm-modal.html", controller: "ConfirmController", resolve: { message: function () { return i.confirm } } }).result.then(function () { o(i.ngClick)(t, { $event: n }) }) }) } } }]), angular.module("ConvertDirective", []).directive("convertToNumber", function () { return { require: "ngModel", link(e, o, t, n) { n.$parsers.push(function (e) { return parseInt(e, 10) }), n.$formatters.push(function (e) { return "" + e }) } } }), angular.module("EbmedsService", []).factory("Ebmeds", ["$http", "$rootScope", "$filter", "toastr", function (e, o, t, n) { const i = o.api_prefix; return { callEBMeDS: function (o, t) { e.post(i + "api/ebmeds", o).success(function (e, o) { t && t(e, o) }).error(function (e, o) { n.error("Fetching data failed with status: " + o), t && t(e, o) }).finally(function () { }) } } }]), angular.module("FormService", []).factory("Forms", ["$http", "$rootScope", "$filter", "$translate", "toastr", function (e, o, t, n, i) { const s = o.api_prefix, r = [], a = { forms: !1, form: !1 }, l = { value: !0 }; function u(e) { return e && e.language || "fi-FI" } return { getForms: r, setStatus: function (e) { l.value = "show" == e }, getDisplayStatus: l, loading: a, loadForms: function (o) { a.forms = !0, e.get(s + "api/forms").success(function (e, t) { angular.copy(e, r), o && o(t) }).error(function (e, t) { i.error("Fetching data failed with status: " + t), o && o(t) }).finally(function () { a.forms = !1 }) }, loadFormByID: function (o, t, n) { a.form = !0, e.get(s + "api/forms/" + o + "?lang=" + u(n)).success(function (e, o) { t && t(e, o) }).error(function (e, o) { i.error("Fetching data failed with status: " + o), t && t(e, o) }).finally(function () { a.form = !1 }) }, loadQuestionsInForm: function (o, t, n) { a.formQuestions = !0, e.get(s + "api/forms/" + o + "/questions?lang=" + u(n)).success(function (e, o) { t && t(e, o) }).error(function (e, o) { i.error("Fetching data failed with status: " + o), t && t(e, o) }).finally(function () { a.formQuestions = !1 }) }, linkQuestionToForm: function (o, t, n, r) { a.linkQuestion = !0, e.post(s + "api/forms/" + o + "/questions/" + t, { POSITION: n }).success(function (e, o) { i.success("Question " + t + " added to form"), r && r(e, o) }).error(function (e, o) { i.error("Adding question to form failed with status: " + o), r && r(e, o) }).finally(function () { a.linkQuestion = !1 }) }, loadNotesInForm: function (o, t) { a.notes = !0, e.get(s + "api/forms/" + o + "/notes").success(function (e, o) { t && t(e, o) }).error(function (e, o) { i.error("Fetching data failed with status: " + o), t && t(e, o) }).finally(function () { a.notes = !1 }) }, createForm: function (n, r) { a.form = !0, n.CREATED_BY = o.loggedUser.id; const l = t("translate"); n.INTRODUCTION && n.INTRODUCTION.length > 4e3 ? i.error(l("INTRODUCTION_LENGTH")) : n.DESCRIPTION && n.DESCRIPTION.length > 4e3 ? i.error(l("DESCRIPTION_LENGTH")) : e.post(s + "api/forms/", n).success(function (e, o) { i.success("New form created successfully"), r && r(e, o) }).error(function (e, o) { i.error("Creating new form failed with status: " + o), r && r(e, o) }).finally(function () { a.form = !1 }) }, editForm: function (n, r) { a.form = !0, n.NAME = n.NAME ? n.NAME : "", n.DESCRIPTION = n.DESCRIPTION ? n.DESCRIPTION : "", n.STATUS = n.STATUS ? n.STATUS : "", n.APPROVED_BY = n.APPROVED_BY ? n.APPROVED_BY : "", n.COPYRIGHT = n.COPYRIGHT ? n.COPYRIGHT : "", n.ORGANISATION = n.ORGANISATION ? n.ORGANISATION : "", n.VALIDATED = n.VALIDATED ? n.VALIDATED : "", n.EDITED_BY = o.loggedUser.id; const l = t("translate"); n.INTRODUCTION && n.INTRODUCTION.length > 4e3 ? i.error(l("INTRODUCTION_LENGTH")) : n.DESCRIPTION && n.DESCRIPTION.length > 4e3 ? i.error(l("DESCRIPTION_LENGTH")) : e.put(s + "api/forms/" + n.ID, n).success(function (e, o) { i.success("Form edited successfully"), r && r(e, o) }).error(function (e, o) { i.error("Editing form failed with status: " + o), r && r(e, o) }).finally(function () { a.form = !1 }) }, removeLinkQuestionToForm: function (o, t, n) { a.linkQuestion = !0, e.delete(s + "api/forms/" + o + "/questions/" + t).success(function (e, o) { i.success("Question " + t + " removed from form"), n && n(e, o) }).error(function (e, o) { i.error("Removing question from form failed with status: " + o), n && n(e, o) }).finally(function () { a.linkQuestion = !1 }) }, deleteForm: function (o, t) { a.forms = !0, e.delete(s + "api/forms/" + o).success(function (e, n) { i.success("Form " + o + " deleted"), t && t(e, n) }).error(function (e, o) { i.error("Deleting form failed with status: " + o), t && t(e, o) }).finally(function () { a.forms = !1 }) }, swapQuestionPositionsInForm: function (o, t, n, r) { a.formQuestions = !0, e.put(s + "api/forms/" + o + "/questions/swap/" + t + "/" + n).success(function (e, o) { r && r(e, o) }).error(function (e, o) { i.error("Question position swapping failed with status: " + o), r && r(e, o) }).finally(function () { a.formQuestions = !1 }) }, setQuestionGroup: function (o, t, n, r) { e.put(s + "api/forms/" + o + "/questions/" + t + "/group", { groupQuestion: n }).success(function (e, o) { i.success("Question group changed successfully"), r(e, o) }).error(function (e, o) { i.error("Saving question group failed with status: " + o), r(e, o) }) }, setSendToEBMeDS: function (o, t, n, r) { e.put(s + "api/formsendtoebmeds/" + o, { SEND_TO_EBMEDS: n, QUESTION_ID: t }).success(function (e, o) { r && r(e, o) }).error(function (e, o) { i.error("Saving setting 'Send to EBMEDS' failed with status: " + o), r && r(e, o) }).finally(function () { }) }, setLinkedQuestionOptions: function (o) { e.put(s + "api/formlinkedquestionoptions", o).success(function (e, o) { i.success("Question options changed successfully") }).error(function (e, o) { i.error("Saving form question options failed with status: " + o) }) }, hasChanged: function (e, o) { const t = function (e) { return null == e || "" === e || "<br>" === e }, n = Object.keys(e).filter(function (e) { return "ORGANIZATIONS" !== e }); for (const r of n) if (e[r] !== o[r] && (i = e[r], s = o[r], !t(i) || !t(s))) return !0; var i, s; return !angular.equals(e.ORGANIZATIONS, o.ORGANIZATIONS) }, PublishSaveFormVersion: function (t, n, r, a) { e.post(s + "api/formversion/" + t, { CREATED_BY: o.loggedUser.id, SCRIPT_ID: n, VERSION_COMMENT: r.comment, languages: r.languages, status: r.status }).success(function (e, o) { i.success("Form published, new version saved"), a && a(e, o) }).error(function (e, o) { i.error(e.error), a && a(e, o) }).finally(function () { }) }, PreviewFormVersion: function (t, n, r, a) { e.post(s + "api/formodapreview/" + t + "?lang=" + u(a), { CREATED_BY: o.loggedUser.id, SCRIPT_ID: n }).success(function (e, o) { i.success("Form data sent to ODA2 for preview"), r && r(e, o) }).error(function (e, o) { let t = ""; if (e.odaerror) { for (let o = 0; e.odaerror.length > o; o++)e.odaerror[o].location ? t += e.odaerror[o].location[0] + ":\n" + e.odaerror[o].diagnostics + "\n\n" : t += "Warning(s) / Errors(s):\n" + e.odaerror[o].diagnostics + "\n\n"; i.error("ODA2 warning/error: " + t) } else i.error("Form preview failed with status: " + o); r && r(e, o) }).finally(function () { }) }, ValidateFormVersion: function (t, n, r, a) { e.post(s + "api/formodavalidate/" + t + "?lang=" + u(a), { CREATED_BY: o.loggedUser.id, SCRIPT_ID: n }).success(function (e, o) { i.success("Form validated for ODA2"), r && r(e, o) }).error(function (e, o) { let t = ""; if (e.odaerror) { for (let o = 0; e.odaerror.length > o; o++)e.odaerror[o].location ? t += e.odaerror[o].location[0] + ":\n" + e.odaerror[o].diagnostics + "\n\n" : t += "Warning(s) / Errors(s):\n" + e.odaerror[o].diagnostics + "\n\n"; i.error("Validation warning/error: " + t) } else i.error("Form validation failed with status: " + o); r && r(e, o) }).finally(function () { }) }, loadPublishCommentByFormId: function (o, t) { a.comments = !0, e.get(s + "api/form/" + o + "/form-versions").success(function (e, o) { t && t(e, o) }).error(function (e, o) { i.error("Fetching data failed with status: " + o) }).finally(function () { return a.comments = !1 }) }, loadCurrentSavedVersionByFormId: function (o, t, n) { e.get(s + "api/FHIR/forms/export/" + o + "?lang=" + u(n)).success(function (e, o) { t && t(e, o) }).error(function (e, o) { 404 === o ? i.warning(e.errorText) : i.error("Fetching data failed with status: " + o) }) }, deprecateFormVersion: function (o) { return function (t, n) { const r = o ? "deprecate" : "reactivate", a = s + "api/formversion/" + t + "/" + r; e.post(a).success(function (e, o) { i.success("Form version " + t + " " + r + " successful"), n(e, o) }).error(function (e, o) { i.error(o + ": " + e.errormessage), n(e, o) }) } }, loadFocalUrl: function (o, t) { a.form = !0, e.get(s + "api/forms/link/" + o).success(function (e, o) { t && t(e.url, o) }).error(function (e, o) { i.error("Fetching data failed with status: " + o), t && t(e, o) }).finally(function () { a.form = !1 }) } } }]), angular.module("NoteService", []).factory("Notes", ["$http", "$rootScope", "toastr", function (e, o, t) { const n = o.api_prefix, i = { note: !1 }; return { saveNewNote: function (s, r) { s.CREATED_BY = o.loggedUser.id, i.note = !0, e.post(n + "api/notes", s).success(function (e, o) { t.success("Note added"), r && r(o) }).error(function (e, o) { t.error("Adding not failed with status: " + o), r && r(o) }).finally(function (e, o) { i.note = !1 }) }, editNote: function (o, s) { i.note = !0, e.put(n + "api/notes/" + o.ID, o).success(function (e, o) { t.success("Note edited"), s && s(o) }).error(function (e, o) { t.error("Editing note failed with status: " + o), s && s(o) }).finally(function (e, o) { i.note = !1 }) }, deleteNote: function (o, s) { i.note = !0, e.delete(n + "api/notes/" + o).success(function (e, o) { t.success("Note deleted"), s && s(o) }).error(function (e, o) { t.error("Deleting note failed with status: " + o), s && s(o) }).finally(function (e, o) { i.note = !1 }) }, loading: i } }]), angular.module("OrganizationService", []).factory("Organization", ["$http", "toastr", "$rootScope", function (e, o, t) { const n = t.api_prefix; return { loadOrganizations: function (t) { e.get(n + "api/organizations").success(function (e, o) { t && t(e, o) }).error(function (e, n) { o.error("Loading organizations failed with status: " + n), t && t(e, n) }).finally(function (e, o) { }) }, loadFormOrganizations: function (t) { e.get(n + "api/organizations/form").success(function (e, o) { t && t(e, o) }).error(function (e, n) { o.error("Loading form organizations failed with status: " + n), t && t(e, n) }).finally(function (e, o) { }) }, loadQuestionOrganizations: function (t) { e.get(n + "api/organizations/question").success(function (e, o) { t && t(e, o) }).error(function (e, n) { o.error("Loading question organizations failed with status: " + n), t && t(e, n) }).finally(function (e, o) { }) } } }]), angular.module("QuestionService", []).factory("Questions", ["$http", "$rootScope", "toastr", function (e, o, t) { const n = o.api_prefix, i = [], s = {}, r = [], a = [], l = { value: !1 }, u = { value: !1, answers: !1, notes: !1, answersSuccess: !1, displayQuestions: !1, question: !1 }; function c(o, i, s, r) { e.get(n + "api/display_question_answer_data/" + o).success(function (e, o) { i[s].answers = e, r && r(e, o) }).error(function (e, o) { t.error("Fetching display logic answers failed with status: " + o), r && r(e, o) }).finally(function () { }) } return { getQuestions: i, getQuestion: s, getQuestionTypes: [{ type: "YESNO", text: "KyllÃ¤/ei" }, { type: "NUMBER", text: "Lukuarvo" }, { type: "TEXT", text: "Vapaa teksti (yksirivinen)" }, { type: "TEXTAREA", text: "Vapaa teksti (useampi rivi)" }, { type: "SELECT", text: "Monivalinta (valitse yksi vastaus)" }, { type: "CHECK", text: "Monivalinta (valitse useampi vastaus)" }, { type: "DATE", text: "PÃ¤ivÃ¤mÃ¤Ã¤rÃ¤" }, { type: "SUBTITLE", text: "VÃ¤liotsikko" }, { type: "FEEDBACK", text: "VÃ¤lipalaute" }, { type: "TERMINUS", text: "Loppupalaute" }], getQuestionTypesEN: [{ type: "YESNO", text: "Yes/No" }, { type: "NUMBER", text: "Numeric" }, { type: "TEXT", text: "Free Text (one line)" }, { type: "TEXTAREA", text: "Free Text (multiple lines)" }, { type: "SELECT", text: "Select (choose one answer)" }, { type: "CHECK", text: "Select (choose multiple answers)" }, { type: "DATE", text: "Date" }, { type: "SUBTITLE", text: "Subtitle" }, { type: "FEEDBACK", text: "Feedback" }, { type: "TERMINUS", text: "Terminus" }], getAnswers: r, setStatus: function (e) { l.value = "show" == e }, getDisplayStatus: l, loadCodeSystems: function (o) { e.get(n + "api/code-systems").success(function (e) { o(e) }).error(function (e, o) { t.error("Fetching data failed with status: " + o) }) }, loadSystemCodes: function (o, i) { e.get(n + "api/code-systems/" + o + "/codes").success(function (e) { i(e.items) }).error(function (e, o) { t.error("Fetching data failed with status: " + o) }) }, loadQuestions: function (o) { u.value = !0, e.get(n + "api/questions").success(function (e, t) { angular.copy(e, i), o && o(t) }).error(function (e, n) { t.error("Fetching data failed with status: " + n), o && o(n) }).finally(function () { u.value = !1 }) }, loadQuestion: function (o, i) { u.question = !0, e.get(n + "api/questions/" + o).success(function (e, o) { angular.copy(e, s), i && i(o) }).error(function (e, o) { t.error("Fetching question data failed with status: " + o), i && i(o) }).finally(function () { u.question = !1 }) }, loadAnswers: function (o, i, s) { u.answers = !0, e.get(n + "api/questions/" + o + "/answers?lang=" + function (e) { return e && e.language || "fi-FI" }(s)).success(function (e, o) { angular.copy(e, r), i && i(e, o) }).error(function (e, o) { t.error("Fetching answer data failed with status: " + o), i && i(e, o) }).finally(function () { u.answers = !1 }) }, createQuestion: function (i, s) { i.CREATED_BY = o.loggedUser.id, e.post(n + "api/questions", i).success(function (e, o) { t.success("Question created"), s && s(o, e) }).error(function (e, o) { console.log("Error: cannot create new question."), t.error("Creating question failed with status: " + o), s && s(o, e) }) }, updateQuestion: function (i, s, r) { const a = i.ID; i.EDITED_BY = o.loggedUser.id, e.put(n + "api/questions/" + a, i).success(function (e, o) { t.success("Question saved"), r && r(o) }).error(function (e, o) { t.error("Updating question failed with status: " + o), r && r(o) }) }, deleteQuestion: function (o, i) { e.delete(n + "api/questions/" + o).success(function (e, o) { t.success("Question removed"), i && i(o) }).error(function (e, o) { t.error("Deleting question failed with status: " + o), i && i(o) }) }, deleteQuestionCode: function (o, i) { e.delete(n + "api/questions/codes/" + o).success(i).error(function (e, o) { t.error("Removing question code failed with status: " + o) }) }, deleteAnswer: function (o, i, s) { u.answers = !0, e.delete(n + "api/answers/" + i).success(function (e, o) { s && s(o) }).error(function (e, o) { t.error("Deleting answer failed with status: " + o), s && s(o) }).finally(function () { u.answers = !1 }) }, deleteAnswerCode: function (o, i) { e.delete(n + "api/answers/codes/" + o).success(i).error(function (e, o) { t.error("Removing answer code failed with status: " + o) }) }, questionsLoading: u, createAnswer: function (o, i, s) { u.answers = !0, e.post(n + "api/questions/" + o + "/answer", i).success(function (e, o) { s && s(o) }).error(function (e, o) { t.error("Saving answer failed with status: " + o), s && s(o) }).finally(function () { u.answers = !1 }) }, switchAnswers: function (o, i, s) { if (u.answers = !0, o >= 0 && o < r.length && i >= 0 && i < r.length) { const a = r[o]; r[o] = r[i], r[i] = a, e.put(n + "api/answers/" + r[o].ID + "/switch/" + r[i].ID).success(function (e, o) { s && s(o) }).error(function (e, o) { t.error("Editing answer failed with status: " + o), s && s(o) }).finally(function () { u.answers = !1 }) } else t.error("Editing answer failed with status: " + status), s(500), u.answers = !1 }, loadLinkedForms: function (o, i) { u.value = !0, e.get(n + "api/questions/" + o + "/forms").success(function (e, o) { i && i(e, o) }).error(function (e, o) { t.error("Loading linked forms failed with status: " + o), i && i(e, o) }).finally(function () { u.value = !1 }) }, loadNotesInQuestion: function (o, i) { u.notes = !0, e.get(n + "api/questions/" + o + "/notes").success(function (e, o) { i && i(e, o) }).error(function (e, o) { t.error("Fetching data failed with status: " + o), i && i(e, o) }).finally(function () { u.notes = !1 }) }, loadDisplayRules: function (o, i, s, r) { u.answers = !0, e.get(n + "api/display_question/" + o + "/" + i).success(function (e, o) { if (e) for (let o = 0; o < e.length; o++)"YESNO" == e[o].TYPE && ("yes" == e[o].VALUE && "FI" == s && (e[o].VALUE = "kyllÃ¤"), "no" == e[o].VALUE && "FI" == s && (e[o].VALUE = "ei")), "TEXT" != e[o].TYPE && "TEXTAREA" != e[o].TYPE || ("equals" == e[o].LOGIC && "FI" == s && (e[o].LOGIC = "on yhtÃ¤ kuin"), "starts with" == e[o].LOGIC && "FI" == s && (e[o].LOGIC = "alkaa tekstillÃ¤"), "contains" == e[o].LOGIC && "FI" == s && (e[o].LOGIC = "sisÃ¤ltÃ¤Ã¤ tekstin")), "NUMBER" == e[o].TYPE && ("equals" == e[o].LOGIC && "FI" == s && (e[o].LOGIC = "yhtÃ¤ kuin"), "greater than" == e[o].LOGIC && "FI" == s && (e[o].LOGIC = "suurempi kuin"), "less than" == e[o].LOGIC && "FI" == s && (e[o].LOGIC = "pienempi kuin")); r && r(e, o) }).error(function (e, o) { t.error("Fetching display logic failed with status: " + o), r && r(e, o) }).finally(function () { }) }, loadDisplayRulesAll: function (o, i, s) { u.answers = !0, e.get(n + "api/display_question/" + o).success(function (e, o) { if (e) for (let o = 0; o < e.length; o++)"YESNO" == e[o].TYPE && ("yes" == e[o].VALUE && "FI" == i && (e[o].VALUE = "kyllÃ¤"), "no" == e[o].VALUE && "FI" == i && (e[o].VALUE = "ei")), "TEXT" != e[o].TYPE && "TEXTAREA" != e[o].TYPE || ("equals" == e[o].LOGIC && "FI" == i && (e[o].LOGIC = "on yhtÃ¤ kuin"), "starts with" == e[o].LOGIC && "FI" == i && (e[o].LOGIC = "alkaa tekstillÃ¤"), "contains" == e[o].LOGIC && "FI" == i && (e[o].LOGIC = "sisÃ¤ltÃ¤Ã¤ tekstin")), "NUMBER" == e[o].TYPE && ("equals" == e[o].LOGIC && "FI" == i && (e[o].LOGIC = "yhtÃ¤ kuin"), "greater than" == e[o].LOGIC && "FI" == i && (e[o].LOGIC = "suurempi kuin"), "less than" == e[o].LOGIC && "FI" == i && (e[o].LOGIC = "pienempi kuin")); s && s(e, o) }).error(function (e, o) { t.error("Fetching display logic failed with status: " + o), s && s(e, o) }).finally(function () { }) }, loadDisplayQuestionData: function (o, i, s) { u.displayQuestions = !0, e.get(n + "api/display_question_data/" + o + "/" + i).success(function (e, o) { angular.copy(e, a); for (let o = 0; o < e.length; o++)c(a[o].QUESTION_ID, a, o); s && s(e, o) }).error(function (e, o) { t.error("Fetching display logic questions failed with status: " + o), s && s(e, o) }).finally(function () { u.displayQuestions = !1 }) }, getDisplayQuestions: a, loadDisplayQuestionAnswerData: c, getDisplayAnswerQuestions: [], createDisplayRule: function (o, i) { e.post(n + "api/display_question", o).success(function (e, o) { i && i(o) }).error(function (e, o) { t.error("Saving display logic failed with status: " + o), i && i(o) }).finally(function () { }) }, saveDisplayRuleOperator: function (o, i, s) { e.post(n + "api/display_question_operator/" + i, o).success(function (e, o) { s && s(o) }).error(function (e, o) { t.error("Saving operator for display logic failed with status: " + o), s && s(o) }).finally(function () { }) }, removeDisplayLogic: function (o, i) { e.delete(n + "api/display_question/" + o).success(function (e, o) { i && i(o) }).error(function (e, o) { t.error("Removing display logic failed with status: " + o), i && i(o) }).finally(function () { }) }, editAnswer: function (o, i) { u.answers = !0, e.put(n + "api/answers/" + o.ID, o).success(function (e, o) { i && i(e, o) }).error(function (e, o) { t.error("Editing answer failed with status: " + o), i && i(e, o) }).finally(function () { u.answers = !1 }) } } }]), angular.module("AppRoutes", ["ui.router"]).config(["$stateProvider", "$urlRouterProvider", "$locationProvider", function (e, o, t) { o.otherwise("/"), t.html5Mode(!0), e.state("login", { url: "/login", views: { "": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/login-main-view.html" }, "header@login": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/header-view.html", controller: "HeaderController" }, "login@login": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/login-view.html", controller: "LoginController" } } }).state("secured", { abstract: !0, template: "<div ui-view></div>", resolve: { auth: ["$http", "$state", "$rootScope", "$location", function (e, o, t, n) { return e.get(t.api_prefix + "checksession?url=" + n.url()).then(function (e) { t.loggedUser = e.data, t.loggedIn = !0 }, function (e) { t.loggedUser = null, t.loggedIn = !1, o.go("login") }) }] } }).state("secured.main", { url: "/", views: { "": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/mainpage-view.html" }, "header@secured.main": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/header-view.html", controller: "HeaderController" }, "forms@secured.main": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/form-list-view.html", controller: "FormListController" }, "questions@secured.main": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/question-list-view.html", controller: "QuestionListController" } } }).state("secured.questionDetails", { url: "/question/:questionid", views: { "": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/question-details-page-view.html" }, "header@secured.questionDetails": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/header-view.html", controller: "HeaderController" }, "question@secured.questionDetails": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/question-details-view.html", controller: "QuestionDetailsController" }, "questionNotes@secured.questionDetails": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/note-feed-view.html", controller: "NoteFeedController" } } }).state("secured.formDetailsPage", { url: "/form/:formid", views: { "": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/form-details-page-view.html" }, "header@secured.formDetailsPage": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/header-view.html", controller: "HeaderController" }, "formDetails@secured.formDetailsPage": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/form-details-view.html", controller: "FormDetailsController" }, "formQuestions@secured.formDetailsPage": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/form-questions-view.html", controller: "FormQuestionsController" }, "formNotes@secured.formDetailsPage": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/note-feed-view.html", controller: "NoteFeedController" } } }).state("secured.formPreview", { url: "/formpreview/:formid", views: { "": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/form-preview-view.html", controller: "FormPreviewController" } } }).state("secured.newFormPage", { url: "/newform", views: { "": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/form-details-page-view.html" }, "header@secured.newFormPage": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/header-view.html", controller: "HeaderController" }, "formDetails@secured.newFormPage": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/new-form-view.html", controller: "NewFormController" } } }).state("secured.newQuestionPage", { url: "/newquestion", views: { "": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/question-details-page-view.html" }, "header@secured.newQuestionPage": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/header-view.html", controller: "HeaderController" }, "question@secured.newQuestionPage": { templateUrl: "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/new-question-view.html", controller: "NewQuestionController" } } }) }]); var prefix = "/"; angular.module("form_app", ["AppRoutes", "app.config", "ngAnimate", "ngTagsInput", "pascalprecht.translate", "textAngular", "toastr", "angular-loading-bar", "ds.objectDiff", "ConfirmCtrl", "HeaderCtrl", "LoginCtrl", "FormListCtrl", "QuestionListCtrl", "QuestionDetailsCtrl", "FormDetailsCtrl", "FormPreviewCtrl", "NewQuestionCtrl", "FormQuestionsCtrl", "LinkQuestionModalCtrl", "NewQuestionModalCtrl", "ModifyQuestionDisplayLogicModalCtrl", "ModifyFormOrganizationsCtrl", "ModifyQuestionOrganizationsCtrl", "NoteFeedCtrl", "NoteModalCtrl", "DeleteConfirmationModalCtrl", "NewFormCtrl", "PublishVersionCommentCtrl", "PublishVersionCommentDetailsCtrl", "ConfirmDirective", "ConvertDirective", "FormService", "QuestionService", "NoteService", "EbmedsService", "OrganizationService"]).run(["api_prefix", "logout_page", "userinfo_page", "oda_preview_url", "$rootScope", function (e, o, t, n, i) { i.api_prefix = e, i.logout_page = o, i.userinfo_page = t, i.oda_preview_url = n }]).config(["paginationTemplateProvider", function (e) { e.setPath(prefix + "https://cdn.jsdelivr.net/gh/dnikomon/dist/public/view/dirPagination.tpl.html") }]).config(["$translateProvider", function (e) { e.useLoader("translationLoader", {}), e.use("FI"), e.useSanitizeValueStrategy("escaped") }]).factory("translationLoader", ["$http", "$q", function (e, o) { return function (t) { const n = o.defer(); return e({ method: "GET", url: prefix + "lang/locale-" + t.key + ".json" }).success(function (e) { n.resolve(e) }).error(function () { n.reject(t.key) }), n.promise } }]).config(["$httpProvider", function (e) { e.interceptors.push(["$timeout", "$q", "$injector", function (o, t, n) { let i, s; return o(function () { i = n.get("$http"), s = n.get("$state") }), e.defaults.headers.get || (e.defaults.headers.get = {}), e.defaults.headers.get["If-Modified-Since"] = "Mon, 26 Jul 1997 05:00:00 GMT", e.defaults.headers.get["Cache-Control"] = "no-cache", e.defaults.headers.get.Pragma = "no-cache", { responseError(e) { const o = t.defer(); return 401 === e.status && !1 === s.includes("login") && s.go("login"), o.reject(e), o.promise } } }]) }]).config(["toastrConfig", function (e) { angular.extend(e, { autoDismiss: !0, positionClass: "toast-bottom-right", maxOpened: 2, newestOnTop: !0, progressBar: !0, timeOut: 5e3, closeButton: !0 }) }]);
//# sourceMappingURL=maps/app.js.map
